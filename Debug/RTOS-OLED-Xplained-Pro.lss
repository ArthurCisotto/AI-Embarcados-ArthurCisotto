
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a34c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a34c  0040a34c  0001a34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040a354  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000498  204009d0  0040ad24  000209d0  2**2
                  ALLOC
  4 .stack        00002000  20400e68  0040b1bc  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402e68  0040d1bc  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   00026cf8  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005429  00000000  00000000  0004774f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b4af  00000000  00000000  0004cb78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000010a0  00000000  00000000  00058027  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011f0  00000000  00000000  000590c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026992  00000000  00000000  0005a2b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00017cb4  00000000  00000000  00080c49  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096587  00000000  00000000  000988fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003b40  00000000  00000000  0012ee84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	68 2e 40 20 19 11 40 00 17 11 40 00 17 11 40 00     h.@ ..@...@...@.
  400010:	17 11 40 00 17 11 40 00 17 11 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f1 14 40 00 17 11 40 00 00 00 00 00 91 15 40 00     ..@...@.......@.
  40003c:	f9 15 40 00 17 11 40 00 17 11 40 00 17 11 40 00     ..@...@...@...@.
  40004c:	17 11 40 00 17 11 40 00 17 11 40 00 17 11 40 00     ..@...@...@...@.
  40005c:	17 11 40 00 17 11 40 00 00 00 00 00 09 0e 40 00     ..@...@.......@.
  40006c:	1d 0e 40 00 31 0e 40 00 17 11 40 00 17 11 40 00     ..@.1.@...@...@.
  40007c:	17 11 40 00 45 0e 40 00 59 0e 40 00 17 11 40 00     ..@.E.@.Y.@...@.
  40008c:	17 11 40 00 17 11 40 00 17 11 40 00 17 11 40 00     ..@...@...@...@.
  40009c:	17 11 40 00 17 11 40 00 17 11 40 00 17 11 40 00     ..@...@...@...@.
  4000ac:	17 11 40 00 17 11 40 00 17 11 40 00 17 11 40 00     ..@...@...@...@.
  4000bc:	17 11 40 00 17 11 40 00 17 11 40 00 17 11 40 00     ..@...@...@...@.
  4000cc:	17 11 40 00 00 00 00 00 17 11 40 00 00 00 00 00     ..@.......@.....
  4000dc:	17 11 40 00 17 11 40 00 17 11 40 00 17 11 40 00     ..@...@...@...@.
  4000ec:	17 11 40 00 17 11 40 00 17 11 40 00 17 11 40 00     ..@...@...@...@.
  4000fc:	17 11 40 00 17 11 40 00 17 11 40 00 17 11 40 00     ..@...@...@...@.
  40010c:	17 11 40 00 17 11 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 17 11 40 00 17 11 40 00 17 11 40 00     ......@...@...@.
  40012c:	17 11 40 00 17 11 40 00 00 00 00 00 17 11 40 00     ..@...@.......@.
  40013c:	17 11 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040a354 	.word	0x0040a354

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040a354 	.word	0x0040a354
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040a354 	.word	0x0040a354
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	204009ec 	.word	0x204009ec

004001c0 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4001c0:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4001c2:	6883      	ldr	r3, [r0, #8]
  4001c4:	429a      	cmp	r2, r3
  4001c6:	d003      	beq.n	4001d0 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4001c8:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4001ca:	6883      	ldr	r3, [r0, #8]
  4001cc:	4293      	cmp	r3, r2
  4001ce:	d1fb      	bne.n	4001c8 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4001d0:	4618      	mov	r0, r3
  4001d2:	4770      	bx	lr

004001d4 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001d4:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001d6:	4b07      	ldr	r3, [pc, #28]	; (4001f4 <spi_enable_clock+0x20>)
  4001d8:	4298      	cmp	r0, r3
  4001da:	d003      	beq.n	4001e4 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4001dc:	4b06      	ldr	r3, [pc, #24]	; (4001f8 <spi_enable_clock+0x24>)
  4001de:	4298      	cmp	r0, r3
  4001e0:	d004      	beq.n	4001ec <spi_enable_clock+0x18>
  4001e2:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4001e4:	2015      	movs	r0, #21
  4001e6:	4b05      	ldr	r3, [pc, #20]	; (4001fc <spi_enable_clock+0x28>)
  4001e8:	4798      	blx	r3
  4001ea:	bd08      	pop	{r3, pc}
  4001ec:	202a      	movs	r0, #42	; 0x2a
  4001ee:	4b03      	ldr	r3, [pc, #12]	; (4001fc <spi_enable_clock+0x28>)
  4001f0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4001f2:	e7f6      	b.n	4001e2 <spi_enable_clock+0xe>
  4001f4:	40008000 	.word	0x40008000
  4001f8:	40058000 	.word	0x40058000
  4001fc:	00400f8d 	.word	0x00400f8d

00400200 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400200:	6843      	ldr	r3, [r0, #4]
  400202:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  400206:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400208:	6843      	ldr	r3, [r0, #4]
  40020a:	0409      	lsls	r1, r1, #16
  40020c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400210:	4319      	orrs	r1, r3
  400212:	6041      	str	r1, [r0, #4]
  400214:	4770      	bx	lr

00400216 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400216:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400218:	f643 2499 	movw	r4, #15001	; 0x3a99
  40021c:	6905      	ldr	r5, [r0, #16]
  40021e:	f015 0f02 	tst.w	r5, #2
  400222:	d103      	bne.n	40022c <spi_write+0x16>
		if (!timeout--) {
  400224:	3c01      	subs	r4, #1
  400226:	d1f9      	bne.n	40021c <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400228:	2001      	movs	r0, #1
  40022a:	e00c      	b.n	400246 <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40022c:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40022e:	f014 0f02 	tst.w	r4, #2
  400232:	d006      	beq.n	400242 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400234:	0412      	lsls	r2, r2, #16
  400236:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40023a:	4311      	orrs	r1, r2
		if (uc_last) {
  40023c:	b10b      	cbz	r3, 400242 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40023e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400242:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400244:	2000      	movs	r0, #0
}
  400246:	bc30      	pop	{r4, r5}
  400248:	4770      	bx	lr

0040024a <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40024a:	b932      	cbnz	r2, 40025a <spi_set_clock_polarity+0x10>
  40024c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400250:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400252:	f023 0301 	bic.w	r3, r3, #1
  400256:	6303      	str	r3, [r0, #48]	; 0x30
  400258:	4770      	bx	lr
  40025a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40025e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400260:	f043 0301 	orr.w	r3, r3, #1
  400264:	6303      	str	r3, [r0, #48]	; 0x30
  400266:	4770      	bx	lr

00400268 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400268:	b932      	cbnz	r2, 400278 <spi_set_clock_phase+0x10>
  40026a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40026e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400270:	f023 0302 	bic.w	r3, r3, #2
  400274:	6303      	str	r3, [r0, #48]	; 0x30
  400276:	4770      	bx	lr
  400278:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40027c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40027e:	f043 0302 	orr.w	r3, r3, #2
  400282:	6303      	str	r3, [r0, #48]	; 0x30
  400284:	4770      	bx	lr

00400286 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400286:	2a04      	cmp	r2, #4
  400288:	d003      	beq.n	400292 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40028a:	b16a      	cbz	r2, 4002a8 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  40028c:	2a08      	cmp	r2, #8
  40028e:	d016      	beq.n	4002be <spi_configure_cs_behavior+0x38>
  400290:	4770      	bx	lr
  400292:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400296:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400298:	f023 0308 	bic.w	r3, r3, #8
  40029c:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  40029e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002a0:	f043 0304 	orr.w	r3, r3, #4
  4002a4:	6303      	str	r3, [r0, #48]	; 0x30
  4002a6:	4770      	bx	lr
  4002a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4002ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002ae:	f023 0308 	bic.w	r3, r3, #8
  4002b2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4002b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002b6:	f023 0304 	bic.w	r3, r3, #4
  4002ba:	6303      	str	r3, [r0, #48]	; 0x30
  4002bc:	4770      	bx	lr
  4002be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4002c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002c4:	f043 0308 	orr.w	r3, r3, #8
  4002c8:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4002ca:	e7e1      	b.n	400290 <spi_configure_cs_behavior+0xa>

004002cc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4002cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4002d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4002d6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4002d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4002da:	431a      	orrs	r2, r3
  4002dc:	630a      	str	r2, [r1, #48]	; 0x30
  4002de:	4770      	bx	lr

004002e0 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4002e0:	1e43      	subs	r3, r0, #1
  4002e2:	4419      	add	r1, r3
  4002e4:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4002e8:	1e43      	subs	r3, r0, #1
  4002ea:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4002ec:	bf94      	ite	ls
  4002ee:	b200      	sxthls	r0, r0
		return -1;
  4002f0:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4002f4:	4770      	bx	lr

004002f6 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  4002f6:	b17a      	cbz	r2, 400318 <spi_set_baudrate_div+0x22>
{
  4002f8:	b410      	push	{r4}
  4002fa:	4614      	mov	r4, r2
  4002fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400300:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400306:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400308:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40030a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40030e:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400310:	2000      	movs	r0, #0
}
  400312:	f85d 4b04 	ldr.w	r4, [sp], #4
  400316:	4770      	bx	lr
        return -1;
  400318:	f04f 30ff 	mov.w	r0, #4294967295
  40031c:	4770      	bx	lr
	...

00400320 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400320:	4b01      	ldr	r3, [pc, #4]	; (400328 <gfx_mono_set_framebuffer+0x8>)
  400322:	6018      	str	r0, [r3, #0]
  400324:	4770      	bx	lr
  400326:	bf00      	nop
  400328:	204009f0 	.word	0x204009f0

0040032c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40032c:	4b02      	ldr	r3, [pc, #8]	; (400338 <gfx_mono_framebuffer_put_byte+0xc>)
  40032e:	681b      	ldr	r3, [r3, #0]
  400330:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  400334:	5442      	strb	r2, [r0, r1]
  400336:	4770      	bx	lr
  400338:	204009f0 	.word	0x204009f0

0040033c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  40033c:	4b02      	ldr	r3, [pc, #8]	; (400348 <gfx_mono_framebuffer_get_byte+0xc>)
  40033e:	681b      	ldr	r3, [r3, #0]
  400340:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400344:	5c40      	ldrb	r0, [r0, r1]
  400346:	4770      	bx	lr
  400348:	204009f0 	.word	0x204009f0

0040034c <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  40034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400350:	1884      	adds	r4, r0, r2
  400352:	2c80      	cmp	r4, #128	; 0x80
  400354:	dd02      	ble.n	40035c <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  400356:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40035a:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  40035c:	b322      	cbz	r2, 4003a8 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  40035e:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400360:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400364:	2601      	movs	r6, #1
  400366:	fa06 f101 	lsl.w	r1, r6, r1
  40036a:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  40036c:	2b01      	cmp	r3, #1
  40036e:	d01d      	beq.n	4003ac <gfx_mono_generic_draw_horizontal_line+0x60>
  400370:	2b00      	cmp	r3, #0
  400372:	d035      	beq.n	4003e0 <gfx_mono_generic_draw_horizontal_line+0x94>
  400374:	2b02      	cmp	r3, #2
  400376:	d117      	bne.n	4003a8 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400378:	3801      	subs	r0, #1
  40037a:	b2c7      	uxtb	r7, r0
  40037c:	19d4      	adds	r4, r2, r7
  40037e:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400380:	f8df a090 	ldr.w	sl, [pc, #144]	; 400414 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400384:	f04f 0900 	mov.w	r9, #0
  400388:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400418 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40038c:	4621      	mov	r1, r4
  40038e:	4628      	mov	r0, r5
  400390:	47d0      	blx	sl
			temp ^= pixelmask;
  400392:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400396:	464b      	mov	r3, r9
  400398:	b2d2      	uxtb	r2, r2
  40039a:	4621      	mov	r1, r4
  40039c:	4628      	mov	r0, r5
  40039e:	47c0      	blx	r8
  4003a0:	3c01      	subs	r4, #1
  4003a2:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4003a4:	42bc      	cmp	r4, r7
  4003a6:	d1f1      	bne.n	40038c <gfx_mono_generic_draw_horizontal_line+0x40>
  4003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003ac:	3801      	subs	r0, #1
  4003ae:	b2c7      	uxtb	r7, r0
  4003b0:	19d4      	adds	r4, r2, r7
  4003b2:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4003b4:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400414 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4003b8:	f04f 0900 	mov.w	r9, #0
  4003bc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400418 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4003c0:	4621      	mov	r1, r4
  4003c2:	4628      	mov	r0, r5
  4003c4:	47d0      	blx	sl
			temp |= pixelmask;
  4003c6:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4003ca:	464b      	mov	r3, r9
  4003cc:	b2d2      	uxtb	r2, r2
  4003ce:	4621      	mov	r1, r4
  4003d0:	4628      	mov	r0, r5
  4003d2:	47c0      	blx	r8
  4003d4:	3c01      	subs	r4, #1
  4003d6:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4003d8:	42bc      	cmp	r4, r7
  4003da:	d1f1      	bne.n	4003c0 <gfx_mono_generic_draw_horizontal_line+0x74>
  4003dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4003e0:	3801      	subs	r0, #1
  4003e2:	b2c7      	uxtb	r7, r0
  4003e4:	19d4      	adds	r4, r2, r7
  4003e6:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4003e8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400414 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4003ec:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4003ee:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400418 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4003f2:	4621      	mov	r1, r4
  4003f4:	4628      	mov	r0, r5
  4003f6:	47c0      	blx	r8
			temp &= ~pixelmask;
  4003f8:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4003fc:	2300      	movs	r3, #0
  4003fe:	b2d2      	uxtb	r2, r2
  400400:	4621      	mov	r1, r4
  400402:	4628      	mov	r0, r5
  400404:	47c8      	blx	r9
  400406:	3c01      	subs	r4, #1
  400408:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40040a:	42bc      	cmp	r4, r7
  40040c:	d1f1      	bne.n	4003f2 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400412:	bf00      	nop
  400414:	0040064d 	.word	0x0040064d
  400418:	00400549 	.word	0x00400549

0040041c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40041c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400420:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400424:	b18b      	cbz	r3, 40044a <gfx_mono_generic_draw_filled_rect+0x2e>
  400426:	461c      	mov	r4, r3
  400428:	4690      	mov	r8, r2
  40042a:	4606      	mov	r6, r0
  40042c:	1e4d      	subs	r5, r1, #1
  40042e:	b2ed      	uxtb	r5, r5
  400430:	442c      	add	r4, r5
  400432:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400434:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400450 <gfx_mono_generic_draw_filled_rect+0x34>
  400438:	463b      	mov	r3, r7
  40043a:	4642      	mov	r2, r8
  40043c:	4621      	mov	r1, r4
  40043e:	4630      	mov	r0, r6
  400440:	47c8      	blx	r9
  400442:	3c01      	subs	r4, #1
  400444:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  400446:	42ac      	cmp	r4, r5
  400448:	d1f6      	bne.n	400438 <gfx_mono_generic_draw_filled_rect+0x1c>
  40044a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40044e:	bf00      	nop
  400450:	0040034d 	.word	0x0040034d

00400454 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400458:	b083      	sub	sp, #12
  40045a:	4604      	mov	r4, r0
  40045c:	4688      	mov	r8, r1
  40045e:	4691      	mov	r9, r2
  400460:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400462:	7a5b      	ldrb	r3, [r3, #9]
  400464:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400468:	2100      	movs	r1, #0
  40046a:	9100      	str	r1, [sp, #0]
  40046c:	4649      	mov	r1, r9
  40046e:	4640      	mov	r0, r8
  400470:	4d21      	ldr	r5, [pc, #132]	; (4004f8 <gfx_mono_draw_char+0xa4>)
  400472:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400474:	f89b 3000 	ldrb.w	r3, [fp]
  400478:	b113      	cbz	r3, 400480 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40047a:	b003      	add	sp, #12
  40047c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400480:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400484:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400486:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40048a:	bf18      	it	ne
  40048c:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  40048e:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400492:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400496:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400498:	fb17 f70a 	smulbb	r7, r7, sl
  40049c:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4004a0:	f8db 3004 	ldr.w	r3, [fp, #4]
  4004a4:	fa13 f787 	uxtah	r7, r3, r7
  4004a8:	e01f      	b.n	4004ea <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4004aa:	0064      	lsls	r4, r4, #1
  4004ac:	b2e4      	uxtb	r4, r4
  4004ae:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4004b0:	b2eb      	uxtb	r3, r5
  4004b2:	429e      	cmp	r6, r3
  4004b4:	d910      	bls.n	4004d8 <gfx_mono_draw_char+0x84>
  4004b6:	b2eb      	uxtb	r3, r5
  4004b8:	eb08 0003 	add.w	r0, r8, r3
  4004bc:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4004be:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4004c2:	bf08      	it	eq
  4004c4:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4004c8:	f014 0f80 	tst.w	r4, #128	; 0x80
  4004cc:	d0ed      	beq.n	4004aa <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4004ce:	2201      	movs	r2, #1
  4004d0:	4649      	mov	r1, r9
  4004d2:	4b0a      	ldr	r3, [pc, #40]	; (4004fc <gfx_mono_draw_char+0xa8>)
  4004d4:	4798      	blx	r3
  4004d6:	e7e8      	b.n	4004aa <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4004d8:	f109 0901 	add.w	r9, r9, #1
  4004dc:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4004e0:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4004e4:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4004e8:	d0c7      	beq.n	40047a <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4004ea:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4004ee:	2e00      	cmp	r6, #0
  4004f0:	d0f2      	beq.n	4004d8 <gfx_mono_draw_char+0x84>
  4004f2:	2500      	movs	r5, #0
  4004f4:	462c      	mov	r4, r5
  4004f6:	e7de      	b.n	4004b6 <gfx_mono_draw_char+0x62>
  4004f8:	0040041d 	.word	0x0040041d
  4004fc:	004005e9 	.word	0x004005e9

00400500 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400504:	4604      	mov	r4, r0
  400506:	4690      	mov	r8, r2
  400508:	461d      	mov	r5, r3
  40050a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  40050c:	4f0d      	ldr	r7, [pc, #52]	; (400544 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40050e:	460e      	mov	r6, r1
  400510:	e008      	b.n	400524 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400512:	7a6a      	ldrb	r2, [r5, #9]
  400514:	3201      	adds	r2, #1
  400516:	4442      	add	r2, r8
  400518:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  40051c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  40051e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400522:	b16b      	cbz	r3, 400540 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400524:	7820      	ldrb	r0, [r4, #0]
  400526:	280a      	cmp	r0, #10
  400528:	d0f3      	beq.n	400512 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  40052a:	280d      	cmp	r0, #13
  40052c:	d0f7      	beq.n	40051e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  40052e:	462b      	mov	r3, r5
  400530:	4642      	mov	r2, r8
  400532:	4649      	mov	r1, r9
  400534:	47b8      	blx	r7
			x += font->width;
  400536:	7a2b      	ldrb	r3, [r5, #8]
  400538:	4499      	add	r9, r3
  40053a:	fa5f f989 	uxtb.w	r9, r9
  40053e:	e7ee      	b.n	40051e <gfx_mono_draw_string+0x1e>
}
  400540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400544:	00400455 	.word	0x00400455

00400548 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400548:	b570      	push	{r4, r5, r6, lr}
  40054a:	4604      	mov	r4, r0
  40054c:	460d      	mov	r5, r1
  40054e:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400550:	b91b      	cbnz	r3, 40055a <gfx_mono_ssd1306_put_byte+0x12>
  400552:	4b0d      	ldr	r3, [pc, #52]	; (400588 <gfx_mono_ssd1306_put_byte+0x40>)
  400554:	4798      	blx	r3
  400556:	42b0      	cmp	r0, r6
  400558:	d015      	beq.n	400586 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40055a:	4632      	mov	r2, r6
  40055c:	4629      	mov	r1, r5
  40055e:	4620      	mov	r0, r4
  400560:	4b0a      	ldr	r3, [pc, #40]	; (40058c <gfx_mono_ssd1306_put_byte+0x44>)
  400562:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400564:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400568:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40056c:	4c08      	ldr	r4, [pc, #32]	; (400590 <gfx_mono_ssd1306_put_byte+0x48>)
  40056e:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400570:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400574:	f040 0010 	orr.w	r0, r0, #16
  400578:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40057a:	f005 000f 	and.w	r0, r5, #15
  40057e:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400580:	4630      	mov	r0, r6
  400582:	4b04      	ldr	r3, [pc, #16]	; (400594 <gfx_mono_ssd1306_put_byte+0x4c>)
  400584:	4798      	blx	r3
  400586:	bd70      	pop	{r4, r5, r6, pc}
  400588:	0040033d 	.word	0x0040033d
  40058c:	0040032d 	.word	0x0040032d
  400590:	00400659 	.word	0x00400659
  400594:	00400879 	.word	0x00400879

00400598 <gfx_mono_ssd1306_init>:
{
  400598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  40059c:	480d      	ldr	r0, [pc, #52]	; (4005d4 <gfx_mono_ssd1306_init+0x3c>)
  40059e:	4b0e      	ldr	r3, [pc, #56]	; (4005d8 <gfx_mono_ssd1306_init+0x40>)
  4005a0:	4798      	blx	r3
	ssd1306_init();
  4005a2:	4b0e      	ldr	r3, [pc, #56]	; (4005dc <gfx_mono_ssd1306_init+0x44>)
  4005a4:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4005a6:	2040      	movs	r0, #64	; 0x40
  4005a8:	4b0d      	ldr	r3, [pc, #52]	; (4005e0 <gfx_mono_ssd1306_init+0x48>)
  4005aa:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4005ac:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4005ae:	f04f 0801 	mov.w	r8, #1
  4005b2:	462f      	mov	r7, r5
  4005b4:	4e0b      	ldr	r6, [pc, #44]	; (4005e4 <gfx_mono_ssd1306_init+0x4c>)
{
  4005b6:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4005b8:	4643      	mov	r3, r8
  4005ba:	463a      	mov	r2, r7
  4005bc:	b2e1      	uxtb	r1, r4
  4005be:	4628      	mov	r0, r5
  4005c0:	47b0      	blx	r6
  4005c2:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4005c4:	2c80      	cmp	r4, #128	; 0x80
  4005c6:	d1f7      	bne.n	4005b8 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4005c8:	3501      	adds	r5, #1
  4005ca:	b2ed      	uxtb	r5, r5
  4005cc:	2d04      	cmp	r5, #4
  4005ce:	d1f2      	bne.n	4005b6 <gfx_mono_ssd1306_init+0x1e>
  4005d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4005d4:	204009f4 	.word	0x204009f4
  4005d8:	00400321 	.word	0x00400321
  4005dc:	00400699 	.word	0x00400699
  4005e0:	00400659 	.word	0x00400659
  4005e4:	00400549 	.word	0x00400549

004005e8 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4005e8:	09c3      	lsrs	r3, r0, #7
  4005ea:	d12a      	bne.n	400642 <gfx_mono_ssd1306_draw_pixel+0x5a>
  4005ec:	291f      	cmp	r1, #31
  4005ee:	d828      	bhi.n	400642 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  4005f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4005f4:	4614      	mov	r4, r2
  4005f6:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  4005f8:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  4005fa:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  4005fe:	2201      	movs	r2, #1
  400600:	fa02 f701 	lsl.w	r7, r2, r1
  400604:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400608:	4601      	mov	r1, r0
  40060a:	4630      	mov	r0, r6
  40060c:	4b0d      	ldr	r3, [pc, #52]	; (400644 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  40060e:	4798      	blx	r3
  400610:	4602      	mov	r2, r0
	switch (color) {
  400612:	2c01      	cmp	r4, #1
  400614:	d009      	beq.n	40062a <gfx_mono_ssd1306_draw_pixel+0x42>
  400616:	b164      	cbz	r4, 400632 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400618:	2c02      	cmp	r4, #2
  40061a:	d00e      	beq.n	40063a <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  40061c:	2300      	movs	r3, #0
  40061e:	4629      	mov	r1, r5
  400620:	4630      	mov	r0, r6
  400622:	4c09      	ldr	r4, [pc, #36]	; (400648 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400624:	47a0      	blx	r4
  400626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  40062a:	ea48 0200 	orr.w	r2, r8, r0
  40062e:	b2d2      	uxtb	r2, r2
		break;
  400630:	e7f4      	b.n	40061c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400632:	ea20 0207 	bic.w	r2, r0, r7
  400636:	b2d2      	uxtb	r2, r2
		break;
  400638:	e7f0      	b.n	40061c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  40063a:	ea88 0200 	eor.w	r2, r8, r0
  40063e:	b2d2      	uxtb	r2, r2
		break;
  400640:	e7ec      	b.n	40061c <gfx_mono_ssd1306_draw_pixel+0x34>
  400642:	4770      	bx	lr
  400644:	0040033d 	.word	0x0040033d
  400648:	00400549 	.word	0x00400549

0040064c <gfx_mono_ssd1306_get_byte>:
{
  40064c:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  40064e:	4b01      	ldr	r3, [pc, #4]	; (400654 <gfx_mono_ssd1306_get_byte+0x8>)
  400650:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400652:	bd08      	pop	{r3, pc}
  400654:	0040033d 	.word	0x0040033d

00400658 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400658:	b538      	push	{r3, r4, r5, lr}
  40065a:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40065c:	2208      	movs	r2, #8
  40065e:	4b09      	ldr	r3, [pc, #36]	; (400684 <ssd1306_write_command+0x2c>)
  400660:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400662:	4c09      	ldr	r4, [pc, #36]	; (400688 <ssd1306_write_command+0x30>)
  400664:	2101      	movs	r1, #1
  400666:	4620      	mov	r0, r4
  400668:	4b08      	ldr	r3, [pc, #32]	; (40068c <ssd1306_write_command+0x34>)
  40066a:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  40066c:	2301      	movs	r3, #1
  40066e:	461a      	mov	r2, r3
  400670:	4629      	mov	r1, r5
  400672:	4620      	mov	r0, r4
  400674:	4c06      	ldr	r4, [pc, #24]	; (400690 <ssd1306_write_command+0x38>)
  400676:	47a0      	blx	r4
	delay_us(10);
  400678:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40067c:	4b05      	ldr	r3, [pc, #20]	; (400694 <ssd1306_write_command+0x3c>)
  40067e:	4798      	blx	r3
  400680:	bd38      	pop	{r3, r4, r5, pc}
  400682:	bf00      	nop
  400684:	400e1000 	.word	0x400e1000
  400688:	40008000 	.word	0x40008000
  40068c:	00400201 	.word	0x00400201
  400690:	00400217 	.word	0x00400217
  400694:	20400001 	.word	0x20400001

00400698 <ssd1306_init>:
{
  400698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40069c:	4d66      	ldr	r5, [pc, #408]	; (400838 <ssd1306_init+0x1a0>)
  40069e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  4006a2:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006a4:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4006a8:	4b64      	ldr	r3, [pc, #400]	; (40083c <ssd1306_init+0x1a4>)
  4006aa:	2708      	movs	r7, #8
  4006ac:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4006ae:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4006b2:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4006b4:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006b8:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006ba:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006bc:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4006c0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  4006c2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4006c6:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006c8:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  4006ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  4006ce:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  4006d0:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4006d2:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4006d6:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4006d8:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4006da:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4006de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006e0:	f022 0208 	bic.w	r2, r2, #8
  4006e4:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4006e6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006e8:	f022 0208 	bic.w	r2, r2, #8
  4006ec:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  4006ee:	601f      	str	r7, [r3, #0]
  4006f0:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4006f2:	631f      	str	r7, [r3, #48]	; 0x30
  4006f4:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  4006f6:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400874 <ssd1306_init+0x1dc>
  4006fa:	2300      	movs	r3, #0
  4006fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400700:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400704:	4640      	mov	r0, r8
  400706:	4c4e      	ldr	r4, [pc, #312]	; (400840 <ssd1306_init+0x1a8>)
  400708:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40070a:	2300      	movs	r3, #0
  40070c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400710:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400714:	4640      	mov	r0, r8
  400716:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400718:	2300      	movs	r3, #0
  40071a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40071e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400722:	4640      	mov	r0, r8
  400724:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400726:	2300      	movs	r3, #0
  400728:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  40072c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400730:	4640      	mov	r0, r8
  400732:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400734:	2300      	movs	r3, #0
  400736:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  40073a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40073e:	4640      	mov	r0, r8
  400740:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400742:	2300      	movs	r3, #0
  400744:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400748:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40074c:	4640      	mov	r0, r8
  40074e:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400750:	4c3c      	ldr	r4, [pc, #240]	; (400844 <ssd1306_init+0x1ac>)
  400752:	f04f 0902 	mov.w	r9, #2
  400756:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  40075a:	f04f 0880 	mov.w	r8, #128	; 0x80
  40075e:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400762:	6863      	ldr	r3, [r4, #4]
  400764:	f043 0301 	orr.w	r3, r3, #1
  400768:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  40076a:	463a      	mov	r2, r7
  40076c:	2101      	movs	r1, #1
  40076e:	4620      	mov	r0, r4
  400770:	4b35      	ldr	r3, [pc, #212]	; (400848 <ssd1306_init+0x1b0>)
  400772:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400774:	2200      	movs	r2, #0
  400776:	2101      	movs	r1, #1
  400778:	4620      	mov	r0, r4
  40077a:	4b34      	ldr	r3, [pc, #208]	; (40084c <ssd1306_init+0x1b4>)
  40077c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  40077e:	2200      	movs	r2, #0
  400780:	2101      	movs	r1, #1
  400782:	4620      	mov	r0, r4
  400784:	4b32      	ldr	r3, [pc, #200]	; (400850 <ssd1306_init+0x1b8>)
  400786:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400788:	6863      	ldr	r3, [r4, #4]
  40078a:	f023 0302 	bic.w	r3, r3, #2
  40078e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400790:	2200      	movs	r2, #0
  400792:	2101      	movs	r1, #1
  400794:	4620      	mov	r0, r4
  400796:	4b2f      	ldr	r3, [pc, #188]	; (400854 <ssd1306_init+0x1bc>)
  400798:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  40079a:	6863      	ldr	r3, [r4, #4]
  40079c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4007a0:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4007a2:	6863      	ldr	r3, [r4, #4]
  4007a4:	f043 0310 	orr.w	r3, r3, #16
  4007a8:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  4007aa:	492b      	ldr	r1, [pc, #172]	; (400858 <ssd1306_init+0x1c0>)
  4007ac:	482b      	ldr	r0, [pc, #172]	; (40085c <ssd1306_init+0x1c4>)
  4007ae:	4b2c      	ldr	r3, [pc, #176]	; (400860 <ssd1306_init+0x1c8>)
  4007b0:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  4007b2:	b2c2      	uxtb	r2, r0
  4007b4:	2101      	movs	r1, #1
  4007b6:	4620      	mov	r0, r4
  4007b8:	4b2a      	ldr	r3, [pc, #168]	; (400864 <ssd1306_init+0x1cc>)
  4007ba:	4798      	blx	r3
		spi_enable_clock(SPI0);
  4007bc:	4620      	mov	r0, r4
  4007be:	4b2a      	ldr	r3, [pc, #168]	; (400868 <ssd1306_init+0x1d0>)
  4007c0:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4007c2:	2301      	movs	r3, #1
  4007c4:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4007c6:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  4007c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4007cc:	4c27      	ldr	r4, [pc, #156]	; (40086c <ssd1306_init+0x1d4>)
  4007ce:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007d0:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  4007d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4007d6:	47a0      	blx	r4
  4007d8:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  4007da:	20a8      	movs	r0, #168	; 0xa8
  4007dc:	4c24      	ldr	r4, [pc, #144]	; (400870 <ssd1306_init+0x1d8>)
  4007de:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  4007e0:	201f      	movs	r0, #31
  4007e2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  4007e4:	20d3      	movs	r0, #211	; 0xd3
  4007e6:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  4007e8:	2000      	movs	r0, #0
  4007ea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  4007ec:	2040      	movs	r0, #64	; 0x40
  4007ee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  4007f0:	20a1      	movs	r0, #161	; 0xa1
  4007f2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  4007f4:	20c8      	movs	r0, #200	; 0xc8
  4007f6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  4007f8:	20da      	movs	r0, #218	; 0xda
  4007fa:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  4007fc:	4648      	mov	r0, r9
  4007fe:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400800:	2081      	movs	r0, #129	; 0x81
  400802:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400804:	208f      	movs	r0, #143	; 0x8f
  400806:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400808:	20a4      	movs	r0, #164	; 0xa4
  40080a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  40080c:	20a6      	movs	r0, #166	; 0xa6
  40080e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400810:	20d5      	movs	r0, #213	; 0xd5
  400812:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400814:	4640      	mov	r0, r8
  400816:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400818:	208d      	movs	r0, #141	; 0x8d
  40081a:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  40081c:	2014      	movs	r0, #20
  40081e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400820:	20db      	movs	r0, #219	; 0xdb
  400822:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400824:	2040      	movs	r0, #64	; 0x40
  400826:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400828:	20d9      	movs	r0, #217	; 0xd9
  40082a:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  40082c:	20f1      	movs	r0, #241	; 0xf1
  40082e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400830:	20af      	movs	r0, #175	; 0xaf
  400832:	47a0      	blx	r4
  400834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400838:	400e1200 	.word	0x400e1200
  40083c:	400e1000 	.word	0x400e1000
  400840:	00400c79 	.word	0x00400c79
  400844:	40008000 	.word	0x40008000
  400848:	00400287 	.word	0x00400287
  40084c:	0040024b 	.word	0x0040024b
  400850:	00400269 	.word	0x00400269
  400854:	004002cd 	.word	0x004002cd
  400858:	08f0d180 	.word	0x08f0d180
  40085c:	001e8480 	.word	0x001e8480
  400860:	004002e1 	.word	0x004002e1
  400864:	004002f7 	.word	0x004002f7
  400868:	004001d5 	.word	0x004001d5
  40086c:	20400001 	.word	0x20400001
  400870:	00400659 	.word	0x00400659
  400874:	400e1400 	.word	0x400e1400

00400878 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400878:	b538      	push	{r3, r4, r5, lr}
  40087a:	4605      	mov	r5, r0
  40087c:	2208      	movs	r2, #8
  40087e:	4b09      	ldr	r3, [pc, #36]	; (4008a4 <ssd1306_write_data+0x2c>)
  400880:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400882:	4c09      	ldr	r4, [pc, #36]	; (4008a8 <ssd1306_write_data+0x30>)
  400884:	2101      	movs	r1, #1
  400886:	4620      	mov	r0, r4
  400888:	4b08      	ldr	r3, [pc, #32]	; (4008ac <ssd1306_write_data+0x34>)
  40088a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40088c:	2301      	movs	r3, #1
  40088e:	461a      	mov	r2, r3
  400890:	4629      	mov	r1, r5
  400892:	4620      	mov	r0, r4
  400894:	4c06      	ldr	r4, [pc, #24]	; (4008b0 <ssd1306_write_data+0x38>)
  400896:	47a0      	blx	r4
	delay_us(10);
  400898:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  40089c:	4b05      	ldr	r3, [pc, #20]	; (4008b4 <ssd1306_write_data+0x3c>)
  40089e:	4798      	blx	r3
  4008a0:	bd38      	pop	{r3, r4, r5, pc}
  4008a2:	bf00      	nop
  4008a4:	400e1000 	.word	0x400e1000
  4008a8:	40008000 	.word	0x40008000
  4008ac:	00400201 	.word	0x00400201
  4008b0:	00400217 	.word	0x00400217
  4008b4:	20400001 	.word	0x20400001

004008b8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4008b8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4008ba:	4810      	ldr	r0, [pc, #64]	; (4008fc <sysclk_init+0x44>)
  4008bc:	4b10      	ldr	r3, [pc, #64]	; (400900 <sysclk_init+0x48>)
  4008be:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4008c0:	213e      	movs	r1, #62	; 0x3e
  4008c2:	2000      	movs	r0, #0
  4008c4:	4b0f      	ldr	r3, [pc, #60]	; (400904 <sysclk_init+0x4c>)
  4008c6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4008c8:	4c0f      	ldr	r4, [pc, #60]	; (400908 <sysclk_init+0x50>)
  4008ca:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4008cc:	2800      	cmp	r0, #0
  4008ce:	d0fc      	beq.n	4008ca <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4008d0:	4b0e      	ldr	r3, [pc, #56]	; (40090c <sysclk_init+0x54>)
  4008d2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4008d4:	4a0e      	ldr	r2, [pc, #56]	; (400910 <sysclk_init+0x58>)
  4008d6:	4b0f      	ldr	r3, [pc, #60]	; (400914 <sysclk_init+0x5c>)
  4008d8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4008da:	4c0f      	ldr	r4, [pc, #60]	; (400918 <sysclk_init+0x60>)
  4008dc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4008de:	2800      	cmp	r0, #0
  4008e0:	d0fc      	beq.n	4008dc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4008e2:	2002      	movs	r0, #2
  4008e4:	4b0d      	ldr	r3, [pc, #52]	; (40091c <sysclk_init+0x64>)
  4008e6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4008e8:	2000      	movs	r0, #0
  4008ea:	4b0d      	ldr	r3, [pc, #52]	; (400920 <sysclk_init+0x68>)
  4008ec:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4008ee:	4b0d      	ldr	r3, [pc, #52]	; (400924 <sysclk_init+0x6c>)
  4008f0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4008f2:	4802      	ldr	r0, [pc, #8]	; (4008fc <sysclk_init+0x44>)
  4008f4:	4b02      	ldr	r3, [pc, #8]	; (400900 <sysclk_init+0x48>)
  4008f6:	4798      	blx	r3
  4008f8:	bd10      	pop	{r4, pc}
  4008fa:	bf00      	nop
  4008fc:	11e1a300 	.word	0x11e1a300
  400900:	004012ed 	.word	0x004012ed
  400904:	00400f09 	.word	0x00400f09
  400908:	00400f5d 	.word	0x00400f5d
  40090c:	00400f6d 	.word	0x00400f6d
  400910:	20183f01 	.word	0x20183f01
  400914:	400e0600 	.word	0x400e0600
  400918:	00400f7d 	.word	0x00400f7d
  40091c:	00400e6d 	.word	0x00400e6d
  400920:	00400ea5 	.word	0x00400ea5
  400924:	004011e1 	.word	0x004011e1

00400928 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  40092c:	b980      	cbnz	r0, 400950 <_read+0x28>
  40092e:	460c      	mov	r4, r1
  400930:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400932:	2a00      	cmp	r2, #0
  400934:	dd0f      	ble.n	400956 <_read+0x2e>
  400936:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400938:	4e08      	ldr	r6, [pc, #32]	; (40095c <_read+0x34>)
  40093a:	4d09      	ldr	r5, [pc, #36]	; (400960 <_read+0x38>)
  40093c:	6830      	ldr	r0, [r6, #0]
  40093e:	4621      	mov	r1, r4
  400940:	682b      	ldr	r3, [r5, #0]
  400942:	4798      	blx	r3
		ptr++;
  400944:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400946:	42bc      	cmp	r4, r7
  400948:	d1f8      	bne.n	40093c <_read+0x14>
		nChars++;
	}
	return nChars;
}
  40094a:	4640      	mov	r0, r8
  40094c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400950:	f04f 38ff 	mov.w	r8, #4294967295
  400954:	e7f9      	b.n	40094a <_read+0x22>
	for (; len > 0; --len) {
  400956:	4680      	mov	r8, r0
  400958:	e7f7      	b.n	40094a <_read+0x22>
  40095a:	bf00      	nop
  40095c:	20400dec 	.word	0x20400dec
  400960:	20400de4 	.word	0x20400de4

00400964 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400964:	3801      	subs	r0, #1
  400966:	2802      	cmp	r0, #2
  400968:	d815      	bhi.n	400996 <_write+0x32>
{
  40096a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40096e:	460e      	mov	r6, r1
  400970:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400972:	b19a      	cbz	r2, 40099c <_write+0x38>
  400974:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400976:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4009b0 <_write+0x4c>
  40097a:	4f0c      	ldr	r7, [pc, #48]	; (4009ac <_write+0x48>)
  40097c:	f8d8 0000 	ldr.w	r0, [r8]
  400980:	f815 1b01 	ldrb.w	r1, [r5], #1
  400984:	683b      	ldr	r3, [r7, #0]
  400986:	4798      	blx	r3
  400988:	2800      	cmp	r0, #0
  40098a:	db0a      	blt.n	4009a2 <_write+0x3e>
  40098c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40098e:	3c01      	subs	r4, #1
  400990:	d1f4      	bne.n	40097c <_write+0x18>
  400992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400996:	f04f 30ff 	mov.w	r0, #4294967295
  40099a:	4770      	bx	lr
	for (; len != 0; --len) {
  40099c:	4610      	mov	r0, r2
  40099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4009a2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4009a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009aa:	bf00      	nop
  4009ac:	20400de8 	.word	0x20400de8
  4009b0:	20400dec 	.word	0x20400dec

004009b4 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4009b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009ba:	4b5c      	ldr	r3, [pc, #368]	; (400b2c <board_init+0x178>)
  4009bc:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4009be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009c2:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4009c6:	4b5a      	ldr	r3, [pc, #360]	; (400b30 <board_init+0x17c>)
  4009c8:	2200      	movs	r2, #0
  4009ca:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4009ce:	695a      	ldr	r2, [r3, #20]
  4009d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4009d4:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4009d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009da:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4009de:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4009e2:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4009e6:	f007 0007 	and.w	r0, r7, #7
  4009ea:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4009ec:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4009f0:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4009f4:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4009f8:	f3bf 8f4f 	dsb	sy
  4009fc:	f04f 34ff 	mov.w	r4, #4294967295
  400a00:	fa04 fc00 	lsl.w	ip, r4, r0
  400a04:	fa06 f000 	lsl.w	r0, r6, r0
  400a08:	fa04 f40e 	lsl.w	r4, r4, lr
  400a0c:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400a10:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400a12:	463a      	mov	r2, r7
  400a14:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400a16:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400a1a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400a1e:	3a01      	subs	r2, #1
  400a20:	4423      	add	r3, r4
  400a22:	f1b2 3fff 	cmp.w	r2, #4294967295
  400a26:	d1f6      	bne.n	400a16 <board_init+0x62>
        } while(sets--);
  400a28:	3e01      	subs	r6, #1
  400a2a:	4460      	add	r0, ip
  400a2c:	f1b6 3fff 	cmp.w	r6, #4294967295
  400a30:	d1ef      	bne.n	400a12 <board_init+0x5e>
  400a32:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400a36:	4b3e      	ldr	r3, [pc, #248]	; (400b30 <board_init+0x17c>)
  400a38:	695a      	ldr	r2, [r3, #20]
  400a3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400a3e:	615a      	str	r2, [r3, #20]
  400a40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a44:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a48:	4a3a      	ldr	r2, [pc, #232]	; (400b34 <board_init+0x180>)
  400a4a:	493b      	ldr	r1, [pc, #236]	; (400b38 <board_init+0x184>)
  400a4c:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400a4e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400a52:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400a54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a58:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400a5c:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400a60:	f022 0201 	bic.w	r2, r2, #1
  400a64:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400a68:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400a6c:	f022 0201 	bic.w	r2, r2, #1
  400a70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400a74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400a78:	f3bf 8f6f 	isb	sy
  400a7c:	200a      	movs	r0, #10
  400a7e:	4c2f      	ldr	r4, [pc, #188]	; (400b3c <board_init+0x188>)
  400a80:	47a0      	blx	r4
  400a82:	200b      	movs	r0, #11
  400a84:	47a0      	blx	r4
  400a86:	200c      	movs	r0, #12
  400a88:	47a0      	blx	r4
  400a8a:	2010      	movs	r0, #16
  400a8c:	47a0      	blx	r4
  400a8e:	2011      	movs	r0, #17
  400a90:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400a92:	4b2b      	ldr	r3, [pc, #172]	; (400b40 <board_init+0x18c>)
  400a94:	f44f 7280 	mov.w	r2, #256	; 0x100
  400a98:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400a9a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a9e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400aa0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400aa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400aa8:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400aaa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400aae:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ab4:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400ab6:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400abc:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400abe:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400ac2:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ac4:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400ac6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400aca:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400acc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400ad0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400ad4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400ad8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400adc:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ae2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ae4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400aea:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400aec:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400af0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400af2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400af4:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400af8:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400afa:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400afc:	4a11      	ldr	r2, [pc, #68]	; (400b44 <board_init+0x190>)
  400afe:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400b02:	f043 0310 	orr.w	r3, r3, #16
  400b06:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400b0a:	4b0f      	ldr	r3, [pc, #60]	; (400b48 <board_init+0x194>)
  400b0c:	2210      	movs	r2, #16
  400b0e:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400b10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400b14:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400b16:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400b18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400b1c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400b1e:	4311      	orrs	r1, r2
  400b20:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400b22:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400b24:	4311      	orrs	r1, r2
  400b26:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400b28:	605a      	str	r2, [r3, #4]
  400b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b2c:	400e1850 	.word	0x400e1850
  400b30:	e000ed00 	.word	0xe000ed00
  400b34:	400e0c00 	.word	0x400e0c00
  400b38:	5a00080c 	.word	0x5a00080c
  400b3c:	00400f8d 	.word	0x00400f8d
  400b40:	400e1200 	.word	0x400e1200
  400b44:	40088000 	.word	0x40088000
  400b48:	400e1000 	.word	0x400e1000

00400b4c <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400b4c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400b50:	0053      	lsls	r3, r2, #1
  400b52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b56:	fbb2 f2f3 	udiv	r2, r2, r3
  400b5a:	3a01      	subs	r2, #1
  400b5c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400b60:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400b64:	4770      	bx	lr

00400b66 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400b66:	6301      	str	r1, [r0, #48]	; 0x30
  400b68:	4770      	bx	lr

00400b6a <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400b6a:	6341      	str	r1, [r0, #52]	; 0x34
  400b6c:	4770      	bx	lr

00400b6e <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  400b6e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400b72:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400b76:	d105      	bne.n	400b84 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400b78:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  400b7a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  400b7c:	bf14      	ite	ne
  400b7e:	2001      	movne	r0, #1
  400b80:	2000      	moveq	r0, #0
  400b82:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400b84:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400b86:	e7f8      	b.n	400b7a <pio_get+0xc>

00400b88 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400b88:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400b8a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400b8e:	d03a      	beq.n	400c06 <pio_set_peripheral+0x7e>
  400b90:	d813      	bhi.n	400bba <pio_set_peripheral+0x32>
  400b92:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400b96:	d025      	beq.n	400be4 <pio_set_peripheral+0x5c>
  400b98:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400b9c:	d10a      	bne.n	400bb4 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400b9e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400ba0:	4313      	orrs	r3, r2
  400ba2:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400ba4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400ba6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400ba8:	400b      	ands	r3, r1
  400baa:	ea23 0302 	bic.w	r3, r3, r2
  400bae:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400bb0:	6042      	str	r2, [r0, #4]
  400bb2:	4770      	bx	lr
	switch (ul_type) {
  400bb4:	2900      	cmp	r1, #0
  400bb6:	d1fb      	bne.n	400bb0 <pio_set_peripheral+0x28>
  400bb8:	4770      	bx	lr
  400bba:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400bbe:	d021      	beq.n	400c04 <pio_set_peripheral+0x7c>
  400bc0:	d809      	bhi.n	400bd6 <pio_set_peripheral+0x4e>
  400bc2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400bc6:	d1f3      	bne.n	400bb0 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400bc8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400bca:	4313      	orrs	r3, r2
  400bcc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400bce:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400bd0:	4313      	orrs	r3, r2
  400bd2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400bd4:	e7ec      	b.n	400bb0 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400bd6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400bda:	d013      	beq.n	400c04 <pio_set_peripheral+0x7c>
  400bdc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400be0:	d010      	beq.n	400c04 <pio_set_peripheral+0x7c>
  400be2:	e7e5      	b.n	400bb0 <pio_set_peripheral+0x28>
{
  400be4:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400be6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400be8:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400bea:	43d3      	mvns	r3, r2
  400bec:	4021      	ands	r1, r4
  400bee:	461c      	mov	r4, r3
  400bf0:	4019      	ands	r1, r3
  400bf2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400bf4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400bf6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400bf8:	400b      	ands	r3, r1
  400bfa:	4023      	ands	r3, r4
  400bfc:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400bfe:	6042      	str	r2, [r0, #4]
}
  400c00:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c04:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400c06:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400c08:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400c0a:	400b      	ands	r3, r1
  400c0c:	ea23 0302 	bic.w	r3, r3, r2
  400c10:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400c12:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400c14:	4313      	orrs	r3, r2
  400c16:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400c18:	e7ca      	b.n	400bb0 <pio_set_peripheral+0x28>

00400c1a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400c1a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c1c:	f012 0f01 	tst.w	r2, #1
  400c20:	d10d      	bne.n	400c3e <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400c22:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400c24:	f012 0f0a 	tst.w	r2, #10
  400c28:	d00b      	beq.n	400c42 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400c2a:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400c2c:	f012 0f02 	tst.w	r2, #2
  400c30:	d109      	bne.n	400c46 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400c32:	f012 0f08 	tst.w	r2, #8
  400c36:	d008      	beq.n	400c4a <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400c38:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400c3c:	e005      	b.n	400c4a <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400c3e:	6641      	str	r1, [r0, #100]	; 0x64
  400c40:	e7f0      	b.n	400c24 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400c42:	6241      	str	r1, [r0, #36]	; 0x24
  400c44:	e7f2      	b.n	400c2c <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400c46:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400c4a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400c4c:	6001      	str	r1, [r0, #0]
  400c4e:	4770      	bx	lr

00400c50 <pio_set_output>:
{
  400c50:	b410      	push	{r4}
  400c52:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400c54:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400c56:	b94c      	cbnz	r4, 400c6c <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400c58:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400c5a:	b14b      	cbz	r3, 400c70 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400c5c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400c5e:	b94a      	cbnz	r2, 400c74 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400c60:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400c62:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400c64:	6001      	str	r1, [r0, #0]
}
  400c66:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c6a:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400c6c:	6641      	str	r1, [r0, #100]	; 0x64
  400c6e:	e7f4      	b.n	400c5a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400c70:	6541      	str	r1, [r0, #84]	; 0x54
  400c72:	e7f4      	b.n	400c5e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400c74:	6301      	str	r1, [r0, #48]	; 0x30
  400c76:	e7f4      	b.n	400c62 <pio_set_output+0x12>

00400c78 <pio_configure>:
{
  400c78:	b570      	push	{r4, r5, r6, lr}
  400c7a:	b082      	sub	sp, #8
  400c7c:	4605      	mov	r5, r0
  400c7e:	4616      	mov	r6, r2
  400c80:	461c      	mov	r4, r3
	switch (ul_type) {
  400c82:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400c86:	d014      	beq.n	400cb2 <pio_configure+0x3a>
  400c88:	d90a      	bls.n	400ca0 <pio_configure+0x28>
  400c8a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400c8e:	d024      	beq.n	400cda <pio_configure+0x62>
  400c90:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400c94:	d021      	beq.n	400cda <pio_configure+0x62>
  400c96:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400c9a:	d017      	beq.n	400ccc <pio_configure+0x54>
		return 0;
  400c9c:	2000      	movs	r0, #0
  400c9e:	e01a      	b.n	400cd6 <pio_configure+0x5e>
	switch (ul_type) {
  400ca0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400ca4:	d005      	beq.n	400cb2 <pio_configure+0x3a>
  400ca6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400caa:	d002      	beq.n	400cb2 <pio_configure+0x3a>
  400cac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400cb0:	d1f4      	bne.n	400c9c <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400cb2:	4632      	mov	r2, r6
  400cb4:	4628      	mov	r0, r5
  400cb6:	4b11      	ldr	r3, [pc, #68]	; (400cfc <pio_configure+0x84>)
  400cb8:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400cba:	f014 0f01 	tst.w	r4, #1
  400cbe:	d102      	bne.n	400cc6 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400cc0:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400cc2:	2001      	movs	r0, #1
  400cc4:	e007      	b.n	400cd6 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400cc6:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400cc8:	2001      	movs	r0, #1
  400cca:	e004      	b.n	400cd6 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400ccc:	461a      	mov	r2, r3
  400cce:	4631      	mov	r1, r6
  400cd0:	4b0b      	ldr	r3, [pc, #44]	; (400d00 <pio_configure+0x88>)
  400cd2:	4798      	blx	r3
	return 1;
  400cd4:	2001      	movs	r0, #1
}
  400cd6:	b002      	add	sp, #8
  400cd8:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400cda:	f004 0301 	and.w	r3, r4, #1
  400cde:	9300      	str	r3, [sp, #0]
  400ce0:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400ce4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ce8:	bf14      	ite	ne
  400cea:	2200      	movne	r2, #0
  400cec:	2201      	moveq	r2, #1
  400cee:	4631      	mov	r1, r6
  400cf0:	4628      	mov	r0, r5
  400cf2:	4c04      	ldr	r4, [pc, #16]	; (400d04 <pio_configure+0x8c>)
  400cf4:	47a0      	blx	r4
	return 1;
  400cf6:	2001      	movs	r0, #1
		break;
  400cf8:	e7ed      	b.n	400cd6 <pio_configure+0x5e>
  400cfa:	bf00      	nop
  400cfc:	00400b89 	.word	0x00400b89
  400d00:	00400c1b 	.word	0x00400c1b
  400d04:	00400c51 	.word	0x00400c51

00400d08 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  400d08:	f012 0f10 	tst.w	r2, #16
  400d0c:	d012      	beq.n	400d34 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400d0e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400d12:	f012 0f20 	tst.w	r2, #32
  400d16:	d007      	beq.n	400d28 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  400d18:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400d1c:	f012 0f40 	tst.w	r2, #64	; 0x40
  400d20:	d005      	beq.n	400d2e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400d22:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  400d26:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  400d28:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400d2c:	e7f6      	b.n	400d1c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400d2e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400d32:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400d34:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  400d38:	4770      	bx	lr

00400d3a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  400d3a:	6401      	str	r1, [r0, #64]	; 0x40
  400d3c:	4770      	bx	lr

00400d3e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400d3e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400d40:	4770      	bx	lr

00400d42 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400d42:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400d44:	4770      	bx	lr
	...

00400d48 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d4c:	4604      	mov	r4, r0
  400d4e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400d50:	4b0e      	ldr	r3, [pc, #56]	; (400d8c <pio_handler_process+0x44>)
  400d52:	4798      	blx	r3
  400d54:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400d56:	4620      	mov	r0, r4
  400d58:	4b0d      	ldr	r3, [pc, #52]	; (400d90 <pio_handler_process+0x48>)
  400d5a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400d5c:	4005      	ands	r5, r0
  400d5e:	d013      	beq.n	400d88 <pio_handler_process+0x40>
  400d60:	4c0c      	ldr	r4, [pc, #48]	; (400d94 <pio_handler_process+0x4c>)
  400d62:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400d66:	e003      	b.n	400d70 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400d68:	42b4      	cmp	r4, r6
  400d6a:	d00d      	beq.n	400d88 <pio_handler_process+0x40>
  400d6c:	3410      	adds	r4, #16
		while (status != 0) {
  400d6e:	b15d      	cbz	r5, 400d88 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400d70:	6820      	ldr	r0, [r4, #0]
  400d72:	4540      	cmp	r0, r8
  400d74:	d1f8      	bne.n	400d68 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400d76:	6861      	ldr	r1, [r4, #4]
  400d78:	4229      	tst	r1, r5
  400d7a:	d0f5      	beq.n	400d68 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400d7c:	68e3      	ldr	r3, [r4, #12]
  400d7e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400d80:	6863      	ldr	r3, [r4, #4]
  400d82:	ea25 0503 	bic.w	r5, r5, r3
  400d86:	e7ef      	b.n	400d68 <pio_handler_process+0x20>
  400d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400d8c:	00400d3f 	.word	0x00400d3f
  400d90:	00400d43 	.word	0x00400d43
  400d94:	20400bf4 	.word	0x20400bf4

00400d98 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400d9a:	4c18      	ldr	r4, [pc, #96]	; (400dfc <pio_handler_set+0x64>)
  400d9c:	6826      	ldr	r6, [r4, #0]
  400d9e:	2e06      	cmp	r6, #6
  400da0:	d82a      	bhi.n	400df8 <pio_handler_set+0x60>
  400da2:	f04f 0c00 	mov.w	ip, #0
  400da6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400da8:	4f15      	ldr	r7, [pc, #84]	; (400e00 <pio_handler_set+0x68>)
  400daa:	e004      	b.n	400db6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400dac:	3401      	adds	r4, #1
  400dae:	b2e4      	uxtb	r4, r4
  400db0:	46a4      	mov	ip, r4
  400db2:	42a6      	cmp	r6, r4
  400db4:	d309      	bcc.n	400dca <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400db6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400db8:	0125      	lsls	r5, r4, #4
  400dba:	597d      	ldr	r5, [r7, r5]
  400dbc:	428d      	cmp	r5, r1
  400dbe:	d1f5      	bne.n	400dac <pio_handler_set+0x14>
  400dc0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400dc4:	686d      	ldr	r5, [r5, #4]
  400dc6:	4295      	cmp	r5, r2
  400dc8:	d1f0      	bne.n	400dac <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400dca:	4d0d      	ldr	r5, [pc, #52]	; (400e00 <pio_handler_set+0x68>)
  400dcc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400dd0:	eb05 040e 	add.w	r4, r5, lr
  400dd4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400dd8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400dda:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400ddc:	9906      	ldr	r1, [sp, #24]
  400dde:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400de0:	3601      	adds	r6, #1
  400de2:	4566      	cmp	r6, ip
  400de4:	d005      	beq.n	400df2 <pio_handler_set+0x5a>
  400de6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400de8:	461a      	mov	r2, r3
  400dea:	4b06      	ldr	r3, [pc, #24]	; (400e04 <pio_handler_set+0x6c>)
  400dec:	4798      	blx	r3

	return 0;
  400dee:	2000      	movs	r0, #0
  400df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400df2:	4902      	ldr	r1, [pc, #8]	; (400dfc <pio_handler_set+0x64>)
  400df4:	600e      	str	r6, [r1, #0]
  400df6:	e7f6      	b.n	400de6 <pio_handler_set+0x4e>
		return 1;
  400df8:	2001      	movs	r0, #1
}
  400dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400dfc:	20400c64 	.word	0x20400c64
  400e00:	20400bf4 	.word	0x20400bf4
  400e04:	00400d09 	.word	0x00400d09

00400e08 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e08:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e0a:	210a      	movs	r1, #10
  400e0c:	4801      	ldr	r0, [pc, #4]	; (400e14 <PIOA_Handler+0xc>)
  400e0e:	4b02      	ldr	r3, [pc, #8]	; (400e18 <PIOA_Handler+0x10>)
  400e10:	4798      	blx	r3
  400e12:	bd08      	pop	{r3, pc}
  400e14:	400e0e00 	.word	0x400e0e00
  400e18:	00400d49 	.word	0x00400d49

00400e1c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e1c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e1e:	210b      	movs	r1, #11
  400e20:	4801      	ldr	r0, [pc, #4]	; (400e28 <PIOB_Handler+0xc>)
  400e22:	4b02      	ldr	r3, [pc, #8]	; (400e2c <PIOB_Handler+0x10>)
  400e24:	4798      	blx	r3
  400e26:	bd08      	pop	{r3, pc}
  400e28:	400e1000 	.word	0x400e1000
  400e2c:	00400d49 	.word	0x00400d49

00400e30 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400e30:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400e32:	210c      	movs	r1, #12
  400e34:	4801      	ldr	r0, [pc, #4]	; (400e3c <PIOC_Handler+0xc>)
  400e36:	4b02      	ldr	r3, [pc, #8]	; (400e40 <PIOC_Handler+0x10>)
  400e38:	4798      	blx	r3
  400e3a:	bd08      	pop	{r3, pc}
  400e3c:	400e1200 	.word	0x400e1200
  400e40:	00400d49 	.word	0x00400d49

00400e44 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400e44:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400e46:	2110      	movs	r1, #16
  400e48:	4801      	ldr	r0, [pc, #4]	; (400e50 <PIOD_Handler+0xc>)
  400e4a:	4b02      	ldr	r3, [pc, #8]	; (400e54 <PIOD_Handler+0x10>)
  400e4c:	4798      	blx	r3
  400e4e:	bd08      	pop	{r3, pc}
  400e50:	400e1400 	.word	0x400e1400
  400e54:	00400d49 	.word	0x00400d49

00400e58 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400e58:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400e5a:	2111      	movs	r1, #17
  400e5c:	4801      	ldr	r0, [pc, #4]	; (400e64 <PIOE_Handler+0xc>)
  400e5e:	4b02      	ldr	r3, [pc, #8]	; (400e68 <PIOE_Handler+0x10>)
  400e60:	4798      	blx	r3
  400e62:	bd08      	pop	{r3, pc}
  400e64:	400e1600 	.word	0x400e1600
  400e68:	00400d49 	.word	0x00400d49

00400e6c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400e6c:	2803      	cmp	r0, #3
  400e6e:	d011      	beq.n	400e94 <pmc_mck_set_division+0x28>
  400e70:	2804      	cmp	r0, #4
  400e72:	d012      	beq.n	400e9a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400e74:	2802      	cmp	r0, #2
  400e76:	bf0c      	ite	eq
  400e78:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400e7c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400e7e:	4a08      	ldr	r2, [pc, #32]	; (400ea0 <pmc_mck_set_division+0x34>)
  400e80:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400e86:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400e88:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400e8a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400e8c:	f013 0f08 	tst.w	r3, #8
  400e90:	d0fb      	beq.n	400e8a <pmc_mck_set_division+0x1e>
}
  400e92:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400e94:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400e98:	e7f1      	b.n	400e7e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400e9e:	e7ee      	b.n	400e7e <pmc_mck_set_division+0x12>
  400ea0:	400e0600 	.word	0x400e0600

00400ea4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ea4:	4a17      	ldr	r2, [pc, #92]	; (400f04 <pmc_switch_mck_to_pllack+0x60>)
  400ea6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400eac:	4318      	orrs	r0, r3
  400eae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400eb0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400eb2:	f013 0f08 	tst.w	r3, #8
  400eb6:	d10a      	bne.n	400ece <pmc_switch_mck_to_pllack+0x2a>
  400eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ebc:	4911      	ldr	r1, [pc, #68]	; (400f04 <pmc_switch_mck_to_pllack+0x60>)
  400ebe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400ec0:	f012 0f08 	tst.w	r2, #8
  400ec4:	d103      	bne.n	400ece <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ec6:	3b01      	subs	r3, #1
  400ec8:	d1f9      	bne.n	400ebe <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400eca:	2001      	movs	r0, #1
  400ecc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400ece:	4a0d      	ldr	r2, [pc, #52]	; (400f04 <pmc_switch_mck_to_pllack+0x60>)
  400ed0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ed2:	f023 0303 	bic.w	r3, r3, #3
  400ed6:	f043 0302 	orr.w	r3, r3, #2
  400eda:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400edc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ede:	f013 0f08 	tst.w	r3, #8
  400ee2:	d10a      	bne.n	400efa <pmc_switch_mck_to_pllack+0x56>
  400ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400ee8:	4906      	ldr	r1, [pc, #24]	; (400f04 <pmc_switch_mck_to_pllack+0x60>)
  400eea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400eec:	f012 0f08 	tst.w	r2, #8
  400ef0:	d105      	bne.n	400efe <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400ef2:	3b01      	subs	r3, #1
  400ef4:	d1f9      	bne.n	400eea <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400ef6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400ef8:	4770      	bx	lr
	return 0;
  400efa:	2000      	movs	r0, #0
  400efc:	4770      	bx	lr
  400efe:	2000      	movs	r0, #0
  400f00:	4770      	bx	lr
  400f02:	bf00      	nop
  400f04:	400e0600 	.word	0x400e0600

00400f08 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f08:	b9a0      	cbnz	r0, 400f34 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f0a:	480e      	ldr	r0, [pc, #56]	; (400f44 <pmc_switch_mainck_to_xtal+0x3c>)
  400f0c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f0e:	0209      	lsls	r1, r1, #8
  400f10:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f12:	4a0d      	ldr	r2, [pc, #52]	; (400f48 <pmc_switch_mainck_to_xtal+0x40>)
  400f14:	401a      	ands	r2, r3
  400f16:	4b0d      	ldr	r3, [pc, #52]	; (400f4c <pmc_switch_mainck_to_xtal+0x44>)
  400f18:	4313      	orrs	r3, r2
  400f1a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f1c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f1e:	4602      	mov	r2, r0
  400f20:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f22:	f013 0f01 	tst.w	r3, #1
  400f26:	d0fb      	beq.n	400f20 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400f28:	4a06      	ldr	r2, [pc, #24]	; (400f44 <pmc_switch_mainck_to_xtal+0x3c>)
  400f2a:	6a11      	ldr	r1, [r2, #32]
  400f2c:	4b08      	ldr	r3, [pc, #32]	; (400f50 <pmc_switch_mainck_to_xtal+0x48>)
  400f2e:	430b      	orrs	r3, r1
  400f30:	6213      	str	r3, [r2, #32]
  400f32:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f34:	4903      	ldr	r1, [pc, #12]	; (400f44 <pmc_switch_mainck_to_xtal+0x3c>)
  400f36:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400f38:	4a06      	ldr	r2, [pc, #24]	; (400f54 <pmc_switch_mainck_to_xtal+0x4c>)
  400f3a:	401a      	ands	r2, r3
  400f3c:	4b06      	ldr	r3, [pc, #24]	; (400f58 <pmc_switch_mainck_to_xtal+0x50>)
  400f3e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f40:	620b      	str	r3, [r1, #32]
  400f42:	4770      	bx	lr
  400f44:	400e0600 	.word	0x400e0600
  400f48:	ffc8fffc 	.word	0xffc8fffc
  400f4c:	00370001 	.word	0x00370001
  400f50:	01370000 	.word	0x01370000
  400f54:	fec8fffc 	.word	0xfec8fffc
  400f58:	01370002 	.word	0x01370002

00400f5c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400f5c:	4b02      	ldr	r3, [pc, #8]	; (400f68 <pmc_osc_is_ready_mainck+0xc>)
  400f5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400f60:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400f64:	4770      	bx	lr
  400f66:	bf00      	nop
  400f68:	400e0600 	.word	0x400e0600

00400f6c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400f6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400f70:	4b01      	ldr	r3, [pc, #4]	; (400f78 <pmc_disable_pllack+0xc>)
  400f72:	629a      	str	r2, [r3, #40]	; 0x28
  400f74:	4770      	bx	lr
  400f76:	bf00      	nop
  400f78:	400e0600 	.word	0x400e0600

00400f7c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400f7c:	4b02      	ldr	r3, [pc, #8]	; (400f88 <pmc_is_locked_pllack+0xc>)
  400f7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400f80:	f000 0002 	and.w	r0, r0, #2
  400f84:	4770      	bx	lr
  400f86:	bf00      	nop
  400f88:	400e0600 	.word	0x400e0600

00400f8c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400f8c:	283f      	cmp	r0, #63	; 0x3f
  400f8e:	d81e      	bhi.n	400fce <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400f90:	281f      	cmp	r0, #31
  400f92:	d80c      	bhi.n	400fae <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400f94:	4b11      	ldr	r3, [pc, #68]	; (400fdc <pmc_enable_periph_clk+0x50>)
  400f96:	699a      	ldr	r2, [r3, #24]
  400f98:	2301      	movs	r3, #1
  400f9a:	4083      	lsls	r3, r0
  400f9c:	4393      	bics	r3, r2
  400f9e:	d018      	beq.n	400fd2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400fa0:	2301      	movs	r3, #1
  400fa2:	fa03 f000 	lsl.w	r0, r3, r0
  400fa6:	4b0d      	ldr	r3, [pc, #52]	; (400fdc <pmc_enable_periph_clk+0x50>)
  400fa8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400faa:	2000      	movs	r0, #0
  400fac:	4770      	bx	lr
		ul_id -= 32;
  400fae:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400fb0:	4b0a      	ldr	r3, [pc, #40]	; (400fdc <pmc_enable_periph_clk+0x50>)
  400fb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400fb6:	2301      	movs	r3, #1
  400fb8:	4083      	lsls	r3, r0
  400fba:	4393      	bics	r3, r2
  400fbc:	d00b      	beq.n	400fd6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400fbe:	2301      	movs	r3, #1
  400fc0:	fa03 f000 	lsl.w	r0, r3, r0
  400fc4:	4b05      	ldr	r3, [pc, #20]	; (400fdc <pmc_enable_periph_clk+0x50>)
  400fc6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400fca:	2000      	movs	r0, #0
  400fcc:	4770      	bx	lr
		return 1;
  400fce:	2001      	movs	r0, #1
  400fd0:	4770      	bx	lr
	return 0;
  400fd2:	2000      	movs	r0, #0
  400fd4:	4770      	bx	lr
  400fd6:	2000      	movs	r0, #0
}
  400fd8:	4770      	bx	lr
  400fda:	bf00      	nop
  400fdc:	400e0600 	.word	0x400e0600

00400fe0 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400fe0:	6943      	ldr	r3, [r0, #20]
  400fe2:	f013 0f02 	tst.w	r3, #2
  400fe6:	d002      	beq.n	400fee <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400fe8:	61c1      	str	r1, [r0, #28]
	return 0;
  400fea:	2000      	movs	r0, #0
  400fec:	4770      	bx	lr
		return 1;
  400fee:	2001      	movs	r0, #1
}
  400ff0:	4770      	bx	lr

00400ff2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400ff2:	6943      	ldr	r3, [r0, #20]
  400ff4:	f013 0f01 	tst.w	r3, #1
  400ff8:	d003      	beq.n	401002 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400ffa:	6983      	ldr	r3, [r0, #24]
  400ffc:	700b      	strb	r3, [r1, #0]
	return 0;
  400ffe:	2000      	movs	r0, #0
  401000:	4770      	bx	lr
		return 1;
  401002:	2001      	movs	r0, #1
}
  401004:	4770      	bx	lr

00401006 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401006:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401008:	010b      	lsls	r3, r1, #4
  40100a:	4293      	cmp	r3, r2
  40100c:	d914      	bls.n	401038 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40100e:	00c9      	lsls	r1, r1, #3
  401010:	084b      	lsrs	r3, r1, #1
  401012:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401016:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40101a:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40101c:	1e5c      	subs	r4, r3, #1
  40101e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401022:	428c      	cmp	r4, r1
  401024:	d901      	bls.n	40102a <usart_set_async_baudrate+0x24>
		return 1;
  401026:	2001      	movs	r0, #1
  401028:	e017      	b.n	40105a <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  40102a:	6841      	ldr	r1, [r0, #4]
  40102c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401030:	6041      	str	r1, [r0, #4]
  401032:	e00c      	b.n	40104e <usart_set_async_baudrate+0x48>
		return 1;
  401034:	2001      	movs	r0, #1
  401036:	e010      	b.n	40105a <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401038:	0859      	lsrs	r1, r3, #1
  40103a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  40103e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401042:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401044:	1e5c      	subs	r4, r3, #1
  401046:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40104a:	428c      	cmp	r4, r1
  40104c:	d8f2      	bhi.n	401034 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  40104e:	0412      	lsls	r2, r2, #16
  401050:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401054:	431a      	orrs	r2, r3
  401056:	6202      	str	r2, [r0, #32]

	return 0;
  401058:	2000      	movs	r0, #0
}
  40105a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40105e:	4770      	bx	lr

00401060 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401060:	4b08      	ldr	r3, [pc, #32]	; (401084 <usart_reset+0x24>)
  401062:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401066:	2300      	movs	r3, #0
  401068:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40106a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  40106c:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40106e:	2388      	movs	r3, #136	; 0x88
  401070:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401072:	2324      	movs	r3, #36	; 0x24
  401074:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401076:	f44f 7380 	mov.w	r3, #256	; 0x100
  40107a:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  40107c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401080:	6003      	str	r3, [r0, #0]
  401082:	4770      	bx	lr
  401084:	55534100 	.word	0x55534100

00401088 <usart_init_rs232>:
{
  401088:	b570      	push	{r4, r5, r6, lr}
  40108a:	4605      	mov	r5, r0
  40108c:	460c      	mov	r4, r1
  40108e:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401090:	4b0f      	ldr	r3, [pc, #60]	; (4010d0 <usart_init_rs232+0x48>)
  401092:	4798      	blx	r3
	ul_reg_val = 0;
  401094:	2200      	movs	r2, #0
  401096:	4b0f      	ldr	r3, [pc, #60]	; (4010d4 <usart_init_rs232+0x4c>)
  401098:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  40109a:	b1a4      	cbz	r4, 4010c6 <usart_init_rs232+0x3e>
  40109c:	4632      	mov	r2, r6
  40109e:	6821      	ldr	r1, [r4, #0]
  4010a0:	4628      	mov	r0, r5
  4010a2:	4b0d      	ldr	r3, [pc, #52]	; (4010d8 <usart_init_rs232+0x50>)
  4010a4:	4798      	blx	r3
  4010a6:	4602      	mov	r2, r0
  4010a8:	b978      	cbnz	r0, 4010ca <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4010aa:	6863      	ldr	r3, [r4, #4]
  4010ac:	68a1      	ldr	r1, [r4, #8]
  4010ae:	430b      	orrs	r3, r1
  4010b0:	6921      	ldr	r1, [r4, #16]
  4010b2:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4010b4:	68e1      	ldr	r1, [r4, #12]
  4010b6:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4010b8:	4906      	ldr	r1, [pc, #24]	; (4010d4 <usart_init_rs232+0x4c>)
  4010ba:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4010bc:	6869      	ldr	r1, [r5, #4]
  4010be:	430b      	orrs	r3, r1
  4010c0:	606b      	str	r3, [r5, #4]
}
  4010c2:	4610      	mov	r0, r2
  4010c4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4010c6:	2201      	movs	r2, #1
  4010c8:	e7fb      	b.n	4010c2 <usart_init_rs232+0x3a>
  4010ca:	2201      	movs	r2, #1
  4010cc:	e7f9      	b.n	4010c2 <usart_init_rs232+0x3a>
  4010ce:	bf00      	nop
  4010d0:	00401061 	.word	0x00401061
  4010d4:	20400c68 	.word	0x20400c68
  4010d8:	00401007 	.word	0x00401007

004010dc <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4010dc:	2340      	movs	r3, #64	; 0x40
  4010de:	6003      	str	r3, [r0, #0]
  4010e0:	4770      	bx	lr

004010e2 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4010e2:	2310      	movs	r3, #16
  4010e4:	6003      	str	r3, [r0, #0]
  4010e6:	4770      	bx	lr

004010e8 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  4010e8:	6943      	ldr	r3, [r0, #20]
  4010ea:	f013 0f02 	tst.w	r3, #2
  4010ee:	d004      	beq.n	4010fa <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  4010f0:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4010f4:	61c1      	str	r1, [r0, #28]
	return 0;
  4010f6:	2000      	movs	r0, #0
  4010f8:	4770      	bx	lr
		return 1;
  4010fa:	2001      	movs	r0, #1
}
  4010fc:	4770      	bx	lr

004010fe <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4010fe:	6943      	ldr	r3, [r0, #20]
  401100:	f013 0f01 	tst.w	r3, #1
  401104:	d005      	beq.n	401112 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401106:	6983      	ldr	r3, [r0, #24]
  401108:	f3c3 0308 	ubfx	r3, r3, #0, #9
  40110c:	600b      	str	r3, [r1, #0]
	return 0;
  40110e:	2000      	movs	r0, #0
  401110:	4770      	bx	lr
		return 1;
  401112:	2001      	movs	r0, #1
}
  401114:	4770      	bx	lr

00401116 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401116:	e7fe      	b.n	401116 <Dummy_Handler>

00401118 <Reset_Handler>:
{
  401118:	b500      	push	{lr}
  40111a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  40111c:	4b25      	ldr	r3, [pc, #148]	; (4011b4 <Reset_Handler+0x9c>)
  40111e:	4a26      	ldr	r2, [pc, #152]	; (4011b8 <Reset_Handler+0xa0>)
  401120:	429a      	cmp	r2, r3
  401122:	d010      	beq.n	401146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401124:	4b25      	ldr	r3, [pc, #148]	; (4011bc <Reset_Handler+0xa4>)
  401126:	4a23      	ldr	r2, [pc, #140]	; (4011b4 <Reset_Handler+0x9c>)
  401128:	429a      	cmp	r2, r3
  40112a:	d20c      	bcs.n	401146 <Reset_Handler+0x2e>
  40112c:	3b01      	subs	r3, #1
  40112e:	1a9b      	subs	r3, r3, r2
  401130:	f023 0303 	bic.w	r3, r3, #3
  401134:	3304      	adds	r3, #4
  401136:	4413      	add	r3, r2
  401138:	491f      	ldr	r1, [pc, #124]	; (4011b8 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  40113a:	f851 0b04 	ldr.w	r0, [r1], #4
  40113e:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401142:	429a      	cmp	r2, r3
  401144:	d1f9      	bne.n	40113a <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401146:	4b1e      	ldr	r3, [pc, #120]	; (4011c0 <Reset_Handler+0xa8>)
  401148:	4a1e      	ldr	r2, [pc, #120]	; (4011c4 <Reset_Handler+0xac>)
  40114a:	429a      	cmp	r2, r3
  40114c:	d20a      	bcs.n	401164 <Reset_Handler+0x4c>
  40114e:	3b01      	subs	r3, #1
  401150:	1a9b      	subs	r3, r3, r2
  401152:	f023 0303 	bic.w	r3, r3, #3
  401156:	3304      	adds	r3, #4
  401158:	4413      	add	r3, r2
                *pDest++ = 0;
  40115a:	2100      	movs	r1, #0
  40115c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401160:	4293      	cmp	r3, r2
  401162:	d1fb      	bne.n	40115c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401164:	4a18      	ldr	r2, [pc, #96]	; (4011c8 <Reset_Handler+0xb0>)
  401166:	4b19      	ldr	r3, [pc, #100]	; (4011cc <Reset_Handler+0xb4>)
  401168:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40116c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40116e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401172:	fab3 f383 	clz	r3, r3
  401176:	095b      	lsrs	r3, r3, #5
  401178:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40117a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40117c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401180:	2200      	movs	r2, #0
  401182:	4b13      	ldr	r3, [pc, #76]	; (4011d0 <Reset_Handler+0xb8>)
  401184:	701a      	strb	r2, [r3, #0]
	return flags;
  401186:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401188:	4a12      	ldr	r2, [pc, #72]	; (4011d4 <Reset_Handler+0xbc>)
  40118a:	6813      	ldr	r3, [r2, #0]
  40118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401190:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401192:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401196:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40119a:	b129      	cbz	r1, 4011a8 <Reset_Handler+0x90>
		cpu_irq_enable();
  40119c:	2201      	movs	r2, #1
  40119e:	4b0c      	ldr	r3, [pc, #48]	; (4011d0 <Reset_Handler+0xb8>)
  4011a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4011a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4011a6:	b662      	cpsie	i
        __libc_init_array();
  4011a8:	4b0b      	ldr	r3, [pc, #44]	; (4011d8 <Reset_Handler+0xc0>)
  4011aa:	4798      	blx	r3
        main();
  4011ac:	4b0b      	ldr	r3, [pc, #44]	; (4011dc <Reset_Handler+0xc4>)
  4011ae:	4798      	blx	r3
  4011b0:	e7fe      	b.n	4011b0 <Reset_Handler+0x98>
  4011b2:	bf00      	nop
  4011b4:	20400000 	.word	0x20400000
  4011b8:	0040a354 	.word	0x0040a354
  4011bc:	204009d0 	.word	0x204009d0
  4011c0:	20400e68 	.word	0x20400e68
  4011c4:	204009d0 	.word	0x204009d0
  4011c8:	e000ed00 	.word	0xe000ed00
  4011cc:	00400000 	.word	0x00400000
  4011d0:	20400018 	.word	0x20400018
  4011d4:	e000ed88 	.word	0xe000ed88
  4011d8:	0040383d 	.word	0x0040383d
  4011dc:	004036dd 	.word	0x004036dd

004011e0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4011e0:	4b3b      	ldr	r3, [pc, #236]	; (4012d0 <SystemCoreClockUpdate+0xf0>)
  4011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011e4:	f003 0303 	and.w	r3, r3, #3
  4011e8:	2b01      	cmp	r3, #1
  4011ea:	d01d      	beq.n	401228 <SystemCoreClockUpdate+0x48>
  4011ec:	b183      	cbz	r3, 401210 <SystemCoreClockUpdate+0x30>
  4011ee:	2b02      	cmp	r3, #2
  4011f0:	d036      	beq.n	401260 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4011f2:	4b37      	ldr	r3, [pc, #220]	; (4012d0 <SystemCoreClockUpdate+0xf0>)
  4011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4011f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4011fa:	2b70      	cmp	r3, #112	; 0x70
  4011fc:	d05f      	beq.n	4012be <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4011fe:	4b34      	ldr	r3, [pc, #208]	; (4012d0 <SystemCoreClockUpdate+0xf0>)
  401200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401202:	4934      	ldr	r1, [pc, #208]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  401204:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401208:	680b      	ldr	r3, [r1, #0]
  40120a:	40d3      	lsrs	r3, r2
  40120c:	600b      	str	r3, [r1, #0]
  40120e:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401210:	4b31      	ldr	r3, [pc, #196]	; (4012d8 <SystemCoreClockUpdate+0xf8>)
  401212:	695b      	ldr	r3, [r3, #20]
  401214:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401218:	bf14      	ite	ne
  40121a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40121e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401222:	4b2c      	ldr	r3, [pc, #176]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  401224:	601a      	str	r2, [r3, #0]
  401226:	e7e4      	b.n	4011f2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401228:	4b29      	ldr	r3, [pc, #164]	; (4012d0 <SystemCoreClockUpdate+0xf0>)
  40122a:	6a1b      	ldr	r3, [r3, #32]
  40122c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401230:	d003      	beq.n	40123a <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401232:	4a2a      	ldr	r2, [pc, #168]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  401234:	4b27      	ldr	r3, [pc, #156]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  401236:	601a      	str	r2, [r3, #0]
  401238:	e7db      	b.n	4011f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40123a:	4a29      	ldr	r2, [pc, #164]	; (4012e0 <SystemCoreClockUpdate+0x100>)
  40123c:	4b25      	ldr	r3, [pc, #148]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  40123e:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401240:	4b23      	ldr	r3, [pc, #140]	; (4012d0 <SystemCoreClockUpdate+0xf0>)
  401242:	6a1b      	ldr	r3, [r3, #32]
  401244:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401248:	2b10      	cmp	r3, #16
  40124a:	d005      	beq.n	401258 <SystemCoreClockUpdate+0x78>
  40124c:	2b20      	cmp	r3, #32
  40124e:	d1d0      	bne.n	4011f2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401250:	4a22      	ldr	r2, [pc, #136]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  401252:	4b20      	ldr	r3, [pc, #128]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  401254:	601a      	str	r2, [r3, #0]
          break;
  401256:	e7cc      	b.n	4011f2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401258:	4a22      	ldr	r2, [pc, #136]	; (4012e4 <SystemCoreClockUpdate+0x104>)
  40125a:	4b1e      	ldr	r3, [pc, #120]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  40125c:	601a      	str	r2, [r3, #0]
          break;
  40125e:	e7c8      	b.n	4011f2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401260:	4b1b      	ldr	r3, [pc, #108]	; (4012d0 <SystemCoreClockUpdate+0xf0>)
  401262:	6a1b      	ldr	r3, [r3, #32]
  401264:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401268:	d016      	beq.n	401298 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40126a:	4a1c      	ldr	r2, [pc, #112]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  40126c:	4b19      	ldr	r3, [pc, #100]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  40126e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401270:	4b17      	ldr	r3, [pc, #92]	; (4012d0 <SystemCoreClockUpdate+0xf0>)
  401272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401274:	f003 0303 	and.w	r3, r3, #3
  401278:	2b02      	cmp	r3, #2
  40127a:	d1ba      	bne.n	4011f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40127c:	4a14      	ldr	r2, [pc, #80]	; (4012d0 <SystemCoreClockUpdate+0xf0>)
  40127e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401280:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401282:	4814      	ldr	r0, [pc, #80]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401284:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401288:	6803      	ldr	r3, [r0, #0]
  40128a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40128e:	b2d2      	uxtb	r2, r2
  401290:	fbb3 f3f2 	udiv	r3, r3, r2
  401294:	6003      	str	r3, [r0, #0]
  401296:	e7ac      	b.n	4011f2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401298:	4a11      	ldr	r2, [pc, #68]	; (4012e0 <SystemCoreClockUpdate+0x100>)
  40129a:	4b0e      	ldr	r3, [pc, #56]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  40129c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40129e:	4b0c      	ldr	r3, [pc, #48]	; (4012d0 <SystemCoreClockUpdate+0xf0>)
  4012a0:	6a1b      	ldr	r3, [r3, #32]
  4012a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4012a6:	2b10      	cmp	r3, #16
  4012a8:	d005      	beq.n	4012b6 <SystemCoreClockUpdate+0xd6>
  4012aa:	2b20      	cmp	r3, #32
  4012ac:	d1e0      	bne.n	401270 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4012ae:	4a0b      	ldr	r2, [pc, #44]	; (4012dc <SystemCoreClockUpdate+0xfc>)
  4012b0:	4b08      	ldr	r3, [pc, #32]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  4012b2:	601a      	str	r2, [r3, #0]
          break;
  4012b4:	e7dc      	b.n	401270 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4012b6:	4a0b      	ldr	r2, [pc, #44]	; (4012e4 <SystemCoreClockUpdate+0x104>)
  4012b8:	4b06      	ldr	r3, [pc, #24]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  4012ba:	601a      	str	r2, [r3, #0]
          break;
  4012bc:	e7d8      	b.n	401270 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4012be:	4a05      	ldr	r2, [pc, #20]	; (4012d4 <SystemCoreClockUpdate+0xf4>)
  4012c0:	6813      	ldr	r3, [r2, #0]
  4012c2:	4909      	ldr	r1, [pc, #36]	; (4012e8 <SystemCoreClockUpdate+0x108>)
  4012c4:	fba1 1303 	umull	r1, r3, r1, r3
  4012c8:	085b      	lsrs	r3, r3, #1
  4012ca:	6013      	str	r3, [r2, #0]
  4012cc:	4770      	bx	lr
  4012ce:	bf00      	nop
  4012d0:	400e0600 	.word	0x400e0600
  4012d4:	2040001c 	.word	0x2040001c
  4012d8:	400e1810 	.word	0x400e1810
  4012dc:	00b71b00 	.word	0x00b71b00
  4012e0:	003d0900 	.word	0x003d0900
  4012e4:	007a1200 	.word	0x007a1200
  4012e8:	aaaaaaab 	.word	0xaaaaaaab

004012ec <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4012ec:	4b16      	ldr	r3, [pc, #88]	; (401348 <system_init_flash+0x5c>)
  4012ee:	4298      	cmp	r0, r3
  4012f0:	d913      	bls.n	40131a <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4012f2:	4b16      	ldr	r3, [pc, #88]	; (40134c <system_init_flash+0x60>)
  4012f4:	4298      	cmp	r0, r3
  4012f6:	d915      	bls.n	401324 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4012f8:	4b15      	ldr	r3, [pc, #84]	; (401350 <system_init_flash+0x64>)
  4012fa:	4298      	cmp	r0, r3
  4012fc:	d916      	bls.n	40132c <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4012fe:	4b15      	ldr	r3, [pc, #84]	; (401354 <system_init_flash+0x68>)
  401300:	4298      	cmp	r0, r3
  401302:	d917      	bls.n	401334 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401304:	4b14      	ldr	r3, [pc, #80]	; (401358 <system_init_flash+0x6c>)
  401306:	4298      	cmp	r0, r3
  401308:	d918      	bls.n	40133c <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40130a:	4b14      	ldr	r3, [pc, #80]	; (40135c <system_init_flash+0x70>)
  40130c:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40130e:	bf94      	ite	ls
  401310:	4a13      	ldrls	r2, [pc, #76]	; (401360 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401312:	4a14      	ldrhi	r2, [pc, #80]	; (401364 <system_init_flash+0x78>)
  401314:	4b14      	ldr	r3, [pc, #80]	; (401368 <system_init_flash+0x7c>)
  401316:	601a      	str	r2, [r3, #0]
  401318:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40131a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40131e:	4b12      	ldr	r3, [pc, #72]	; (401368 <system_init_flash+0x7c>)
  401320:	601a      	str	r2, [r3, #0]
  401322:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401324:	4a11      	ldr	r2, [pc, #68]	; (40136c <system_init_flash+0x80>)
  401326:	4b10      	ldr	r3, [pc, #64]	; (401368 <system_init_flash+0x7c>)
  401328:	601a      	str	r2, [r3, #0]
  40132a:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40132c:	4a10      	ldr	r2, [pc, #64]	; (401370 <system_init_flash+0x84>)
  40132e:	4b0e      	ldr	r3, [pc, #56]	; (401368 <system_init_flash+0x7c>)
  401330:	601a      	str	r2, [r3, #0]
  401332:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401334:	4a0f      	ldr	r2, [pc, #60]	; (401374 <system_init_flash+0x88>)
  401336:	4b0c      	ldr	r3, [pc, #48]	; (401368 <system_init_flash+0x7c>)
  401338:	601a      	str	r2, [r3, #0]
  40133a:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40133c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401340:	4b09      	ldr	r3, [pc, #36]	; (401368 <system_init_flash+0x7c>)
  401342:	601a      	str	r2, [r3, #0]
  401344:	4770      	bx	lr
  401346:	bf00      	nop
  401348:	015ef3bf 	.word	0x015ef3bf
  40134c:	02bde77f 	.word	0x02bde77f
  401350:	041cdb3f 	.word	0x041cdb3f
  401354:	057bceff 	.word	0x057bceff
  401358:	06dac2bf 	.word	0x06dac2bf
  40135c:	0839b67f 	.word	0x0839b67f
  401360:	04000500 	.word	0x04000500
  401364:	04000600 	.word	0x04000600
  401368:	400e0c00 	.word	0x400e0c00
  40136c:	04000100 	.word	0x04000100
  401370:	04000200 	.word	0x04000200
  401374:	04000300 	.word	0x04000300

00401378 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401378:	4b0a      	ldr	r3, [pc, #40]	; (4013a4 <_sbrk+0x2c>)
  40137a:	681b      	ldr	r3, [r3, #0]
  40137c:	b153      	cbz	r3, 401394 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40137e:	4b09      	ldr	r3, [pc, #36]	; (4013a4 <_sbrk+0x2c>)
  401380:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401382:	181a      	adds	r2, r3, r0
  401384:	4908      	ldr	r1, [pc, #32]	; (4013a8 <_sbrk+0x30>)
  401386:	4291      	cmp	r1, r2
  401388:	db08      	blt.n	40139c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40138a:	4610      	mov	r0, r2
  40138c:	4a05      	ldr	r2, [pc, #20]	; (4013a4 <_sbrk+0x2c>)
  40138e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401390:	4618      	mov	r0, r3
  401392:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401394:	4a05      	ldr	r2, [pc, #20]	; (4013ac <_sbrk+0x34>)
  401396:	4b03      	ldr	r3, [pc, #12]	; (4013a4 <_sbrk+0x2c>)
  401398:	601a      	str	r2, [r3, #0]
  40139a:	e7f0      	b.n	40137e <_sbrk+0x6>
		return (caddr_t) -1;	
  40139c:	f04f 30ff 	mov.w	r0, #4294967295
}
  4013a0:	4770      	bx	lr
  4013a2:	bf00      	nop
  4013a4:	20400c6c 	.word	0x20400c6c
  4013a8:	2045fffc 	.word	0x2045fffc
  4013ac:	20403068 	.word	0x20403068

004013b0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  4013b0:	f04f 30ff 	mov.w	r0, #4294967295
  4013b4:	4770      	bx	lr

004013b6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  4013b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  4013ba:	604b      	str	r3, [r1, #4]

	return 0;
}
  4013bc:	2000      	movs	r0, #0
  4013be:	4770      	bx	lr

004013c0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  4013c0:	2001      	movs	r0, #1
  4013c2:	4770      	bx	lr

004013c4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  4013c4:	2000      	movs	r0, #0
  4013c6:	4770      	bx	lr

004013c8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4013c8:	f100 0308 	add.w	r3, r0, #8
  4013cc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4013ce:	f04f 32ff 	mov.w	r2, #4294967295
  4013d2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4013d4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4013d6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4013d8:	2300      	movs	r3, #0
  4013da:	6003      	str	r3, [r0, #0]
  4013dc:	4770      	bx	lr

004013de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4013de:	2300      	movs	r3, #0
  4013e0:	6103      	str	r3, [r0, #16]
  4013e2:	4770      	bx	lr

004013e4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4013e4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4013e6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4013e8:	689a      	ldr	r2, [r3, #8]
  4013ea:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4013ec:	689a      	ldr	r2, [r3, #8]
  4013ee:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4013f0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4013f2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  4013f4:	6803      	ldr	r3, [r0, #0]
  4013f6:	3301      	adds	r3, #1
  4013f8:	6003      	str	r3, [r0, #0]
  4013fa:	4770      	bx	lr

004013fc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4013fc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  4013fe:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401400:	f1b5 3fff 	cmp.w	r5, #4294967295
  401404:	d002      	beq.n	40140c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401406:	f100 0208 	add.w	r2, r0, #8
  40140a:	e002      	b.n	401412 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  40140c:	6902      	ldr	r2, [r0, #16]
  40140e:	e004      	b.n	40141a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401410:	461a      	mov	r2, r3
  401412:	6853      	ldr	r3, [r2, #4]
  401414:	681c      	ldr	r4, [r3, #0]
  401416:	42a5      	cmp	r5, r4
  401418:	d2fa      	bcs.n	401410 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40141a:	6853      	ldr	r3, [r2, #4]
  40141c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40141e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401420:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401422:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401424:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401426:	6803      	ldr	r3, [r0, #0]
  401428:	3301      	adds	r3, #1
  40142a:	6003      	str	r3, [r0, #0]
}
  40142c:	bc30      	pop	{r4, r5}
  40142e:	4770      	bx	lr

00401430 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401430:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401432:	6842      	ldr	r2, [r0, #4]
  401434:	6881      	ldr	r1, [r0, #8]
  401436:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401438:	6882      	ldr	r2, [r0, #8]
  40143a:	6841      	ldr	r1, [r0, #4]
  40143c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40143e:	685a      	ldr	r2, [r3, #4]
  401440:	4290      	cmp	r0, r2
  401442:	d005      	beq.n	401450 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401444:	2200      	movs	r2, #0
  401446:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401448:	6818      	ldr	r0, [r3, #0]
  40144a:	3801      	subs	r0, #1
  40144c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40144e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401450:	6882      	ldr	r2, [r0, #8]
  401452:	605a      	str	r2, [r3, #4]
  401454:	e7f6      	b.n	401444 <uxListRemove+0x14>
	...

00401458 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401458:	4b0d      	ldr	r3, [pc, #52]	; (401490 <prvTaskExitError+0x38>)
  40145a:	681b      	ldr	r3, [r3, #0]
  40145c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401460:	d00a      	beq.n	401478 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401462:	f04f 0380 	mov.w	r3, #128	; 0x80
  401466:	b672      	cpsid	i
  401468:	f383 8811 	msr	BASEPRI, r3
  40146c:	f3bf 8f6f 	isb	sy
  401470:	f3bf 8f4f 	dsb	sy
  401474:	b662      	cpsie	i
  401476:	e7fe      	b.n	401476 <prvTaskExitError+0x1e>
  401478:	f04f 0380 	mov.w	r3, #128	; 0x80
  40147c:	b672      	cpsid	i
  40147e:	f383 8811 	msr	BASEPRI, r3
  401482:	f3bf 8f6f 	isb	sy
  401486:	f3bf 8f4f 	dsb	sy
  40148a:	b662      	cpsie	i
  40148c:	e7fe      	b.n	40148c <prvTaskExitError+0x34>
  40148e:	bf00      	nop
  401490:	20400020 	.word	0x20400020

00401494 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401494:	4806      	ldr	r0, [pc, #24]	; (4014b0 <prvPortStartFirstTask+0x1c>)
  401496:	6800      	ldr	r0, [r0, #0]
  401498:	6800      	ldr	r0, [r0, #0]
  40149a:	f380 8808 	msr	MSP, r0
  40149e:	b662      	cpsie	i
  4014a0:	b661      	cpsie	f
  4014a2:	f3bf 8f4f 	dsb	sy
  4014a6:	f3bf 8f6f 	isb	sy
  4014aa:	df00      	svc	0
  4014ac:	bf00      	nop
  4014ae:	0000      	.short	0x0000
  4014b0:	e000ed08 	.word	0xe000ed08

004014b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4014b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4014c4 <vPortEnableVFP+0x10>
  4014b8:	6801      	ldr	r1, [r0, #0]
  4014ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4014be:	6001      	str	r1, [r0, #0]
  4014c0:	4770      	bx	lr
  4014c2:	0000      	.short	0x0000
  4014c4:	e000ed88 	.word	0xe000ed88

004014c8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4014c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4014cc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4014d0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4014d4:	4b05      	ldr	r3, [pc, #20]	; (4014ec <pxPortInitialiseStack+0x24>)
  4014d6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4014da:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4014de:	f06f 0302 	mvn.w	r3, #2
  4014e2:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4014e6:	3844      	subs	r0, #68	; 0x44
  4014e8:	4770      	bx	lr
  4014ea:	bf00      	nop
  4014ec:	00401459 	.word	0x00401459

004014f0 <SVC_Handler>:
	__asm volatile (
  4014f0:	4b06      	ldr	r3, [pc, #24]	; (40150c <pxCurrentTCBConst2>)
  4014f2:	6819      	ldr	r1, [r3, #0]
  4014f4:	6808      	ldr	r0, [r1, #0]
  4014f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014fa:	f380 8809 	msr	PSP, r0
  4014fe:	f3bf 8f6f 	isb	sy
  401502:	f04f 0000 	mov.w	r0, #0
  401506:	f380 8811 	msr	BASEPRI, r0
  40150a:	4770      	bx	lr

0040150c <pxCurrentTCBConst2>:
  40150c:	20400c78 	.word	0x20400c78
  401510:	4770      	bx	lr
  401512:	bf00      	nop

00401514 <vPortEnterCritical>:
  401514:	f04f 0380 	mov.w	r3, #128	; 0x80
  401518:	b672      	cpsid	i
  40151a:	f383 8811 	msr	BASEPRI, r3
  40151e:	f3bf 8f6f 	isb	sy
  401522:	f3bf 8f4f 	dsb	sy
  401526:	b662      	cpsie	i
	uxCriticalNesting++;
  401528:	4a0b      	ldr	r2, [pc, #44]	; (401558 <vPortEnterCritical+0x44>)
  40152a:	6813      	ldr	r3, [r2, #0]
  40152c:	3301      	adds	r3, #1
  40152e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401530:	2b01      	cmp	r3, #1
  401532:	d10f      	bne.n	401554 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401534:	4b09      	ldr	r3, [pc, #36]	; (40155c <vPortEnterCritical+0x48>)
  401536:	681b      	ldr	r3, [r3, #0]
  401538:	f013 0fff 	tst.w	r3, #255	; 0xff
  40153c:	d00a      	beq.n	401554 <vPortEnterCritical+0x40>
  40153e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401542:	b672      	cpsid	i
  401544:	f383 8811 	msr	BASEPRI, r3
  401548:	f3bf 8f6f 	isb	sy
  40154c:	f3bf 8f4f 	dsb	sy
  401550:	b662      	cpsie	i
  401552:	e7fe      	b.n	401552 <vPortEnterCritical+0x3e>
  401554:	4770      	bx	lr
  401556:	bf00      	nop
  401558:	20400020 	.word	0x20400020
  40155c:	e000ed04 	.word	0xe000ed04

00401560 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401560:	4b0a      	ldr	r3, [pc, #40]	; (40158c <vPortExitCritical+0x2c>)
  401562:	681b      	ldr	r3, [r3, #0]
  401564:	b953      	cbnz	r3, 40157c <vPortExitCritical+0x1c>
  401566:	f04f 0380 	mov.w	r3, #128	; 0x80
  40156a:	b672      	cpsid	i
  40156c:	f383 8811 	msr	BASEPRI, r3
  401570:	f3bf 8f6f 	isb	sy
  401574:	f3bf 8f4f 	dsb	sy
  401578:	b662      	cpsie	i
  40157a:	e7fe      	b.n	40157a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40157c:	3b01      	subs	r3, #1
  40157e:	4a03      	ldr	r2, [pc, #12]	; (40158c <vPortExitCritical+0x2c>)
  401580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401582:	b90b      	cbnz	r3, 401588 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401584:	f383 8811 	msr	BASEPRI, r3
  401588:	4770      	bx	lr
  40158a:	bf00      	nop
  40158c:	20400020 	.word	0x20400020

00401590 <PendSV_Handler>:
	__asm volatile
  401590:	f3ef 8009 	mrs	r0, PSP
  401594:	f3bf 8f6f 	isb	sy
  401598:	4b15      	ldr	r3, [pc, #84]	; (4015f0 <pxCurrentTCBConst>)
  40159a:	681a      	ldr	r2, [r3, #0]
  40159c:	f01e 0f10 	tst.w	lr, #16
  4015a0:	bf08      	it	eq
  4015a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4015a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015aa:	6010      	str	r0, [r2, #0]
  4015ac:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4015b0:	f04f 0080 	mov.w	r0, #128	; 0x80
  4015b4:	b672      	cpsid	i
  4015b6:	f380 8811 	msr	BASEPRI, r0
  4015ba:	f3bf 8f4f 	dsb	sy
  4015be:	f3bf 8f6f 	isb	sy
  4015c2:	b662      	cpsie	i
  4015c4:	f001 f890 	bl	4026e8 <vTaskSwitchContext>
  4015c8:	f04f 0000 	mov.w	r0, #0
  4015cc:	f380 8811 	msr	BASEPRI, r0
  4015d0:	bc08      	pop	{r3}
  4015d2:	6819      	ldr	r1, [r3, #0]
  4015d4:	6808      	ldr	r0, [r1, #0]
  4015d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4015da:	f01e 0f10 	tst.w	lr, #16
  4015de:	bf08      	it	eq
  4015e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4015e4:	f380 8809 	msr	PSP, r0
  4015e8:	f3bf 8f6f 	isb	sy
  4015ec:	4770      	bx	lr
  4015ee:	bf00      	nop

004015f0 <pxCurrentTCBConst>:
  4015f0:	20400c78 	.word	0x20400c78
  4015f4:	4770      	bx	lr
  4015f6:	bf00      	nop

004015f8 <SysTick_Handler>:
{
  4015f8:	b508      	push	{r3, lr}
	__asm volatile
  4015fa:	f3ef 8311 	mrs	r3, BASEPRI
  4015fe:	f04f 0280 	mov.w	r2, #128	; 0x80
  401602:	b672      	cpsid	i
  401604:	f382 8811 	msr	BASEPRI, r2
  401608:	f3bf 8f6f 	isb	sy
  40160c:	f3bf 8f4f 	dsb	sy
  401610:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401612:	4b05      	ldr	r3, [pc, #20]	; (401628 <SysTick_Handler+0x30>)
  401614:	4798      	blx	r3
  401616:	b118      	cbz	r0, 401620 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40161c:	4b03      	ldr	r3, [pc, #12]	; (40162c <SysTick_Handler+0x34>)
  40161e:	601a      	str	r2, [r3, #0]
	__asm volatile
  401620:	2300      	movs	r3, #0
  401622:	f383 8811 	msr	BASEPRI, r3
  401626:	bd08      	pop	{r3, pc}
  401628:	00402355 	.word	0x00402355
  40162c:	e000ed04 	.word	0xe000ed04

00401630 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401630:	4a03      	ldr	r2, [pc, #12]	; (401640 <vPortSetupTimerInterrupt+0x10>)
  401632:	4b04      	ldr	r3, [pc, #16]	; (401644 <vPortSetupTimerInterrupt+0x14>)
  401634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  401636:	2207      	movs	r2, #7
  401638:	3b04      	subs	r3, #4
  40163a:	601a      	str	r2, [r3, #0]
  40163c:	4770      	bx	lr
  40163e:	bf00      	nop
  401640:	000927bf 	.word	0x000927bf
  401644:	e000e014 	.word	0xe000e014

00401648 <xPortStartScheduler>:
{
  401648:	b500      	push	{lr}
  40164a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  40164c:	4b25      	ldr	r3, [pc, #148]	; (4016e4 <xPortStartScheduler+0x9c>)
  40164e:	781a      	ldrb	r2, [r3, #0]
  401650:	b2d2      	uxtb	r2, r2
  401652:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401654:	22ff      	movs	r2, #255	; 0xff
  401656:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401658:	781b      	ldrb	r3, [r3, #0]
  40165a:	b2db      	uxtb	r3, r3
  40165c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401660:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401664:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401668:	4a1f      	ldr	r2, [pc, #124]	; (4016e8 <xPortStartScheduler+0xa0>)
  40166a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40166c:	2207      	movs	r2, #7
  40166e:	4b1f      	ldr	r3, [pc, #124]	; (4016ec <xPortStartScheduler+0xa4>)
  401670:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401672:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401676:	f013 0f80 	tst.w	r3, #128	; 0x80
  40167a:	d010      	beq.n	40169e <xPortStartScheduler+0x56>
  40167c:	2206      	movs	r2, #6
  40167e:	e000      	b.n	401682 <xPortStartScheduler+0x3a>
  401680:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401682:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401686:	005b      	lsls	r3, r3, #1
  401688:	b2db      	uxtb	r3, r3
  40168a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40168e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401692:	1e51      	subs	r1, r2, #1
  401694:	f013 0f80 	tst.w	r3, #128	; 0x80
  401698:	d1f2      	bne.n	401680 <xPortStartScheduler+0x38>
  40169a:	4b14      	ldr	r3, [pc, #80]	; (4016ec <xPortStartScheduler+0xa4>)
  40169c:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40169e:	4a13      	ldr	r2, [pc, #76]	; (4016ec <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4016a0:	6813      	ldr	r3, [r2, #0]
  4016a2:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4016a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4016a8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4016aa:	9b01      	ldr	r3, [sp, #4]
  4016ac:	b2db      	uxtb	r3, r3
  4016ae:	4a0d      	ldr	r2, [pc, #52]	; (4016e4 <xPortStartScheduler+0x9c>)
  4016b0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4016b2:	4b0f      	ldr	r3, [pc, #60]	; (4016f0 <xPortStartScheduler+0xa8>)
  4016b4:	681a      	ldr	r2, [r3, #0]
  4016b6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4016ba:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4016bc:	681a      	ldr	r2, [r3, #0]
  4016be:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4016c2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4016c4:	4b0b      	ldr	r3, [pc, #44]	; (4016f4 <xPortStartScheduler+0xac>)
  4016c6:	4798      	blx	r3
	uxCriticalNesting = 0;
  4016c8:	2200      	movs	r2, #0
  4016ca:	4b0b      	ldr	r3, [pc, #44]	; (4016f8 <xPortStartScheduler+0xb0>)
  4016cc:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4016ce:	4b0b      	ldr	r3, [pc, #44]	; (4016fc <xPortStartScheduler+0xb4>)
  4016d0:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4016d2:	4a0b      	ldr	r2, [pc, #44]	; (401700 <xPortStartScheduler+0xb8>)
  4016d4:	6813      	ldr	r3, [r2, #0]
  4016d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4016da:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4016dc:	4b09      	ldr	r3, [pc, #36]	; (401704 <xPortStartScheduler+0xbc>)
  4016de:	4798      	blx	r3
	prvTaskExitError();
  4016e0:	4b09      	ldr	r3, [pc, #36]	; (401708 <xPortStartScheduler+0xc0>)
  4016e2:	4798      	blx	r3
  4016e4:	e000e400 	.word	0xe000e400
  4016e8:	20400c70 	.word	0x20400c70
  4016ec:	20400c74 	.word	0x20400c74
  4016f0:	e000ed20 	.word	0xe000ed20
  4016f4:	00401631 	.word	0x00401631
  4016f8:	20400020 	.word	0x20400020
  4016fc:	004014b5 	.word	0x004014b5
  401700:	e000ef34 	.word	0xe000ef34
  401704:	00401495 	.word	0x00401495
  401708:	00401459 	.word	0x00401459

0040170c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  40170c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401710:	2b0f      	cmp	r3, #15
  401712:	d911      	bls.n	401738 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401714:	4a12      	ldr	r2, [pc, #72]	; (401760 <vPortValidateInterruptPriority+0x54>)
  401716:	5c9b      	ldrb	r3, [r3, r2]
  401718:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40171a:	4a12      	ldr	r2, [pc, #72]	; (401764 <vPortValidateInterruptPriority+0x58>)
  40171c:	7812      	ldrb	r2, [r2, #0]
  40171e:	429a      	cmp	r2, r3
  401720:	d90a      	bls.n	401738 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401722:	f04f 0380 	mov.w	r3, #128	; 0x80
  401726:	b672      	cpsid	i
  401728:	f383 8811 	msr	BASEPRI, r3
  40172c:	f3bf 8f6f 	isb	sy
  401730:	f3bf 8f4f 	dsb	sy
  401734:	b662      	cpsie	i
  401736:	e7fe      	b.n	401736 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401738:	4b0b      	ldr	r3, [pc, #44]	; (401768 <vPortValidateInterruptPriority+0x5c>)
  40173a:	681b      	ldr	r3, [r3, #0]
  40173c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401740:	4a0a      	ldr	r2, [pc, #40]	; (40176c <vPortValidateInterruptPriority+0x60>)
  401742:	6812      	ldr	r2, [r2, #0]
  401744:	4293      	cmp	r3, r2
  401746:	d90a      	bls.n	40175e <vPortValidateInterruptPriority+0x52>
  401748:	f04f 0380 	mov.w	r3, #128	; 0x80
  40174c:	b672      	cpsid	i
  40174e:	f383 8811 	msr	BASEPRI, r3
  401752:	f3bf 8f6f 	isb	sy
  401756:	f3bf 8f4f 	dsb	sy
  40175a:	b662      	cpsie	i
  40175c:	e7fe      	b.n	40175c <vPortValidateInterruptPriority+0x50>
  40175e:	4770      	bx	lr
  401760:	e000e3f0 	.word	0xe000e3f0
  401764:	20400c70 	.word	0x20400c70
  401768:	e000ed0c 	.word	0xe000ed0c
  40176c:	20400c74 	.word	0x20400c74

00401770 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401770:	b510      	push	{r4, lr}
  401772:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401774:	4b06      	ldr	r3, [pc, #24]	; (401790 <pvPortMalloc+0x20>)
  401776:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401778:	4620      	mov	r0, r4
  40177a:	4b06      	ldr	r3, [pc, #24]	; (401794 <pvPortMalloc+0x24>)
  40177c:	4798      	blx	r3
  40177e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401780:	4b05      	ldr	r3, [pc, #20]	; (401798 <pvPortMalloc+0x28>)
  401782:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401784:	b10c      	cbz	r4, 40178a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401786:	4620      	mov	r0, r4
  401788:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40178a:	4b04      	ldr	r3, [pc, #16]	; (40179c <pvPortMalloc+0x2c>)
  40178c:	4798      	blx	r3
	return pvReturn;
  40178e:	e7fa      	b.n	401786 <pvPortMalloc+0x16>
  401790:	00402339 	.word	0x00402339
  401794:	004038b5 	.word	0x004038b5
  401798:	004024a1 	.word	0x004024a1
  40179c:	004035df 	.word	0x004035df

004017a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4017a0:	b148      	cbz	r0, 4017b6 <vPortFree+0x16>
{
  4017a2:	b510      	push	{r4, lr}
  4017a4:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  4017a6:	4b04      	ldr	r3, [pc, #16]	; (4017b8 <vPortFree+0x18>)
  4017a8:	4798      	blx	r3
		{
			free( pv );
  4017aa:	4620      	mov	r0, r4
  4017ac:	4b03      	ldr	r3, [pc, #12]	; (4017bc <vPortFree+0x1c>)
  4017ae:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  4017b0:	4b03      	ldr	r3, [pc, #12]	; (4017c0 <vPortFree+0x20>)
  4017b2:	4798      	blx	r3
  4017b4:	bd10      	pop	{r4, pc}
  4017b6:	4770      	bx	lr
  4017b8:	00402339 	.word	0x00402339
  4017bc:	004038c5 	.word	0x004038c5
  4017c0:	004024a1 	.word	0x004024a1

004017c4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4017c4:	b538      	push	{r3, r4, r5, lr}
  4017c6:	4604      	mov	r4, r0
  4017c8:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4017ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4017cc:	b95a      	cbnz	r2, 4017e6 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4017ce:	6803      	ldr	r3, [r0, #0]
  4017d0:	2b00      	cmp	r3, #0
  4017d2:	d12e      	bne.n	401832 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4017d4:	6840      	ldr	r0, [r0, #4]
  4017d6:	4b1b      	ldr	r3, [pc, #108]	; (401844 <prvCopyDataToQueue+0x80>)
  4017d8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4017da:	2300      	movs	r3, #0
  4017dc:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4017de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4017e0:	3301      	adds	r3, #1
  4017e2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4017e4:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4017e6:	b96d      	cbnz	r5, 401804 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4017e8:	6880      	ldr	r0, [r0, #8]
  4017ea:	4b17      	ldr	r3, [pc, #92]	; (401848 <prvCopyDataToQueue+0x84>)
  4017ec:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4017ee:	68a3      	ldr	r3, [r4, #8]
  4017f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4017f2:	4413      	add	r3, r2
  4017f4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4017f6:	6862      	ldr	r2, [r4, #4]
  4017f8:	4293      	cmp	r3, r2
  4017fa:	d31c      	bcc.n	401836 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4017fc:	6823      	ldr	r3, [r4, #0]
  4017fe:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401800:	2000      	movs	r0, #0
  401802:	e7ec      	b.n	4017de <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401804:	68c0      	ldr	r0, [r0, #12]
  401806:	4b10      	ldr	r3, [pc, #64]	; (401848 <prvCopyDataToQueue+0x84>)
  401808:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40180a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  40180c:	425b      	negs	r3, r3
  40180e:	68e2      	ldr	r2, [r4, #12]
  401810:	441a      	add	r2, r3
  401812:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401814:	6821      	ldr	r1, [r4, #0]
  401816:	428a      	cmp	r2, r1
  401818:	d202      	bcs.n	401820 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40181a:	6862      	ldr	r2, [r4, #4]
  40181c:	4413      	add	r3, r2
  40181e:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401820:	2d02      	cmp	r5, #2
  401822:	d10a      	bne.n	40183a <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401826:	b153      	cbz	r3, 40183e <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401828:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40182a:	3b01      	subs	r3, #1
  40182c:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40182e:	2000      	movs	r0, #0
  401830:	e7d5      	b.n	4017de <prvCopyDataToQueue+0x1a>
  401832:	2000      	movs	r0, #0
  401834:	e7d3      	b.n	4017de <prvCopyDataToQueue+0x1a>
  401836:	2000      	movs	r0, #0
  401838:	e7d1      	b.n	4017de <prvCopyDataToQueue+0x1a>
  40183a:	2000      	movs	r0, #0
  40183c:	e7cf      	b.n	4017de <prvCopyDataToQueue+0x1a>
  40183e:	2000      	movs	r0, #0
  401840:	e7cd      	b.n	4017de <prvCopyDataToQueue+0x1a>
  401842:	bf00      	nop
  401844:	00402ae9 	.word	0x00402ae9
  401848:	00403e35 	.word	0x00403e35

0040184c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40184c:	b530      	push	{r4, r5, lr}
  40184e:	b083      	sub	sp, #12
  401850:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401852:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401854:	b174      	cbz	r4, 401874 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401856:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401858:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40185a:	429a      	cmp	r2, r3
  40185c:	d315      	bcc.n	40188a <prvNotifyQueueSetContainer+0x3e>
  40185e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401862:	b672      	cpsid	i
  401864:	f383 8811 	msr	BASEPRI, r3
  401868:	f3bf 8f6f 	isb	sy
  40186c:	f3bf 8f4f 	dsb	sy
  401870:	b662      	cpsie	i
  401872:	e7fe      	b.n	401872 <prvNotifyQueueSetContainer+0x26>
  401874:	f04f 0380 	mov.w	r3, #128	; 0x80
  401878:	b672      	cpsid	i
  40187a:	f383 8811 	msr	BASEPRI, r3
  40187e:	f3bf 8f6f 	isb	sy
  401882:	f3bf 8f4f 	dsb	sy
  401886:	b662      	cpsie	i
  401888:	e7fe      	b.n	401888 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40188a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40188c:	4293      	cmp	r3, r2
  40188e:	d803      	bhi.n	401898 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401890:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401892:	4628      	mov	r0, r5
  401894:	b003      	add	sp, #12
  401896:	bd30      	pop	{r4, r5, pc}
  401898:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40189a:	a901      	add	r1, sp, #4
  40189c:	4620      	mov	r0, r4
  40189e:	4b0b      	ldr	r3, [pc, #44]	; (4018cc <prvNotifyQueueSetContainer+0x80>)
  4018a0:	4798      	blx	r3
  4018a2:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4018a4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018a6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018aa:	d10a      	bne.n	4018c2 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4018ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4018ae:	2b00      	cmp	r3, #0
  4018b0:	d0ef      	beq.n	401892 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4018b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4018b6:	4b06      	ldr	r3, [pc, #24]	; (4018d0 <prvNotifyQueueSetContainer+0x84>)
  4018b8:	4798      	blx	r3
  4018ba:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4018bc:	bf18      	it	ne
  4018be:	2501      	movne	r5, #1
  4018c0:	e7e7      	b.n	401892 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4018c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018c4:	3301      	adds	r3, #1
  4018c6:	64a3      	str	r3, [r4, #72]	; 0x48
  4018c8:	e7e3      	b.n	401892 <prvNotifyQueueSetContainer+0x46>
  4018ca:	bf00      	nop
  4018cc:	004017c5 	.word	0x004017c5
  4018d0:	004028bd 	.word	0x004028bd

004018d4 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4018d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4018d6:	b172      	cbz	r2, 4018f6 <prvCopyDataFromQueue+0x22>
{
  4018d8:	b510      	push	{r4, lr}
  4018da:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4018dc:	68c4      	ldr	r4, [r0, #12]
  4018de:	4414      	add	r4, r2
  4018e0:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4018e2:	6840      	ldr	r0, [r0, #4]
  4018e4:	4284      	cmp	r4, r0
  4018e6:	d301      	bcc.n	4018ec <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4018e8:	6818      	ldr	r0, [r3, #0]
  4018ea:	60d8      	str	r0, [r3, #12]
  4018ec:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4018ee:	68d9      	ldr	r1, [r3, #12]
  4018f0:	4b01      	ldr	r3, [pc, #4]	; (4018f8 <prvCopyDataFromQueue+0x24>)
  4018f2:	4798      	blx	r3
  4018f4:	bd10      	pop	{r4, pc}
  4018f6:	4770      	bx	lr
  4018f8:	00403e35 	.word	0x00403e35

004018fc <prvUnlockQueue>:
{
  4018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018fe:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401900:	4b22      	ldr	r3, [pc, #136]	; (40198c <prvUnlockQueue+0x90>)
  401902:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401904:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401906:	2b00      	cmp	r3, #0
  401908:	dd1b      	ble.n	401942 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40190a:	4d21      	ldr	r5, [pc, #132]	; (401990 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  40190c:	4f21      	ldr	r7, [pc, #132]	; (401994 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40190e:	4e22      	ldr	r6, [pc, #136]	; (401998 <prvUnlockQueue+0x9c>)
  401910:	e00b      	b.n	40192a <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401912:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401914:	b1ab      	cbz	r3, 401942 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401916:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40191a:	47b0      	blx	r6
  40191c:	b978      	cbnz	r0, 40193e <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40191e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401920:	3b01      	subs	r3, #1
  401922:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401924:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401926:	2b00      	cmp	r3, #0
  401928:	dd0b      	ble.n	401942 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  40192a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40192c:	2b00      	cmp	r3, #0
  40192e:	d0f0      	beq.n	401912 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401930:	2100      	movs	r1, #0
  401932:	4620      	mov	r0, r4
  401934:	47a8      	blx	r5
  401936:	2801      	cmp	r0, #1
  401938:	d1f1      	bne.n	40191e <prvUnlockQueue+0x22>
						vTaskMissedYield();
  40193a:	47b8      	blx	r7
  40193c:	e7ef      	b.n	40191e <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40193e:	47b8      	blx	r7
  401940:	e7ed      	b.n	40191e <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401942:	f04f 33ff 	mov.w	r3, #4294967295
  401946:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401948:	4b14      	ldr	r3, [pc, #80]	; (40199c <prvUnlockQueue+0xa0>)
  40194a:	4798      	blx	r3
	taskENTER_CRITICAL();
  40194c:	4b0f      	ldr	r3, [pc, #60]	; (40198c <prvUnlockQueue+0x90>)
  40194e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401950:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401952:	2b00      	cmp	r3, #0
  401954:	dd14      	ble.n	401980 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401956:	6923      	ldr	r3, [r4, #16]
  401958:	b193      	cbz	r3, 401980 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40195a:	f104 0610 	add.w	r6, r4, #16
  40195e:	4d0e      	ldr	r5, [pc, #56]	; (401998 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401960:	4f0c      	ldr	r7, [pc, #48]	; (401994 <prvUnlockQueue+0x98>)
  401962:	e007      	b.n	401974 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401964:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401966:	3b01      	subs	r3, #1
  401968:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40196a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40196c:	2b00      	cmp	r3, #0
  40196e:	dd07      	ble.n	401980 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401970:	6923      	ldr	r3, [r4, #16]
  401972:	b12b      	cbz	r3, 401980 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401974:	4630      	mov	r0, r6
  401976:	47a8      	blx	r5
  401978:	2800      	cmp	r0, #0
  40197a:	d0f3      	beq.n	401964 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  40197c:	47b8      	blx	r7
  40197e:	e7f1      	b.n	401964 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401980:	f04f 33ff 	mov.w	r3, #4294967295
  401984:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401986:	4b05      	ldr	r3, [pc, #20]	; (40199c <prvUnlockQueue+0xa0>)
  401988:	4798      	blx	r3
  40198a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40198c:	00401515 	.word	0x00401515
  401990:	0040184d 	.word	0x0040184d
  401994:	00402a19 	.word	0x00402a19
  401998:	004028bd 	.word	0x004028bd
  40199c:	00401561 	.word	0x00401561

004019a0 <xQueueGenericReset>:
{
  4019a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4019a2:	b308      	cbz	r0, 4019e8 <xQueueGenericReset+0x48>
  4019a4:	4604      	mov	r4, r0
  4019a6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4019a8:	4b1d      	ldr	r3, [pc, #116]	; (401a20 <xQueueGenericReset+0x80>)
  4019aa:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4019ac:	6822      	ldr	r2, [r4, #0]
  4019ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4019b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4019b2:	fb03 f301 	mul.w	r3, r3, r1
  4019b6:	18d0      	adds	r0, r2, r3
  4019b8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4019ba:	2000      	movs	r0, #0
  4019bc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4019be:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4019c0:	1a5b      	subs	r3, r3, r1
  4019c2:	4413      	add	r3, r2
  4019c4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4019c6:	f04f 33ff 	mov.w	r3, #4294967295
  4019ca:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4019cc:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4019ce:	b9fd      	cbnz	r5, 401a10 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4019d0:	6923      	ldr	r3, [r4, #16]
  4019d2:	b12b      	cbz	r3, 4019e0 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4019d4:	f104 0010 	add.w	r0, r4, #16
  4019d8:	4b12      	ldr	r3, [pc, #72]	; (401a24 <xQueueGenericReset+0x84>)
  4019da:	4798      	blx	r3
  4019dc:	2801      	cmp	r0, #1
  4019de:	d00e      	beq.n	4019fe <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  4019e0:	4b11      	ldr	r3, [pc, #68]	; (401a28 <xQueueGenericReset+0x88>)
  4019e2:	4798      	blx	r3
}
  4019e4:	2001      	movs	r0, #1
  4019e6:	bd38      	pop	{r3, r4, r5, pc}
  4019e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019ec:	b672      	cpsid	i
  4019ee:	f383 8811 	msr	BASEPRI, r3
  4019f2:	f3bf 8f6f 	isb	sy
  4019f6:	f3bf 8f4f 	dsb	sy
  4019fa:	b662      	cpsie	i
  4019fc:	e7fe      	b.n	4019fc <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4019fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a02:	4b0a      	ldr	r3, [pc, #40]	; (401a2c <xQueueGenericReset+0x8c>)
  401a04:	601a      	str	r2, [r3, #0]
  401a06:	f3bf 8f4f 	dsb	sy
  401a0a:	f3bf 8f6f 	isb	sy
  401a0e:	e7e7      	b.n	4019e0 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401a10:	f104 0010 	add.w	r0, r4, #16
  401a14:	4d06      	ldr	r5, [pc, #24]	; (401a30 <xQueueGenericReset+0x90>)
  401a16:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401a18:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a1c:	47a8      	blx	r5
  401a1e:	e7df      	b.n	4019e0 <xQueueGenericReset+0x40>
  401a20:	00401515 	.word	0x00401515
  401a24:	004028bd 	.word	0x004028bd
  401a28:	00401561 	.word	0x00401561
  401a2c:	e000ed04 	.word	0xe000ed04
  401a30:	004013c9 	.word	0x004013c9

00401a34 <xQueueGenericCreate>:
{
  401a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401a36:	b950      	cbnz	r0, 401a4e <xQueueGenericCreate+0x1a>
  401a38:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a3c:	b672      	cpsid	i
  401a3e:	f383 8811 	msr	BASEPRI, r3
  401a42:	f3bf 8f6f 	isb	sy
  401a46:	f3bf 8f4f 	dsb	sy
  401a4a:	b662      	cpsie	i
  401a4c:	e7fe      	b.n	401a4c <xQueueGenericCreate+0x18>
  401a4e:	4606      	mov	r6, r0
  401a50:	4617      	mov	r7, r2
  401a52:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401a54:	b189      	cbz	r1, 401a7a <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401a56:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401a5a:	3059      	adds	r0, #89	; 0x59
  401a5c:	4b12      	ldr	r3, [pc, #72]	; (401aa8 <xQueueGenericCreate+0x74>)
  401a5e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401a60:	4604      	mov	r4, r0
  401a62:	b9e8      	cbnz	r0, 401aa0 <xQueueGenericCreate+0x6c>
  401a64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a68:	b672      	cpsid	i
  401a6a:	f383 8811 	msr	BASEPRI, r3
  401a6e:	f3bf 8f6f 	isb	sy
  401a72:	f3bf 8f4f 	dsb	sy
  401a76:	b662      	cpsie	i
  401a78:	e7fe      	b.n	401a78 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401a7a:	2058      	movs	r0, #88	; 0x58
  401a7c:	4b0a      	ldr	r3, [pc, #40]	; (401aa8 <xQueueGenericCreate+0x74>)
  401a7e:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401a80:	4604      	mov	r4, r0
  401a82:	2800      	cmp	r0, #0
  401a84:	d0ee      	beq.n	401a64 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401a86:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401a88:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401a8a:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401a8c:	2101      	movs	r1, #1
  401a8e:	4620      	mov	r0, r4
  401a90:	4b06      	ldr	r3, [pc, #24]	; (401aac <xQueueGenericCreate+0x78>)
  401a92:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401a94:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401a98:	2300      	movs	r3, #0
  401a9a:	6563      	str	r3, [r4, #84]	; 0x54
}
  401a9c:	4620      	mov	r0, r4
  401a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401aa0:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401aa4:	6003      	str	r3, [r0, #0]
  401aa6:	e7ef      	b.n	401a88 <xQueueGenericCreate+0x54>
  401aa8:	00401771 	.word	0x00401771
  401aac:	004019a1 	.word	0x004019a1

00401ab0 <xQueueGenericSend>:
{
  401ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401ab4:	b085      	sub	sp, #20
  401ab6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401ab8:	b1b8      	cbz	r0, 401aea <xQueueGenericSend+0x3a>
  401aba:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401abc:	b301      	cbz	r1, 401b00 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401abe:	2b02      	cmp	r3, #2
  401ac0:	d02c      	beq.n	401b1c <xQueueGenericSend+0x6c>
  401ac2:	461d      	mov	r5, r3
  401ac4:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401ac6:	4b66      	ldr	r3, [pc, #408]	; (401c60 <xQueueGenericSend+0x1b0>)
  401ac8:	4798      	blx	r3
  401aca:	2800      	cmp	r0, #0
  401acc:	d134      	bne.n	401b38 <xQueueGenericSend+0x88>
  401ace:	9b01      	ldr	r3, [sp, #4]
  401ad0:	2b00      	cmp	r3, #0
  401ad2:	d038      	beq.n	401b46 <xQueueGenericSend+0x96>
  401ad4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ad8:	b672      	cpsid	i
  401ada:	f383 8811 	msr	BASEPRI, r3
  401ade:	f3bf 8f6f 	isb	sy
  401ae2:	f3bf 8f4f 	dsb	sy
  401ae6:	b662      	cpsie	i
  401ae8:	e7fe      	b.n	401ae8 <xQueueGenericSend+0x38>
  401aea:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aee:	b672      	cpsid	i
  401af0:	f383 8811 	msr	BASEPRI, r3
  401af4:	f3bf 8f6f 	isb	sy
  401af8:	f3bf 8f4f 	dsb	sy
  401afc:	b662      	cpsie	i
  401afe:	e7fe      	b.n	401afe <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b00:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401b02:	2a00      	cmp	r2, #0
  401b04:	d0db      	beq.n	401abe <xQueueGenericSend+0xe>
  401b06:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b0a:	b672      	cpsid	i
  401b0c:	f383 8811 	msr	BASEPRI, r3
  401b10:	f3bf 8f6f 	isb	sy
  401b14:	f3bf 8f4f 	dsb	sy
  401b18:	b662      	cpsie	i
  401b1a:	e7fe      	b.n	401b1a <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401b1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401b1e:	2a01      	cmp	r2, #1
  401b20:	d0cf      	beq.n	401ac2 <xQueueGenericSend+0x12>
  401b22:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b26:	b672      	cpsid	i
  401b28:	f383 8811 	msr	BASEPRI, r3
  401b2c:	f3bf 8f6f 	isb	sy
  401b30:	f3bf 8f4f 	dsb	sy
  401b34:	b662      	cpsie	i
  401b36:	e7fe      	b.n	401b36 <xQueueGenericSend+0x86>
  401b38:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401b3a:	4e4a      	ldr	r6, [pc, #296]	; (401c64 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401b3c:	f8df a150 	ldr.w	sl, [pc, #336]	; 401c90 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401b40:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401c70 <xQueueGenericSend+0x1c0>
  401b44:	e042      	b.n	401bcc <xQueueGenericSend+0x11c>
  401b46:	2700      	movs	r7, #0
  401b48:	e7f7      	b.n	401b3a <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401b4a:	462a      	mov	r2, r5
  401b4c:	4641      	mov	r1, r8
  401b4e:	4620      	mov	r0, r4
  401b50:	4b45      	ldr	r3, [pc, #276]	; (401c68 <xQueueGenericSend+0x1b8>)
  401b52:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401b54:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401b56:	b19b      	cbz	r3, 401b80 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401b58:	4629      	mov	r1, r5
  401b5a:	4620      	mov	r0, r4
  401b5c:	4b43      	ldr	r3, [pc, #268]	; (401c6c <xQueueGenericSend+0x1bc>)
  401b5e:	4798      	blx	r3
  401b60:	2801      	cmp	r0, #1
  401b62:	d107      	bne.n	401b74 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b68:	4b41      	ldr	r3, [pc, #260]	; (401c70 <xQueueGenericSend+0x1c0>)
  401b6a:	601a      	str	r2, [r3, #0]
  401b6c:	f3bf 8f4f 	dsb	sy
  401b70:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401b74:	4b3f      	ldr	r3, [pc, #252]	; (401c74 <xQueueGenericSend+0x1c4>)
  401b76:	4798      	blx	r3
				return pdPASS;
  401b78:	2001      	movs	r0, #1
}
  401b7a:	b005      	add	sp, #20
  401b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b82:	b173      	cbz	r3, 401ba2 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401b84:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b88:	4b3b      	ldr	r3, [pc, #236]	; (401c78 <xQueueGenericSend+0x1c8>)
  401b8a:	4798      	blx	r3
  401b8c:	2801      	cmp	r0, #1
  401b8e:	d1f1      	bne.n	401b74 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b94:	4b36      	ldr	r3, [pc, #216]	; (401c70 <xQueueGenericSend+0x1c0>)
  401b96:	601a      	str	r2, [r3, #0]
  401b98:	f3bf 8f4f 	dsb	sy
  401b9c:	f3bf 8f6f 	isb	sy
  401ba0:	e7e8      	b.n	401b74 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401ba2:	2800      	cmp	r0, #0
  401ba4:	d0e6      	beq.n	401b74 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401baa:	4b31      	ldr	r3, [pc, #196]	; (401c70 <xQueueGenericSend+0x1c0>)
  401bac:	601a      	str	r2, [r3, #0]
  401bae:	f3bf 8f4f 	dsb	sy
  401bb2:	f3bf 8f6f 	isb	sy
  401bb6:	e7dd      	b.n	401b74 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401bb8:	4b2e      	ldr	r3, [pc, #184]	; (401c74 <xQueueGenericSend+0x1c4>)
  401bba:	4798      	blx	r3
					return errQUEUE_FULL;
  401bbc:	2000      	movs	r0, #0
  401bbe:	e7dc      	b.n	401b7a <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401bc0:	4620      	mov	r0, r4
  401bc2:	4b2e      	ldr	r3, [pc, #184]	; (401c7c <xQueueGenericSend+0x1cc>)
  401bc4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401bc6:	4b2e      	ldr	r3, [pc, #184]	; (401c80 <xQueueGenericSend+0x1d0>)
  401bc8:	4798      	blx	r3
  401bca:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401bcc:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401bce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401bd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401bd2:	429a      	cmp	r2, r3
  401bd4:	d3b9      	bcc.n	401b4a <xQueueGenericSend+0x9a>
  401bd6:	2d02      	cmp	r5, #2
  401bd8:	d0b7      	beq.n	401b4a <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401bda:	9b01      	ldr	r3, [sp, #4]
  401bdc:	2b00      	cmp	r3, #0
  401bde:	d0eb      	beq.n	401bb8 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401be0:	b90f      	cbnz	r7, 401be6 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  401be2:	a802      	add	r0, sp, #8
  401be4:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401be6:	4b23      	ldr	r3, [pc, #140]	; (401c74 <xQueueGenericSend+0x1c4>)
  401be8:	4798      	blx	r3
		vTaskSuspendAll();
  401bea:	4b26      	ldr	r3, [pc, #152]	; (401c84 <xQueueGenericSend+0x1d4>)
  401bec:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401bee:	47b0      	blx	r6
  401bf0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bf6:	d101      	bne.n	401bfc <xQueueGenericSend+0x14c>
  401bf8:	2300      	movs	r3, #0
  401bfa:	6463      	str	r3, [r4, #68]	; 0x44
  401bfc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c02:	d101      	bne.n	401c08 <xQueueGenericSend+0x158>
  401c04:	2300      	movs	r3, #0
  401c06:	64a3      	str	r3, [r4, #72]	; 0x48
  401c08:	4b1a      	ldr	r3, [pc, #104]	; (401c74 <xQueueGenericSend+0x1c4>)
  401c0a:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401c0c:	a901      	add	r1, sp, #4
  401c0e:	a802      	add	r0, sp, #8
  401c10:	4b1d      	ldr	r3, [pc, #116]	; (401c88 <xQueueGenericSend+0x1d8>)
  401c12:	4798      	blx	r3
  401c14:	b9e0      	cbnz	r0, 401c50 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  401c16:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401c18:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401c1c:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401c1e:	4b15      	ldr	r3, [pc, #84]	; (401c74 <xQueueGenericSend+0x1c4>)
  401c20:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401c22:	45bb      	cmp	fp, r7
  401c24:	d1cc      	bne.n	401bc0 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401c26:	9901      	ldr	r1, [sp, #4]
  401c28:	f104 0010 	add.w	r0, r4, #16
  401c2c:	4b17      	ldr	r3, [pc, #92]	; (401c8c <xQueueGenericSend+0x1dc>)
  401c2e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401c30:	4620      	mov	r0, r4
  401c32:	4b12      	ldr	r3, [pc, #72]	; (401c7c <xQueueGenericSend+0x1cc>)
  401c34:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401c36:	4b12      	ldr	r3, [pc, #72]	; (401c80 <xQueueGenericSend+0x1d0>)
  401c38:	4798      	blx	r3
  401c3a:	2800      	cmp	r0, #0
  401c3c:	d1c5      	bne.n	401bca <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401c3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401c42:	f8c9 3000 	str.w	r3, [r9]
  401c46:	f3bf 8f4f 	dsb	sy
  401c4a:	f3bf 8f6f 	isb	sy
  401c4e:	e7bc      	b.n	401bca <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401c50:	4620      	mov	r0, r4
  401c52:	4b0a      	ldr	r3, [pc, #40]	; (401c7c <xQueueGenericSend+0x1cc>)
  401c54:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401c56:	4b0a      	ldr	r3, [pc, #40]	; (401c80 <xQueueGenericSend+0x1d0>)
  401c58:	4798      	blx	r3
			return errQUEUE_FULL;
  401c5a:	2000      	movs	r0, #0
  401c5c:	e78d      	b.n	401b7a <xQueueGenericSend+0xca>
  401c5e:	bf00      	nop
  401c60:	00402a25 	.word	0x00402a25
  401c64:	00401515 	.word	0x00401515
  401c68:	004017c5 	.word	0x004017c5
  401c6c:	0040184d 	.word	0x0040184d
  401c70:	e000ed04 	.word	0xe000ed04
  401c74:	00401561 	.word	0x00401561
  401c78:	004028bd 	.word	0x004028bd
  401c7c:	004018fd 	.word	0x004018fd
  401c80:	004024a1 	.word	0x004024a1
  401c84:	00402339 	.word	0x00402339
  401c88:	00402985 	.word	0x00402985
  401c8c:	004027b9 	.word	0x004027b9
  401c90:	00402955 	.word	0x00402955

00401c94 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401c94:	2800      	cmp	r0, #0
  401c96:	d036      	beq.n	401d06 <xQueueGenericSendFromISR+0x72>
{
  401c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c9c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401c9e:	2900      	cmp	r1, #0
  401ca0:	d03c      	beq.n	401d1c <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401ca2:	2b02      	cmp	r3, #2
  401ca4:	d048      	beq.n	401d38 <xQueueGenericSendFromISR+0xa4>
  401ca6:	461e      	mov	r6, r3
  401ca8:	4615      	mov	r5, r2
  401caa:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401cac:	4b35      	ldr	r3, [pc, #212]	; (401d84 <xQueueGenericSendFromISR+0xf0>)
  401cae:	4798      	blx	r3
	__asm volatile
  401cb0:	f3ef 8711 	mrs	r7, BASEPRI
  401cb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cb8:	b672      	cpsid	i
  401cba:	f383 8811 	msr	BASEPRI, r3
  401cbe:	f3bf 8f6f 	isb	sy
  401cc2:	f3bf 8f4f 	dsb	sy
  401cc6:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401cc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401cca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401ccc:	429a      	cmp	r2, r3
  401cce:	d301      	bcc.n	401cd4 <xQueueGenericSendFromISR+0x40>
  401cd0:	2e02      	cmp	r6, #2
  401cd2:	d14f      	bne.n	401d74 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401cd4:	4632      	mov	r2, r6
  401cd6:	4641      	mov	r1, r8
  401cd8:	4620      	mov	r0, r4
  401cda:	4b2b      	ldr	r3, [pc, #172]	; (401d88 <xQueueGenericSendFromISR+0xf4>)
  401cdc:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401cde:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ce4:	d141      	bne.n	401d6a <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401ce6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401ce8:	2b00      	cmp	r3, #0
  401cea:	d033      	beq.n	401d54 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401cec:	4631      	mov	r1, r6
  401cee:	4620      	mov	r0, r4
  401cf0:	4b26      	ldr	r3, [pc, #152]	; (401d8c <xQueueGenericSendFromISR+0xf8>)
  401cf2:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401cf4:	2d00      	cmp	r5, #0
  401cf6:	d03f      	beq.n	401d78 <xQueueGenericSendFromISR+0xe4>
  401cf8:	2801      	cmp	r0, #1
  401cfa:	d13d      	bne.n	401d78 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401cfc:	6028      	str	r0, [r5, #0]
	__asm volatile
  401cfe:	f387 8811 	msr	BASEPRI, r7
}
  401d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  401d06:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d0a:	b672      	cpsid	i
  401d0c:	f383 8811 	msr	BASEPRI, r3
  401d10:	f3bf 8f6f 	isb	sy
  401d14:	f3bf 8f4f 	dsb	sy
  401d18:	b662      	cpsie	i
  401d1a:	e7fe      	b.n	401d1a <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d1c:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401d1e:	2800      	cmp	r0, #0
  401d20:	d0bf      	beq.n	401ca2 <xQueueGenericSendFromISR+0xe>
  401d22:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d26:	b672      	cpsid	i
  401d28:	f383 8811 	msr	BASEPRI, r3
  401d2c:	f3bf 8f6f 	isb	sy
  401d30:	f3bf 8f4f 	dsb	sy
  401d34:	b662      	cpsie	i
  401d36:	e7fe      	b.n	401d36 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401d38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401d3a:	2801      	cmp	r0, #1
  401d3c:	d0b3      	beq.n	401ca6 <xQueueGenericSendFromISR+0x12>
  401d3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d42:	b672      	cpsid	i
  401d44:	f383 8811 	msr	BASEPRI, r3
  401d48:	f3bf 8f6f 	isb	sy
  401d4c:	f3bf 8f4f 	dsb	sy
  401d50:	b662      	cpsie	i
  401d52:	e7fe      	b.n	401d52 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d56:	b18b      	cbz	r3, 401d7c <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401d58:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d5c:	4b0c      	ldr	r3, [pc, #48]	; (401d90 <xQueueGenericSendFromISR+0xfc>)
  401d5e:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401d60:	b175      	cbz	r5, 401d80 <xQueueGenericSendFromISR+0xec>
  401d62:	b168      	cbz	r0, 401d80 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401d64:	2001      	movs	r0, #1
  401d66:	6028      	str	r0, [r5, #0]
  401d68:	e7c9      	b.n	401cfe <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  401d6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401d6c:	3301      	adds	r3, #1
  401d6e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401d70:	2001      	movs	r0, #1
  401d72:	e7c4      	b.n	401cfe <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401d74:	2000      	movs	r0, #0
  401d76:	e7c2      	b.n	401cfe <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  401d78:	2001      	movs	r0, #1
  401d7a:	e7c0      	b.n	401cfe <xQueueGenericSendFromISR+0x6a>
  401d7c:	2001      	movs	r0, #1
  401d7e:	e7be      	b.n	401cfe <xQueueGenericSendFromISR+0x6a>
  401d80:	2001      	movs	r0, #1
  401d82:	e7bc      	b.n	401cfe <xQueueGenericSendFromISR+0x6a>
  401d84:	0040170d 	.word	0x0040170d
  401d88:	004017c5 	.word	0x004017c5
  401d8c:	0040184d 	.word	0x0040184d
  401d90:	004028bd 	.word	0x004028bd

00401d94 <xQueueGenericReceive>:
{
  401d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d98:	b084      	sub	sp, #16
  401d9a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401d9c:	b198      	cbz	r0, 401dc6 <xQueueGenericReceive+0x32>
  401d9e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401da0:	b1e1      	cbz	r1, 401ddc <xQueueGenericReceive+0x48>
  401da2:	4698      	mov	r8, r3
  401da4:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401da6:	4b61      	ldr	r3, [pc, #388]	; (401f2c <xQueueGenericReceive+0x198>)
  401da8:	4798      	blx	r3
  401daa:	bb28      	cbnz	r0, 401df8 <xQueueGenericReceive+0x64>
  401dac:	9b01      	ldr	r3, [sp, #4]
  401dae:	b353      	cbz	r3, 401e06 <xQueueGenericReceive+0x72>
  401db0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401db4:	b672      	cpsid	i
  401db6:	f383 8811 	msr	BASEPRI, r3
  401dba:	f3bf 8f6f 	isb	sy
  401dbe:	f3bf 8f4f 	dsb	sy
  401dc2:	b662      	cpsie	i
  401dc4:	e7fe      	b.n	401dc4 <xQueueGenericReceive+0x30>
  401dc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dca:	b672      	cpsid	i
  401dcc:	f383 8811 	msr	BASEPRI, r3
  401dd0:	f3bf 8f6f 	isb	sy
  401dd4:	f3bf 8f4f 	dsb	sy
  401dd8:	b662      	cpsie	i
  401dda:	e7fe      	b.n	401dda <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401ddc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401dde:	2a00      	cmp	r2, #0
  401de0:	d0df      	beq.n	401da2 <xQueueGenericReceive+0xe>
  401de2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401de6:	b672      	cpsid	i
  401de8:	f383 8811 	msr	BASEPRI, r3
  401dec:	f3bf 8f6f 	isb	sy
  401df0:	f3bf 8f4f 	dsb	sy
  401df4:	b662      	cpsie	i
  401df6:	e7fe      	b.n	401df6 <xQueueGenericReceive+0x62>
  401df8:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401dfa:	4d4d      	ldr	r5, [pc, #308]	; (401f30 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401dfc:	f8df a160 	ldr.w	sl, [pc, #352]	; 401f60 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401e00:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401f40 <xQueueGenericReceive+0x1ac>
  401e04:	e04b      	b.n	401e9e <xQueueGenericReceive+0x10a>
  401e06:	2600      	movs	r6, #0
  401e08:	e7f7      	b.n	401dfa <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401e0a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401e0c:	4639      	mov	r1, r7
  401e0e:	4620      	mov	r0, r4
  401e10:	4b48      	ldr	r3, [pc, #288]	; (401f34 <xQueueGenericReceive+0x1a0>)
  401e12:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401e14:	f1b8 0f00 	cmp.w	r8, #0
  401e18:	d11d      	bne.n	401e56 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401e1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e1c:	3b01      	subs	r3, #1
  401e1e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401e20:	6823      	ldr	r3, [r4, #0]
  401e22:	b913      	cbnz	r3, 401e2a <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401e24:	4b44      	ldr	r3, [pc, #272]	; (401f38 <xQueueGenericReceive+0x1a4>)
  401e26:	4798      	blx	r3
  401e28:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401e2a:	6923      	ldr	r3, [r4, #16]
  401e2c:	b16b      	cbz	r3, 401e4a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401e2e:	f104 0010 	add.w	r0, r4, #16
  401e32:	4b42      	ldr	r3, [pc, #264]	; (401f3c <xQueueGenericReceive+0x1a8>)
  401e34:	4798      	blx	r3
  401e36:	2801      	cmp	r0, #1
  401e38:	d107      	bne.n	401e4a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e3e:	4b40      	ldr	r3, [pc, #256]	; (401f40 <xQueueGenericReceive+0x1ac>)
  401e40:	601a      	str	r2, [r3, #0]
  401e42:	f3bf 8f4f 	dsb	sy
  401e46:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401e4a:	4b3e      	ldr	r3, [pc, #248]	; (401f44 <xQueueGenericReceive+0x1b0>)
  401e4c:	4798      	blx	r3
				return pdPASS;
  401e4e:	2001      	movs	r0, #1
}
  401e50:	b004      	add	sp, #16
  401e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401e56:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e5a:	2b00      	cmp	r3, #0
  401e5c:	d0f5      	beq.n	401e4a <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401e5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e62:	4b36      	ldr	r3, [pc, #216]	; (401f3c <xQueueGenericReceive+0x1a8>)
  401e64:	4798      	blx	r3
  401e66:	2800      	cmp	r0, #0
  401e68:	d0ef      	beq.n	401e4a <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e6e:	4b34      	ldr	r3, [pc, #208]	; (401f40 <xQueueGenericReceive+0x1ac>)
  401e70:	601a      	str	r2, [r3, #0]
  401e72:	f3bf 8f4f 	dsb	sy
  401e76:	f3bf 8f6f 	isb	sy
  401e7a:	e7e6      	b.n	401e4a <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401e7c:	4b31      	ldr	r3, [pc, #196]	; (401f44 <xQueueGenericReceive+0x1b0>)
  401e7e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401e80:	2000      	movs	r0, #0
  401e82:	e7e5      	b.n	401e50 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401e84:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401e86:	6860      	ldr	r0, [r4, #4]
  401e88:	4b2f      	ldr	r3, [pc, #188]	; (401f48 <xQueueGenericReceive+0x1b4>)
  401e8a:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401e8c:	4b2d      	ldr	r3, [pc, #180]	; (401f44 <xQueueGenericReceive+0x1b0>)
  401e8e:	4798      	blx	r3
  401e90:	e030      	b.n	401ef4 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401e92:	4620      	mov	r0, r4
  401e94:	4b2d      	ldr	r3, [pc, #180]	; (401f4c <xQueueGenericReceive+0x1b8>)
  401e96:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401e98:	4b2d      	ldr	r3, [pc, #180]	; (401f50 <xQueueGenericReceive+0x1bc>)
  401e9a:	4798      	blx	r3
  401e9c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401e9e:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401ea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401ea2:	2b00      	cmp	r3, #0
  401ea4:	d1b1      	bne.n	401e0a <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401ea6:	9b01      	ldr	r3, [sp, #4]
  401ea8:	2b00      	cmp	r3, #0
  401eaa:	d0e7      	beq.n	401e7c <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401eac:	b90e      	cbnz	r6, 401eb2 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401eae:	a802      	add	r0, sp, #8
  401eb0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401eb2:	4b24      	ldr	r3, [pc, #144]	; (401f44 <xQueueGenericReceive+0x1b0>)
  401eb4:	4798      	blx	r3
		vTaskSuspendAll();
  401eb6:	4b27      	ldr	r3, [pc, #156]	; (401f54 <xQueueGenericReceive+0x1c0>)
  401eb8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401eba:	47a8      	blx	r5
  401ebc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ec2:	d101      	bne.n	401ec8 <xQueueGenericReceive+0x134>
  401ec4:	2300      	movs	r3, #0
  401ec6:	6463      	str	r3, [r4, #68]	; 0x44
  401ec8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401eca:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ece:	d101      	bne.n	401ed4 <xQueueGenericReceive+0x140>
  401ed0:	2300      	movs	r3, #0
  401ed2:	64a3      	str	r3, [r4, #72]	; 0x48
  401ed4:	4b1b      	ldr	r3, [pc, #108]	; (401f44 <xQueueGenericReceive+0x1b0>)
  401ed6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401ed8:	a901      	add	r1, sp, #4
  401eda:	a802      	add	r0, sp, #8
  401edc:	4b1e      	ldr	r3, [pc, #120]	; (401f58 <xQueueGenericReceive+0x1c4>)
  401ede:	4798      	blx	r3
  401ee0:	b9e8      	cbnz	r0, 401f1e <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401ee2:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401ee4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401ee6:	4b17      	ldr	r3, [pc, #92]	; (401f44 <xQueueGenericReceive+0x1b0>)
  401ee8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401eea:	2e00      	cmp	r6, #0
  401eec:	d1d1      	bne.n	401e92 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401eee:	6823      	ldr	r3, [r4, #0]
  401ef0:	2b00      	cmp	r3, #0
  401ef2:	d0c7      	beq.n	401e84 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401ef4:	9901      	ldr	r1, [sp, #4]
  401ef6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401efa:	4b18      	ldr	r3, [pc, #96]	; (401f5c <xQueueGenericReceive+0x1c8>)
  401efc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401efe:	4620      	mov	r0, r4
  401f00:	4b12      	ldr	r3, [pc, #72]	; (401f4c <xQueueGenericReceive+0x1b8>)
  401f02:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401f04:	4b12      	ldr	r3, [pc, #72]	; (401f50 <xQueueGenericReceive+0x1bc>)
  401f06:	4798      	blx	r3
  401f08:	2800      	cmp	r0, #0
  401f0a:	d1c7      	bne.n	401e9c <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401f10:	f8c9 3000 	str.w	r3, [r9]
  401f14:	f3bf 8f4f 	dsb	sy
  401f18:	f3bf 8f6f 	isb	sy
  401f1c:	e7be      	b.n	401e9c <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401f1e:	4620      	mov	r0, r4
  401f20:	4b0a      	ldr	r3, [pc, #40]	; (401f4c <xQueueGenericReceive+0x1b8>)
  401f22:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401f24:	4b0a      	ldr	r3, [pc, #40]	; (401f50 <xQueueGenericReceive+0x1bc>)
  401f26:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401f28:	2000      	movs	r0, #0
  401f2a:	e791      	b.n	401e50 <xQueueGenericReceive+0xbc>
  401f2c:	00402a25 	.word	0x00402a25
  401f30:	00401515 	.word	0x00401515
  401f34:	004018d5 	.word	0x004018d5
  401f38:	00402ba5 	.word	0x00402ba5
  401f3c:	004028bd 	.word	0x004028bd
  401f40:	e000ed04 	.word	0xe000ed04
  401f44:	00401561 	.word	0x00401561
  401f48:	00402a45 	.word	0x00402a45
  401f4c:	004018fd 	.word	0x004018fd
  401f50:	004024a1 	.word	0x004024a1
  401f54:	00402339 	.word	0x00402339
  401f58:	00402985 	.word	0x00402985
  401f5c:	004027b9 	.word	0x004027b9
  401f60:	00402955 	.word	0x00402955

00401f64 <vQueueAddToRegistry>:
	{
  401f64:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401f66:	4b0b      	ldr	r3, [pc, #44]	; (401f94 <vQueueAddToRegistry+0x30>)
  401f68:	681b      	ldr	r3, [r3, #0]
  401f6a:	b153      	cbz	r3, 401f82 <vQueueAddToRegistry+0x1e>
  401f6c:	2301      	movs	r3, #1
  401f6e:	4c09      	ldr	r4, [pc, #36]	; (401f94 <vQueueAddToRegistry+0x30>)
  401f70:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401f74:	b132      	cbz	r2, 401f84 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401f76:	3301      	adds	r3, #1
  401f78:	2b08      	cmp	r3, #8
  401f7a:	d1f9      	bne.n	401f70 <vQueueAddToRegistry+0xc>
	}
  401f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401f80:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401f82:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401f84:	4a03      	ldr	r2, [pc, #12]	; (401f94 <vQueueAddToRegistry+0x30>)
  401f86:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401f8a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401f8e:	6058      	str	r0, [r3, #4]
				break;
  401f90:	e7f4      	b.n	401f7c <vQueueAddToRegistry+0x18>
  401f92:	bf00      	nop
  401f94:	20400df0 	.word	0x20400df0

00401f98 <vQueueWaitForMessageRestricted>:
	{
  401f98:	b570      	push	{r4, r5, r6, lr}
  401f9a:	4604      	mov	r4, r0
  401f9c:	460d      	mov	r5, r1
  401f9e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401fa0:	4b0f      	ldr	r3, [pc, #60]	; (401fe0 <vQueueWaitForMessageRestricted+0x48>)
  401fa2:	4798      	blx	r3
  401fa4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401faa:	d00b      	beq.n	401fc4 <vQueueWaitForMessageRestricted+0x2c>
  401fac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401fae:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fb2:	d00a      	beq.n	401fca <vQueueWaitForMessageRestricted+0x32>
  401fb4:	4b0b      	ldr	r3, [pc, #44]	; (401fe4 <vQueueWaitForMessageRestricted+0x4c>)
  401fb6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401fb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401fba:	b14b      	cbz	r3, 401fd0 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401fbc:	4620      	mov	r0, r4
  401fbe:	4b0a      	ldr	r3, [pc, #40]	; (401fe8 <vQueueWaitForMessageRestricted+0x50>)
  401fc0:	4798      	blx	r3
  401fc2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401fc4:	2300      	movs	r3, #0
  401fc6:	6463      	str	r3, [r4, #68]	; 0x44
  401fc8:	e7f0      	b.n	401fac <vQueueWaitForMessageRestricted+0x14>
  401fca:	2300      	movs	r3, #0
  401fcc:	64a3      	str	r3, [r4, #72]	; 0x48
  401fce:	e7f1      	b.n	401fb4 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401fd0:	4632      	mov	r2, r6
  401fd2:	4629      	mov	r1, r5
  401fd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fd8:	4b04      	ldr	r3, [pc, #16]	; (401fec <vQueueWaitForMessageRestricted+0x54>)
  401fda:	4798      	blx	r3
  401fdc:	e7ee      	b.n	401fbc <vQueueWaitForMessageRestricted+0x24>
  401fde:	bf00      	nop
  401fe0:	00401515 	.word	0x00401515
  401fe4:	00401561 	.word	0x00401561
  401fe8:	004018fd 	.word	0x004018fd
  401fec:	0040283d 	.word	0x0040283d

00401ff0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401ff0:	4b08      	ldr	r3, [pc, #32]	; (402014 <prvResetNextTaskUnblockTime+0x24>)
  401ff2:	681b      	ldr	r3, [r3, #0]
  401ff4:	681b      	ldr	r3, [r3, #0]
  401ff6:	b13b      	cbz	r3, 402008 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401ff8:	4b06      	ldr	r3, [pc, #24]	; (402014 <prvResetNextTaskUnblockTime+0x24>)
  401ffa:	681b      	ldr	r3, [r3, #0]
  401ffc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401ffe:	68db      	ldr	r3, [r3, #12]
  402000:	685a      	ldr	r2, [r3, #4]
  402002:	4b05      	ldr	r3, [pc, #20]	; (402018 <prvResetNextTaskUnblockTime+0x28>)
  402004:	601a      	str	r2, [r3, #0]
  402006:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402008:	f04f 32ff 	mov.w	r2, #4294967295
  40200c:	4b02      	ldr	r3, [pc, #8]	; (402018 <prvResetNextTaskUnblockTime+0x28>)
  40200e:	601a      	str	r2, [r3, #0]
  402010:	4770      	bx	lr
  402012:	bf00      	nop
  402014:	20400c7c 	.word	0x20400c7c
  402018:	20400d28 	.word	0x20400d28

0040201c <prvAddCurrentTaskToDelayedList>:
{
  40201c:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40201e:	4b0f      	ldr	r3, [pc, #60]	; (40205c <prvAddCurrentTaskToDelayedList+0x40>)
  402020:	681b      	ldr	r3, [r3, #0]
  402022:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402024:	4b0e      	ldr	r3, [pc, #56]	; (402060 <prvAddCurrentTaskToDelayedList+0x44>)
  402026:	681b      	ldr	r3, [r3, #0]
  402028:	4298      	cmp	r0, r3
  40202a:	d30e      	bcc.n	40204a <prvAddCurrentTaskToDelayedList+0x2e>
  40202c:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40202e:	4b0d      	ldr	r3, [pc, #52]	; (402064 <prvAddCurrentTaskToDelayedList+0x48>)
  402030:	6818      	ldr	r0, [r3, #0]
  402032:	4b0a      	ldr	r3, [pc, #40]	; (40205c <prvAddCurrentTaskToDelayedList+0x40>)
  402034:	6819      	ldr	r1, [r3, #0]
  402036:	3104      	adds	r1, #4
  402038:	4b0b      	ldr	r3, [pc, #44]	; (402068 <prvAddCurrentTaskToDelayedList+0x4c>)
  40203a:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  40203c:	4b0b      	ldr	r3, [pc, #44]	; (40206c <prvAddCurrentTaskToDelayedList+0x50>)
  40203e:	681b      	ldr	r3, [r3, #0]
  402040:	429c      	cmp	r4, r3
  402042:	d201      	bcs.n	402048 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402044:	4b09      	ldr	r3, [pc, #36]	; (40206c <prvAddCurrentTaskToDelayedList+0x50>)
  402046:	601c      	str	r4, [r3, #0]
  402048:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40204a:	4b09      	ldr	r3, [pc, #36]	; (402070 <prvAddCurrentTaskToDelayedList+0x54>)
  40204c:	6818      	ldr	r0, [r3, #0]
  40204e:	4b03      	ldr	r3, [pc, #12]	; (40205c <prvAddCurrentTaskToDelayedList+0x40>)
  402050:	6819      	ldr	r1, [r3, #0]
  402052:	3104      	adds	r1, #4
  402054:	4b04      	ldr	r3, [pc, #16]	; (402068 <prvAddCurrentTaskToDelayedList+0x4c>)
  402056:	4798      	blx	r3
  402058:	bd10      	pop	{r4, pc}
  40205a:	bf00      	nop
  40205c:	20400c78 	.word	0x20400c78
  402060:	20400d70 	.word	0x20400d70
  402064:	20400c7c 	.word	0x20400c7c
  402068:	004013fd 	.word	0x004013fd
  40206c:	20400d28 	.word	0x20400d28
  402070:	20400c80 	.word	0x20400c80

00402074 <xTaskGenericCreate>:
{
  402074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402078:	b083      	sub	sp, #12
  40207a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40207c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402080:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402082:	b160      	cbz	r0, 40209e <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402084:	2d04      	cmp	r5, #4
  402086:	d915      	bls.n	4020b4 <xTaskGenericCreate+0x40>
  402088:	f04f 0380 	mov.w	r3, #128	; 0x80
  40208c:	b672      	cpsid	i
  40208e:	f383 8811 	msr	BASEPRI, r3
  402092:	f3bf 8f6f 	isb	sy
  402096:	f3bf 8f4f 	dsb	sy
  40209a:	b662      	cpsie	i
  40209c:	e7fe      	b.n	40209c <xTaskGenericCreate+0x28>
  40209e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a2:	b672      	cpsid	i
  4020a4:	f383 8811 	msr	BASEPRI, r3
  4020a8:	f3bf 8f6f 	isb	sy
  4020ac:	f3bf 8f4f 	dsb	sy
  4020b0:	b662      	cpsie	i
  4020b2:	e7fe      	b.n	4020b2 <xTaskGenericCreate+0x3e>
  4020b4:	9001      	str	r0, [sp, #4]
  4020b6:	4698      	mov	r8, r3
  4020b8:	4691      	mov	r9, r2
  4020ba:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4020bc:	b936      	cbnz	r6, 4020cc <xTaskGenericCreate+0x58>
  4020be:	0090      	lsls	r0, r2, #2
  4020c0:	4b62      	ldr	r3, [pc, #392]	; (40224c <xTaskGenericCreate+0x1d8>)
  4020c2:	4798      	blx	r3
		if( pxStack != NULL )
  4020c4:	4606      	mov	r6, r0
  4020c6:	2800      	cmp	r0, #0
  4020c8:	f000 809e 	beq.w	402208 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  4020cc:	2058      	movs	r0, #88	; 0x58
  4020ce:	4b5f      	ldr	r3, [pc, #380]	; (40224c <xTaskGenericCreate+0x1d8>)
  4020d0:	4798      	blx	r3
			if( pxNewTCB != NULL )
  4020d2:	4604      	mov	r4, r0
  4020d4:	2800      	cmp	r0, #0
  4020d6:	f000 8094 	beq.w	402202 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  4020da:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  4020dc:	ea4f 0289 	mov.w	r2, r9, lsl #2
  4020e0:	21a5      	movs	r1, #165	; 0xa5
  4020e2:	4630      	mov	r0, r6
  4020e4:	4b5a      	ldr	r3, [pc, #360]	; (402250 <xTaskGenericCreate+0x1dc>)
  4020e6:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4020e8:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  4020ec:	444e      	add	r6, r9
  4020ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4020f0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4020f4:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4020f8:	783b      	ldrb	r3, [r7, #0]
  4020fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  4020fe:	783b      	ldrb	r3, [r7, #0]
  402100:	2b00      	cmp	r3, #0
  402102:	f040 8084 	bne.w	40220e <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402106:	2700      	movs	r7, #0
  402108:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  40210c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40210e:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402110:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402112:	f104 0904 	add.w	r9, r4, #4
  402116:	4648      	mov	r0, r9
  402118:	f8df b184 	ldr.w	fp, [pc, #388]	; 4022a0 <xTaskGenericCreate+0x22c>
  40211c:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  40211e:	f104 0018 	add.w	r0, r4, #24
  402122:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402124:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402126:	f1c5 0305 	rsb	r3, r5, #5
  40212a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40212c:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  40212e:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402130:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402134:	4642      	mov	r2, r8
  402136:	9901      	ldr	r1, [sp, #4]
  402138:	4630      	mov	r0, r6
  40213a:	4b46      	ldr	r3, [pc, #280]	; (402254 <xTaskGenericCreate+0x1e0>)
  40213c:	4798      	blx	r3
  40213e:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402140:	f1ba 0f00 	cmp.w	sl, #0
  402144:	d001      	beq.n	40214a <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402146:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  40214a:	4b43      	ldr	r3, [pc, #268]	; (402258 <xTaskGenericCreate+0x1e4>)
  40214c:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  40214e:	4a43      	ldr	r2, [pc, #268]	; (40225c <xTaskGenericCreate+0x1e8>)
  402150:	6813      	ldr	r3, [r2, #0]
  402152:	3301      	adds	r3, #1
  402154:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402156:	4b42      	ldr	r3, [pc, #264]	; (402260 <xTaskGenericCreate+0x1ec>)
  402158:	681b      	ldr	r3, [r3, #0]
  40215a:	2b00      	cmp	r3, #0
  40215c:	d166      	bne.n	40222c <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  40215e:	4b40      	ldr	r3, [pc, #256]	; (402260 <xTaskGenericCreate+0x1ec>)
  402160:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402162:	6813      	ldr	r3, [r2, #0]
  402164:	2b01      	cmp	r3, #1
  402166:	d121      	bne.n	4021ac <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402168:	4f3e      	ldr	r7, [pc, #248]	; (402264 <xTaskGenericCreate+0x1f0>)
  40216a:	4638      	mov	r0, r7
  40216c:	4e3e      	ldr	r6, [pc, #248]	; (402268 <xTaskGenericCreate+0x1f4>)
  40216e:	47b0      	blx	r6
  402170:	f107 0014 	add.w	r0, r7, #20
  402174:	47b0      	blx	r6
  402176:	f107 0028 	add.w	r0, r7, #40	; 0x28
  40217a:	47b0      	blx	r6
  40217c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402180:	47b0      	blx	r6
  402182:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402186:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402188:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4022a4 <xTaskGenericCreate+0x230>
  40218c:	4640      	mov	r0, r8
  40218e:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402190:	4f36      	ldr	r7, [pc, #216]	; (40226c <xTaskGenericCreate+0x1f8>)
  402192:	4638      	mov	r0, r7
  402194:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402196:	4836      	ldr	r0, [pc, #216]	; (402270 <xTaskGenericCreate+0x1fc>)
  402198:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  40219a:	4836      	ldr	r0, [pc, #216]	; (402274 <xTaskGenericCreate+0x200>)
  40219c:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  40219e:	4836      	ldr	r0, [pc, #216]	; (402278 <xTaskGenericCreate+0x204>)
  4021a0:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  4021a2:	4b36      	ldr	r3, [pc, #216]	; (40227c <xTaskGenericCreate+0x208>)
  4021a4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4021a8:	4b35      	ldr	r3, [pc, #212]	; (402280 <xTaskGenericCreate+0x20c>)
  4021aa:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  4021ac:	4a35      	ldr	r2, [pc, #212]	; (402284 <xTaskGenericCreate+0x210>)
  4021ae:	6813      	ldr	r3, [r2, #0]
  4021b0:	3301      	adds	r3, #1
  4021b2:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4021b4:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  4021b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4021b8:	4a33      	ldr	r2, [pc, #204]	; (402288 <xTaskGenericCreate+0x214>)
  4021ba:	6811      	ldr	r1, [r2, #0]
  4021bc:	2301      	movs	r3, #1
  4021be:	4083      	lsls	r3, r0
  4021c0:	430b      	orrs	r3, r1
  4021c2:	6013      	str	r3, [r2, #0]
  4021c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021c8:	4649      	mov	r1, r9
  4021ca:	4b26      	ldr	r3, [pc, #152]	; (402264 <xTaskGenericCreate+0x1f0>)
  4021cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021d0:	4b2e      	ldr	r3, [pc, #184]	; (40228c <xTaskGenericCreate+0x218>)
  4021d2:	4798      	blx	r3
		taskEXIT_CRITICAL();
  4021d4:	4b2e      	ldr	r3, [pc, #184]	; (402290 <xTaskGenericCreate+0x21c>)
  4021d6:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  4021d8:	4b2e      	ldr	r3, [pc, #184]	; (402294 <xTaskGenericCreate+0x220>)
  4021da:	681b      	ldr	r3, [r3, #0]
  4021dc:	2b00      	cmp	r3, #0
  4021de:	d031      	beq.n	402244 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  4021e0:	4b1f      	ldr	r3, [pc, #124]	; (402260 <xTaskGenericCreate+0x1ec>)
  4021e2:	681b      	ldr	r3, [r3, #0]
  4021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4021e6:	429d      	cmp	r5, r3
  4021e8:	d92e      	bls.n	402248 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  4021ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4021ee:	4b2a      	ldr	r3, [pc, #168]	; (402298 <xTaskGenericCreate+0x224>)
  4021f0:	601a      	str	r2, [r3, #0]
  4021f2:	f3bf 8f4f 	dsb	sy
  4021f6:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  4021fa:	2001      	movs	r0, #1
}
  4021fc:	b003      	add	sp, #12
  4021fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402202:	4630      	mov	r0, r6
  402204:	4b25      	ldr	r3, [pc, #148]	; (40229c <xTaskGenericCreate+0x228>)
  402206:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402208:	f04f 30ff 	mov.w	r0, #4294967295
  40220c:	e7f6      	b.n	4021fc <xTaskGenericCreate+0x188>
  40220e:	463b      	mov	r3, r7
  402210:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402214:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402216:	7859      	ldrb	r1, [r3, #1]
  402218:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40221c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402220:	2900      	cmp	r1, #0
  402222:	f43f af70 	beq.w	402106 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402226:	42bb      	cmp	r3, r7
  402228:	d1f5      	bne.n	402216 <xTaskGenericCreate+0x1a2>
  40222a:	e76c      	b.n	402106 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  40222c:	4b19      	ldr	r3, [pc, #100]	; (402294 <xTaskGenericCreate+0x220>)
  40222e:	681b      	ldr	r3, [r3, #0]
  402230:	2b00      	cmp	r3, #0
  402232:	d1bb      	bne.n	4021ac <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402234:	4b0a      	ldr	r3, [pc, #40]	; (402260 <xTaskGenericCreate+0x1ec>)
  402236:	681b      	ldr	r3, [r3, #0]
  402238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40223a:	429d      	cmp	r5, r3
  40223c:	d3b6      	bcc.n	4021ac <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  40223e:	4b08      	ldr	r3, [pc, #32]	; (402260 <xTaskGenericCreate+0x1ec>)
  402240:	601c      	str	r4, [r3, #0]
  402242:	e7b3      	b.n	4021ac <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402244:	2001      	movs	r0, #1
  402246:	e7d9      	b.n	4021fc <xTaskGenericCreate+0x188>
  402248:	2001      	movs	r0, #1
	return xReturn;
  40224a:	e7d7      	b.n	4021fc <xTaskGenericCreate+0x188>
  40224c:	00401771 	.word	0x00401771
  402250:	00403f69 	.word	0x00403f69
  402254:	004014c9 	.word	0x004014c9
  402258:	00401515 	.word	0x00401515
  40225c:	20400ce8 	.word	0x20400ce8
  402260:	20400c78 	.word	0x20400c78
  402264:	20400c84 	.word	0x20400c84
  402268:	004013c9 	.word	0x004013c9
  40226c:	20400d14 	.word	0x20400d14
  402270:	20400d30 	.word	0x20400d30
  402274:	20400d5c 	.word	0x20400d5c
  402278:	20400d48 	.word	0x20400d48
  40227c:	20400c7c 	.word	0x20400c7c
  402280:	20400c80 	.word	0x20400c80
  402284:	20400cf4 	.word	0x20400cf4
  402288:	20400cfc 	.word	0x20400cfc
  40228c:	004013e5 	.word	0x004013e5
  402290:	00401561 	.word	0x00401561
  402294:	20400d44 	.word	0x20400d44
  402298:	e000ed04 	.word	0xe000ed04
  40229c:	004017a1 	.word	0x004017a1
  4022a0:	004013df 	.word	0x004013df
  4022a4:	20400d00 	.word	0x20400d00

004022a8 <vTaskStartScheduler>:
{
  4022a8:	b510      	push	{r4, lr}
  4022aa:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4022ac:	2300      	movs	r3, #0
  4022ae:	9303      	str	r3, [sp, #12]
  4022b0:	9302      	str	r3, [sp, #8]
  4022b2:	9301      	str	r3, [sp, #4]
  4022b4:	9300      	str	r3, [sp, #0]
  4022b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4022ba:	4917      	ldr	r1, [pc, #92]	; (402318 <vTaskStartScheduler+0x70>)
  4022bc:	4817      	ldr	r0, [pc, #92]	; (40231c <vTaskStartScheduler+0x74>)
  4022be:	4c18      	ldr	r4, [pc, #96]	; (402320 <vTaskStartScheduler+0x78>)
  4022c0:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4022c2:	2801      	cmp	r0, #1
  4022c4:	d00b      	beq.n	4022de <vTaskStartScheduler+0x36>
		configASSERT( xReturn );
  4022c6:	bb20      	cbnz	r0, 402312 <vTaskStartScheduler+0x6a>
  4022c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022cc:	b672      	cpsid	i
  4022ce:	f383 8811 	msr	BASEPRI, r3
  4022d2:	f3bf 8f6f 	isb	sy
  4022d6:	f3bf 8f4f 	dsb	sy
  4022da:	b662      	cpsie	i
  4022dc:	e7fe      	b.n	4022dc <vTaskStartScheduler+0x34>
			xReturn = xTimerCreateTimerTask();
  4022de:	4b11      	ldr	r3, [pc, #68]	; (402324 <vTaskStartScheduler+0x7c>)
  4022e0:	4798      	blx	r3
	if( xReturn == pdPASS )
  4022e2:	2801      	cmp	r0, #1
  4022e4:	d1ef      	bne.n	4022c6 <vTaskStartScheduler+0x1e>
  4022e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ea:	b672      	cpsid	i
  4022ec:	f383 8811 	msr	BASEPRI, r3
  4022f0:	f3bf 8f6f 	isb	sy
  4022f4:	f3bf 8f4f 	dsb	sy
  4022f8:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  4022fa:	f04f 32ff 	mov.w	r2, #4294967295
  4022fe:	4b0a      	ldr	r3, [pc, #40]	; (402328 <vTaskStartScheduler+0x80>)
  402300:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402302:	2201      	movs	r2, #1
  402304:	4b09      	ldr	r3, [pc, #36]	; (40232c <vTaskStartScheduler+0x84>)
  402306:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402308:	2200      	movs	r2, #0
  40230a:	4b09      	ldr	r3, [pc, #36]	; (402330 <vTaskStartScheduler+0x88>)
  40230c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40230e:	4b09      	ldr	r3, [pc, #36]	; (402334 <vTaskStartScheduler+0x8c>)
  402310:	4798      	blx	r3
}
  402312:	b004      	add	sp, #16
  402314:	bd10      	pop	{r4, pc}
  402316:	bf00      	nop
  402318:	00409f1c 	.word	0x00409f1c
  40231c:	00402651 	.word	0x00402651
  402320:	00402075 	.word	0x00402075
  402324:	00402c91 	.word	0x00402c91
  402328:	20400d28 	.word	0x20400d28
  40232c:	20400d44 	.word	0x20400d44
  402330:	20400d70 	.word	0x20400d70
  402334:	00401649 	.word	0x00401649

00402338 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402338:	4a02      	ldr	r2, [pc, #8]	; (402344 <vTaskSuspendAll+0xc>)
  40233a:	6813      	ldr	r3, [r2, #0]
  40233c:	3301      	adds	r3, #1
  40233e:	6013      	str	r3, [r2, #0]
  402340:	4770      	bx	lr
  402342:	bf00      	nop
  402344:	20400cf0 	.word	0x20400cf0

00402348 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402348:	4b01      	ldr	r3, [pc, #4]	; (402350 <xTaskGetTickCount+0x8>)
  40234a:	6818      	ldr	r0, [r3, #0]
}
  40234c:	4770      	bx	lr
  40234e:	bf00      	nop
  402350:	20400d70 	.word	0x20400d70

00402354 <xTaskIncrementTick>:
{
  402354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402358:	4b42      	ldr	r3, [pc, #264]	; (402464 <xTaskIncrementTick+0x110>)
  40235a:	681b      	ldr	r3, [r3, #0]
  40235c:	2b00      	cmp	r3, #0
  40235e:	d178      	bne.n	402452 <xTaskIncrementTick+0xfe>
		++xTickCount;
  402360:	4b41      	ldr	r3, [pc, #260]	; (402468 <xTaskIncrementTick+0x114>)
  402362:	681a      	ldr	r2, [r3, #0]
  402364:	3201      	adds	r2, #1
  402366:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402368:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40236a:	b9d6      	cbnz	r6, 4023a2 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  40236c:	4b3f      	ldr	r3, [pc, #252]	; (40246c <xTaskIncrementTick+0x118>)
  40236e:	681b      	ldr	r3, [r3, #0]
  402370:	681b      	ldr	r3, [r3, #0]
  402372:	b153      	cbz	r3, 40238a <xTaskIncrementTick+0x36>
  402374:	f04f 0380 	mov.w	r3, #128	; 0x80
  402378:	b672      	cpsid	i
  40237a:	f383 8811 	msr	BASEPRI, r3
  40237e:	f3bf 8f6f 	isb	sy
  402382:	f3bf 8f4f 	dsb	sy
  402386:	b662      	cpsie	i
  402388:	e7fe      	b.n	402388 <xTaskIncrementTick+0x34>
  40238a:	4a38      	ldr	r2, [pc, #224]	; (40246c <xTaskIncrementTick+0x118>)
  40238c:	6811      	ldr	r1, [r2, #0]
  40238e:	4b38      	ldr	r3, [pc, #224]	; (402470 <xTaskIncrementTick+0x11c>)
  402390:	6818      	ldr	r0, [r3, #0]
  402392:	6010      	str	r0, [r2, #0]
  402394:	6019      	str	r1, [r3, #0]
  402396:	4a37      	ldr	r2, [pc, #220]	; (402474 <xTaskIncrementTick+0x120>)
  402398:	6813      	ldr	r3, [r2, #0]
  40239a:	3301      	adds	r3, #1
  40239c:	6013      	str	r3, [r2, #0]
  40239e:	4b36      	ldr	r3, [pc, #216]	; (402478 <xTaskIncrementTick+0x124>)
  4023a0:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4023a2:	4b36      	ldr	r3, [pc, #216]	; (40247c <xTaskIncrementTick+0x128>)
  4023a4:	681b      	ldr	r3, [r3, #0]
  4023a6:	429e      	cmp	r6, r3
  4023a8:	d218      	bcs.n	4023dc <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  4023aa:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4023ac:	4b34      	ldr	r3, [pc, #208]	; (402480 <xTaskIncrementTick+0x12c>)
  4023ae:	681b      	ldr	r3, [r3, #0]
  4023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4023b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4023b6:	4a33      	ldr	r2, [pc, #204]	; (402484 <xTaskIncrementTick+0x130>)
  4023b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  4023bc:	2b02      	cmp	r3, #2
  4023be:	bf28      	it	cs
  4023c0:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4023c2:	4b31      	ldr	r3, [pc, #196]	; (402488 <xTaskIncrementTick+0x134>)
  4023c4:	681b      	ldr	r3, [r3, #0]
  4023c6:	b90b      	cbnz	r3, 4023cc <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  4023c8:	4b30      	ldr	r3, [pc, #192]	; (40248c <xTaskIncrementTick+0x138>)
  4023ca:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4023cc:	4b30      	ldr	r3, [pc, #192]	; (402490 <xTaskIncrementTick+0x13c>)
  4023ce:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4023d0:	2b00      	cmp	r3, #0
}
  4023d2:	bf0c      	ite	eq
  4023d4:	4620      	moveq	r0, r4
  4023d6:	2001      	movne	r0, #1
  4023d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4023dc:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4023de:	f8df 908c 	ldr.w	r9, [pc, #140]	; 40246c <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4023e2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 40249c <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4023e6:	4f2b      	ldr	r7, [pc, #172]	; (402494 <xTaskIncrementTick+0x140>)
  4023e8:	e01f      	b.n	40242a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4023ea:	f04f 32ff 	mov.w	r2, #4294967295
  4023ee:	4b23      	ldr	r3, [pc, #140]	; (40247c <xTaskIncrementTick+0x128>)
  4023f0:	601a      	str	r2, [r3, #0]
						break;
  4023f2:	e7db      	b.n	4023ac <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4023f4:	4a21      	ldr	r2, [pc, #132]	; (40247c <xTaskIncrementTick+0x128>)
  4023f6:	6013      	str	r3, [r2, #0]
							break;
  4023f8:	e7d8      	b.n	4023ac <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4023fa:	f105 0018 	add.w	r0, r5, #24
  4023fe:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402400:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402402:	683a      	ldr	r2, [r7, #0]
  402404:	2301      	movs	r3, #1
  402406:	4083      	lsls	r3, r0
  402408:	4313      	orrs	r3, r2
  40240a:	603b      	str	r3, [r7, #0]
  40240c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402410:	4651      	mov	r1, sl
  402412:	4b1c      	ldr	r3, [pc, #112]	; (402484 <xTaskIncrementTick+0x130>)
  402414:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402418:	4b1f      	ldr	r3, [pc, #124]	; (402498 <xTaskIncrementTick+0x144>)
  40241a:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40241c:	4b18      	ldr	r3, [pc, #96]	; (402480 <xTaskIncrementTick+0x12c>)
  40241e:	681b      	ldr	r3, [r3, #0]
  402420:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402424:	429a      	cmp	r2, r3
  402426:	bf28      	it	cs
  402428:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40242a:	f8d9 3000 	ldr.w	r3, [r9]
  40242e:	681b      	ldr	r3, [r3, #0]
  402430:	2b00      	cmp	r3, #0
  402432:	d0da      	beq.n	4023ea <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402434:	f8d9 3000 	ldr.w	r3, [r9]
  402438:	68db      	ldr	r3, [r3, #12]
  40243a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40243c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40243e:	429e      	cmp	r6, r3
  402440:	d3d8      	bcc.n	4023f4 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402442:	f105 0a04 	add.w	sl, r5, #4
  402446:	4650      	mov	r0, sl
  402448:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40244a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40244c:	2b00      	cmp	r3, #0
  40244e:	d1d4      	bne.n	4023fa <xTaskIncrementTick+0xa6>
  402450:	e7d6      	b.n	402400 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402452:	4a0d      	ldr	r2, [pc, #52]	; (402488 <xTaskIncrementTick+0x134>)
  402454:	6813      	ldr	r3, [r2, #0]
  402456:	3301      	adds	r3, #1
  402458:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40245a:	4b0c      	ldr	r3, [pc, #48]	; (40248c <xTaskIncrementTick+0x138>)
  40245c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40245e:	2400      	movs	r4, #0
  402460:	e7b4      	b.n	4023cc <xTaskIncrementTick+0x78>
  402462:	bf00      	nop
  402464:	20400cf0 	.word	0x20400cf0
  402468:	20400d70 	.word	0x20400d70
  40246c:	20400c7c 	.word	0x20400c7c
  402470:	20400c80 	.word	0x20400c80
  402474:	20400d2c 	.word	0x20400d2c
  402478:	00401ff1 	.word	0x00401ff1
  40247c:	20400d28 	.word	0x20400d28
  402480:	20400c78 	.word	0x20400c78
  402484:	20400c84 	.word	0x20400c84
  402488:	20400cec 	.word	0x20400cec
  40248c:	004035dd 	.word	0x004035dd
  402490:	20400d74 	.word	0x20400d74
  402494:	20400cfc 	.word	0x20400cfc
  402498:	004013e5 	.word	0x004013e5
  40249c:	00401431 	.word	0x00401431

004024a0 <xTaskResumeAll>:
{
  4024a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  4024a4:	4b38      	ldr	r3, [pc, #224]	; (402588 <xTaskResumeAll+0xe8>)
  4024a6:	681b      	ldr	r3, [r3, #0]
  4024a8:	b953      	cbnz	r3, 4024c0 <xTaskResumeAll+0x20>
  4024aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024ae:	b672      	cpsid	i
  4024b0:	f383 8811 	msr	BASEPRI, r3
  4024b4:	f3bf 8f6f 	isb	sy
  4024b8:	f3bf 8f4f 	dsb	sy
  4024bc:	b662      	cpsie	i
  4024be:	e7fe      	b.n	4024be <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  4024c0:	4b32      	ldr	r3, [pc, #200]	; (40258c <xTaskResumeAll+0xec>)
  4024c2:	4798      	blx	r3
		--uxSchedulerSuspended;
  4024c4:	4b30      	ldr	r3, [pc, #192]	; (402588 <xTaskResumeAll+0xe8>)
  4024c6:	681a      	ldr	r2, [r3, #0]
  4024c8:	3a01      	subs	r2, #1
  4024ca:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4024cc:	681b      	ldr	r3, [r3, #0]
  4024ce:	2b00      	cmp	r3, #0
  4024d0:	d155      	bne.n	40257e <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4024d2:	4b2f      	ldr	r3, [pc, #188]	; (402590 <xTaskResumeAll+0xf0>)
  4024d4:	681b      	ldr	r3, [r3, #0]
  4024d6:	2b00      	cmp	r3, #0
  4024d8:	d132      	bne.n	402540 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4024da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4024dc:	4b2d      	ldr	r3, [pc, #180]	; (402594 <xTaskResumeAll+0xf4>)
  4024de:	4798      	blx	r3
}
  4024e0:	4620      	mov	r0, r4
  4024e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4024e6:	68fb      	ldr	r3, [r7, #12]
  4024e8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4024ea:	f104 0018 	add.w	r0, r4, #24
  4024ee:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4024f0:	f104 0804 	add.w	r8, r4, #4
  4024f4:	4640      	mov	r0, r8
  4024f6:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4024f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4024fa:	682a      	ldr	r2, [r5, #0]
  4024fc:	2301      	movs	r3, #1
  4024fe:	4083      	lsls	r3, r0
  402500:	4313      	orrs	r3, r2
  402502:	602b      	str	r3, [r5, #0]
  402504:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402508:	4641      	mov	r1, r8
  40250a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40250e:	4b22      	ldr	r3, [pc, #136]	; (402598 <xTaskResumeAll+0xf8>)
  402510:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402512:	4b22      	ldr	r3, [pc, #136]	; (40259c <xTaskResumeAll+0xfc>)
  402514:	681b      	ldr	r3, [r3, #0]
  402516:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40251a:	429a      	cmp	r2, r3
  40251c:	d20c      	bcs.n	402538 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40251e:	683b      	ldr	r3, [r7, #0]
  402520:	2b00      	cmp	r3, #0
  402522:	d1e0      	bne.n	4024e6 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402524:	4b1e      	ldr	r3, [pc, #120]	; (4025a0 <xTaskResumeAll+0x100>)
  402526:	681b      	ldr	r3, [r3, #0]
  402528:	b1db      	cbz	r3, 402562 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40252a:	4b1d      	ldr	r3, [pc, #116]	; (4025a0 <xTaskResumeAll+0x100>)
  40252c:	681b      	ldr	r3, [r3, #0]
  40252e:	b1c3      	cbz	r3, 402562 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402530:	4e1c      	ldr	r6, [pc, #112]	; (4025a4 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402532:	4d1d      	ldr	r5, [pc, #116]	; (4025a8 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402534:	4c1a      	ldr	r4, [pc, #104]	; (4025a0 <xTaskResumeAll+0x100>)
  402536:	e00e      	b.n	402556 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402538:	2201      	movs	r2, #1
  40253a:	4b1b      	ldr	r3, [pc, #108]	; (4025a8 <xTaskResumeAll+0x108>)
  40253c:	601a      	str	r2, [r3, #0]
  40253e:	e7ee      	b.n	40251e <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402540:	4f1a      	ldr	r7, [pc, #104]	; (4025ac <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402542:	4e1b      	ldr	r6, [pc, #108]	; (4025b0 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402544:	4d1b      	ldr	r5, [pc, #108]	; (4025b4 <xTaskResumeAll+0x114>)
  402546:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4025bc <xTaskResumeAll+0x11c>
  40254a:	e7e8      	b.n	40251e <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  40254c:	6823      	ldr	r3, [r4, #0]
  40254e:	3b01      	subs	r3, #1
  402550:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402552:	6823      	ldr	r3, [r4, #0]
  402554:	b12b      	cbz	r3, 402562 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402556:	47b0      	blx	r6
  402558:	2800      	cmp	r0, #0
  40255a:	d0f7      	beq.n	40254c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  40255c:	2301      	movs	r3, #1
  40255e:	602b      	str	r3, [r5, #0]
  402560:	e7f4      	b.n	40254c <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402562:	4b11      	ldr	r3, [pc, #68]	; (4025a8 <xTaskResumeAll+0x108>)
  402564:	681b      	ldr	r3, [r3, #0]
  402566:	2b01      	cmp	r3, #1
  402568:	d10b      	bne.n	402582 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40256a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40256e:	4b12      	ldr	r3, [pc, #72]	; (4025b8 <xTaskResumeAll+0x118>)
  402570:	601a      	str	r2, [r3, #0]
  402572:	f3bf 8f4f 	dsb	sy
  402576:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40257a:	2401      	movs	r4, #1
  40257c:	e7ae      	b.n	4024dc <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40257e:	2400      	movs	r4, #0
  402580:	e7ac      	b.n	4024dc <xTaskResumeAll+0x3c>
  402582:	2400      	movs	r4, #0
  402584:	e7aa      	b.n	4024dc <xTaskResumeAll+0x3c>
  402586:	bf00      	nop
  402588:	20400cf0 	.word	0x20400cf0
  40258c:	00401515 	.word	0x00401515
  402590:	20400ce8 	.word	0x20400ce8
  402594:	00401561 	.word	0x00401561
  402598:	004013e5 	.word	0x004013e5
  40259c:	20400c78 	.word	0x20400c78
  4025a0:	20400cec 	.word	0x20400cec
  4025a4:	00402355 	.word	0x00402355
  4025a8:	20400d74 	.word	0x20400d74
  4025ac:	20400d30 	.word	0x20400d30
  4025b0:	00401431 	.word	0x00401431
  4025b4:	20400cfc 	.word	0x20400cfc
  4025b8:	e000ed04 	.word	0xe000ed04
  4025bc:	20400c84 	.word	0x20400c84

004025c0 <vTaskDelay>:
	{
  4025c0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4025c2:	2800      	cmp	r0, #0
  4025c4:	d029      	beq.n	40261a <vTaskDelay+0x5a>
  4025c6:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4025c8:	4b18      	ldr	r3, [pc, #96]	; (40262c <vTaskDelay+0x6c>)
  4025ca:	681b      	ldr	r3, [r3, #0]
  4025cc:	b153      	cbz	r3, 4025e4 <vTaskDelay+0x24>
  4025ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025d2:	b672      	cpsid	i
  4025d4:	f383 8811 	msr	BASEPRI, r3
  4025d8:	f3bf 8f6f 	isb	sy
  4025dc:	f3bf 8f4f 	dsb	sy
  4025e0:	b662      	cpsie	i
  4025e2:	e7fe      	b.n	4025e2 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4025e4:	4b12      	ldr	r3, [pc, #72]	; (402630 <vTaskDelay+0x70>)
  4025e6:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4025e8:	4b12      	ldr	r3, [pc, #72]	; (402634 <vTaskDelay+0x74>)
  4025ea:	681b      	ldr	r3, [r3, #0]
  4025ec:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4025ee:	4b12      	ldr	r3, [pc, #72]	; (402638 <vTaskDelay+0x78>)
  4025f0:	6818      	ldr	r0, [r3, #0]
  4025f2:	3004      	adds	r0, #4
  4025f4:	4b11      	ldr	r3, [pc, #68]	; (40263c <vTaskDelay+0x7c>)
  4025f6:	4798      	blx	r3
  4025f8:	b948      	cbnz	r0, 40260e <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4025fa:	4b0f      	ldr	r3, [pc, #60]	; (402638 <vTaskDelay+0x78>)
  4025fc:	681a      	ldr	r2, [r3, #0]
  4025fe:	4910      	ldr	r1, [pc, #64]	; (402640 <vTaskDelay+0x80>)
  402600:	680b      	ldr	r3, [r1, #0]
  402602:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402604:	2201      	movs	r2, #1
  402606:	4082      	lsls	r2, r0
  402608:	ea23 0302 	bic.w	r3, r3, r2
  40260c:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40260e:	4620      	mov	r0, r4
  402610:	4b0c      	ldr	r3, [pc, #48]	; (402644 <vTaskDelay+0x84>)
  402612:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402614:	4b0c      	ldr	r3, [pc, #48]	; (402648 <vTaskDelay+0x88>)
  402616:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402618:	b938      	cbnz	r0, 40262a <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  40261a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40261e:	4b0b      	ldr	r3, [pc, #44]	; (40264c <vTaskDelay+0x8c>)
  402620:	601a      	str	r2, [r3, #0]
  402622:	f3bf 8f4f 	dsb	sy
  402626:	f3bf 8f6f 	isb	sy
  40262a:	bd10      	pop	{r4, pc}
  40262c:	20400cf0 	.word	0x20400cf0
  402630:	00402339 	.word	0x00402339
  402634:	20400d70 	.word	0x20400d70
  402638:	20400c78 	.word	0x20400c78
  40263c:	00401431 	.word	0x00401431
  402640:	20400cfc 	.word	0x20400cfc
  402644:	0040201d 	.word	0x0040201d
  402648:	004024a1 	.word	0x004024a1
  40264c:	e000ed04 	.word	0xe000ed04

00402650 <prvIdleTask>:
{
  402650:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402652:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4026dc <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402656:	4e19      	ldr	r6, [pc, #100]	; (4026bc <prvIdleTask+0x6c>)
				taskYIELD();
  402658:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4026e0 <prvIdleTask+0x90>
  40265c:	e02a      	b.n	4026b4 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40265e:	4b18      	ldr	r3, [pc, #96]	; (4026c0 <prvIdleTask+0x70>)
  402660:	681b      	ldr	r3, [r3, #0]
  402662:	2b01      	cmp	r3, #1
  402664:	d81e      	bhi.n	4026a4 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402666:	682b      	ldr	r3, [r5, #0]
  402668:	2b00      	cmp	r3, #0
  40266a:	d0f8      	beq.n	40265e <prvIdleTask+0xe>
			vTaskSuspendAll();
  40266c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40266e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402670:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402672:	2c00      	cmp	r4, #0
  402674:	d0f7      	beq.n	402666 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402676:	4b13      	ldr	r3, [pc, #76]	; (4026c4 <prvIdleTask+0x74>)
  402678:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40267a:	68f3      	ldr	r3, [r6, #12]
  40267c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40267e:	1d20      	adds	r0, r4, #4
  402680:	4b11      	ldr	r3, [pc, #68]	; (4026c8 <prvIdleTask+0x78>)
  402682:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402684:	4a11      	ldr	r2, [pc, #68]	; (4026cc <prvIdleTask+0x7c>)
  402686:	6813      	ldr	r3, [r2, #0]
  402688:	3b01      	subs	r3, #1
  40268a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  40268c:	682b      	ldr	r3, [r5, #0]
  40268e:	3b01      	subs	r3, #1
  402690:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402692:	4b0f      	ldr	r3, [pc, #60]	; (4026d0 <prvIdleTask+0x80>)
  402694:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402696:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402698:	f8df a048 	ldr.w	sl, [pc, #72]	; 4026e4 <prvIdleTask+0x94>
  40269c:	47d0      	blx	sl
		vPortFree( pxTCB );
  40269e:	4620      	mov	r0, r4
  4026a0:	47d0      	blx	sl
  4026a2:	e7e0      	b.n	402666 <prvIdleTask+0x16>
				taskYIELD();
  4026a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4026a8:	f8c9 3000 	str.w	r3, [r9]
  4026ac:	f3bf 8f4f 	dsb	sy
  4026b0:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4026b4:	4d07      	ldr	r5, [pc, #28]	; (4026d4 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4026b6:	4f08      	ldr	r7, [pc, #32]	; (4026d8 <prvIdleTask+0x88>)
  4026b8:	e7d5      	b.n	402666 <prvIdleTask+0x16>
  4026ba:	bf00      	nop
  4026bc:	20400d5c 	.word	0x20400d5c
  4026c0:	20400c84 	.word	0x20400c84
  4026c4:	00401515 	.word	0x00401515
  4026c8:	00401431 	.word	0x00401431
  4026cc:	20400ce8 	.word	0x20400ce8
  4026d0:	00401561 	.word	0x00401561
  4026d4:	20400cf8 	.word	0x20400cf8
  4026d8:	004024a1 	.word	0x004024a1
  4026dc:	00402339 	.word	0x00402339
  4026e0:	e000ed04 	.word	0xe000ed04
  4026e4:	004017a1 	.word	0x004017a1

004026e8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4026e8:	4b2d      	ldr	r3, [pc, #180]	; (4027a0 <vTaskSwitchContext+0xb8>)
  4026ea:	681b      	ldr	r3, [r3, #0]
  4026ec:	2b00      	cmp	r3, #0
  4026ee:	d12c      	bne.n	40274a <vTaskSwitchContext+0x62>
{
  4026f0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4026f2:	2200      	movs	r2, #0
  4026f4:	4b2b      	ldr	r3, [pc, #172]	; (4027a4 <vTaskSwitchContext+0xbc>)
  4026f6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4026f8:	4b2b      	ldr	r3, [pc, #172]	; (4027a8 <vTaskSwitchContext+0xc0>)
  4026fa:	681b      	ldr	r3, [r3, #0]
  4026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026fe:	681a      	ldr	r2, [r3, #0]
  402700:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402704:	d103      	bne.n	40270e <vTaskSwitchContext+0x26>
  402706:	685a      	ldr	r2, [r3, #4]
  402708:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40270c:	d021      	beq.n	402752 <vTaskSwitchContext+0x6a>
  40270e:	4b26      	ldr	r3, [pc, #152]	; (4027a8 <vTaskSwitchContext+0xc0>)
  402710:	6818      	ldr	r0, [r3, #0]
  402712:	6819      	ldr	r1, [r3, #0]
  402714:	3134      	adds	r1, #52	; 0x34
  402716:	4b25      	ldr	r3, [pc, #148]	; (4027ac <vTaskSwitchContext+0xc4>)
  402718:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40271a:	4b25      	ldr	r3, [pc, #148]	; (4027b0 <vTaskSwitchContext+0xc8>)
  40271c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40271e:	fab3 f383 	clz	r3, r3
  402722:	b2db      	uxtb	r3, r3
  402724:	f1c3 031f 	rsb	r3, r3, #31
  402728:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40272c:	4a21      	ldr	r2, [pc, #132]	; (4027b4 <vTaskSwitchContext+0xcc>)
  40272e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402732:	b9ba      	cbnz	r2, 402764 <vTaskSwitchContext+0x7c>
	__asm volatile
  402734:	f04f 0380 	mov.w	r3, #128	; 0x80
  402738:	b672      	cpsid	i
  40273a:	f383 8811 	msr	BASEPRI, r3
  40273e:	f3bf 8f6f 	isb	sy
  402742:	f3bf 8f4f 	dsb	sy
  402746:	b662      	cpsie	i
  402748:	e7fe      	b.n	402748 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40274a:	2201      	movs	r2, #1
  40274c:	4b15      	ldr	r3, [pc, #84]	; (4027a4 <vTaskSwitchContext+0xbc>)
  40274e:	601a      	str	r2, [r3, #0]
  402750:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402752:	689a      	ldr	r2, [r3, #8]
  402754:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402758:	d1d9      	bne.n	40270e <vTaskSwitchContext+0x26>
  40275a:	68db      	ldr	r3, [r3, #12]
  40275c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402760:	d1d5      	bne.n	40270e <vTaskSwitchContext+0x26>
  402762:	e7da      	b.n	40271a <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402764:	4a13      	ldr	r2, [pc, #76]	; (4027b4 <vTaskSwitchContext+0xcc>)
  402766:	0099      	lsls	r1, r3, #2
  402768:	18c8      	adds	r0, r1, r3
  40276a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40276e:	6844      	ldr	r4, [r0, #4]
  402770:	6864      	ldr	r4, [r4, #4]
  402772:	6044      	str	r4, [r0, #4]
  402774:	4419      	add	r1, r3
  402776:	4602      	mov	r2, r0
  402778:	3208      	adds	r2, #8
  40277a:	4294      	cmp	r4, r2
  40277c:	d009      	beq.n	402792 <vTaskSwitchContext+0xaa>
  40277e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402782:	4a0c      	ldr	r2, [pc, #48]	; (4027b4 <vTaskSwitchContext+0xcc>)
  402784:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402788:	685b      	ldr	r3, [r3, #4]
  40278a:	68da      	ldr	r2, [r3, #12]
  40278c:	4b06      	ldr	r3, [pc, #24]	; (4027a8 <vTaskSwitchContext+0xc0>)
  40278e:	601a      	str	r2, [r3, #0]
  402790:	bd10      	pop	{r4, pc}
  402792:	6860      	ldr	r0, [r4, #4]
  402794:	4a07      	ldr	r2, [pc, #28]	; (4027b4 <vTaskSwitchContext+0xcc>)
  402796:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40279a:	6050      	str	r0, [r2, #4]
  40279c:	e7ef      	b.n	40277e <vTaskSwitchContext+0x96>
  40279e:	bf00      	nop
  4027a0:	20400cf0 	.word	0x20400cf0
  4027a4:	20400d74 	.word	0x20400d74
  4027a8:	20400c78 	.word	0x20400c78
  4027ac:	004035c5 	.word	0x004035c5
  4027b0:	20400cfc 	.word	0x20400cfc
  4027b4:	20400c84 	.word	0x20400c84

004027b8 <vTaskPlaceOnEventList>:
{
  4027b8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4027ba:	b1e0      	cbz	r0, 4027f6 <vTaskPlaceOnEventList+0x3e>
  4027bc:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4027be:	4d17      	ldr	r5, [pc, #92]	; (40281c <vTaskPlaceOnEventList+0x64>)
  4027c0:	6829      	ldr	r1, [r5, #0]
  4027c2:	3118      	adds	r1, #24
  4027c4:	4b16      	ldr	r3, [pc, #88]	; (402820 <vTaskPlaceOnEventList+0x68>)
  4027c6:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4027c8:	6828      	ldr	r0, [r5, #0]
  4027ca:	3004      	adds	r0, #4
  4027cc:	4b15      	ldr	r3, [pc, #84]	; (402824 <vTaskPlaceOnEventList+0x6c>)
  4027ce:	4798      	blx	r3
  4027d0:	b940      	cbnz	r0, 4027e4 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4027d2:	682a      	ldr	r2, [r5, #0]
  4027d4:	4914      	ldr	r1, [pc, #80]	; (402828 <vTaskPlaceOnEventList+0x70>)
  4027d6:	680b      	ldr	r3, [r1, #0]
  4027d8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4027da:	2201      	movs	r2, #1
  4027dc:	4082      	lsls	r2, r0
  4027de:	ea23 0302 	bic.w	r3, r3, r2
  4027e2:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4027e4:	f1b4 3fff 	cmp.w	r4, #4294967295
  4027e8:	d010      	beq.n	40280c <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4027ea:	4b10      	ldr	r3, [pc, #64]	; (40282c <vTaskPlaceOnEventList+0x74>)
  4027ec:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4027ee:	4420      	add	r0, r4
  4027f0:	4b0f      	ldr	r3, [pc, #60]	; (402830 <vTaskPlaceOnEventList+0x78>)
  4027f2:	4798      	blx	r3
  4027f4:	bd38      	pop	{r3, r4, r5, pc}
  4027f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027fa:	b672      	cpsid	i
  4027fc:	f383 8811 	msr	BASEPRI, r3
  402800:	f3bf 8f6f 	isb	sy
  402804:	f3bf 8f4f 	dsb	sy
  402808:	b662      	cpsie	i
  40280a:	e7fe      	b.n	40280a <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40280c:	4b03      	ldr	r3, [pc, #12]	; (40281c <vTaskPlaceOnEventList+0x64>)
  40280e:	6819      	ldr	r1, [r3, #0]
  402810:	3104      	adds	r1, #4
  402812:	4808      	ldr	r0, [pc, #32]	; (402834 <vTaskPlaceOnEventList+0x7c>)
  402814:	4b08      	ldr	r3, [pc, #32]	; (402838 <vTaskPlaceOnEventList+0x80>)
  402816:	4798      	blx	r3
  402818:	bd38      	pop	{r3, r4, r5, pc}
  40281a:	bf00      	nop
  40281c:	20400c78 	.word	0x20400c78
  402820:	004013fd 	.word	0x004013fd
  402824:	00401431 	.word	0x00401431
  402828:	20400cfc 	.word	0x20400cfc
  40282c:	20400d70 	.word	0x20400d70
  402830:	0040201d 	.word	0x0040201d
  402834:	20400d48 	.word	0x20400d48
  402838:	004013e5 	.word	0x004013e5

0040283c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  40283c:	b1e8      	cbz	r0, 40287a <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40283e:	b570      	push	{r4, r5, r6, lr}
  402840:	4615      	mov	r5, r2
  402842:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402844:	4e16      	ldr	r6, [pc, #88]	; (4028a0 <vTaskPlaceOnEventListRestricted+0x64>)
  402846:	6831      	ldr	r1, [r6, #0]
  402848:	3118      	adds	r1, #24
  40284a:	4b16      	ldr	r3, [pc, #88]	; (4028a4 <vTaskPlaceOnEventListRestricted+0x68>)
  40284c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40284e:	6830      	ldr	r0, [r6, #0]
  402850:	3004      	adds	r0, #4
  402852:	4b15      	ldr	r3, [pc, #84]	; (4028a8 <vTaskPlaceOnEventListRestricted+0x6c>)
  402854:	4798      	blx	r3
  402856:	b940      	cbnz	r0, 40286a <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402858:	6832      	ldr	r2, [r6, #0]
  40285a:	4914      	ldr	r1, [pc, #80]	; (4028ac <vTaskPlaceOnEventListRestricted+0x70>)
  40285c:	680b      	ldr	r3, [r1, #0]
  40285e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402860:	2201      	movs	r2, #1
  402862:	4082      	lsls	r2, r0
  402864:	ea23 0302 	bic.w	r3, r3, r2
  402868:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40286a:	2d01      	cmp	r5, #1
  40286c:	d010      	beq.n	402890 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  40286e:	4b10      	ldr	r3, [pc, #64]	; (4028b0 <vTaskPlaceOnEventListRestricted+0x74>)
  402870:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402872:	4420      	add	r0, r4
  402874:	4b0f      	ldr	r3, [pc, #60]	; (4028b4 <vTaskPlaceOnEventListRestricted+0x78>)
  402876:	4798      	blx	r3
  402878:	bd70      	pop	{r4, r5, r6, pc}
  40287a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40287e:	b672      	cpsid	i
  402880:	f383 8811 	msr	BASEPRI, r3
  402884:	f3bf 8f6f 	isb	sy
  402888:	f3bf 8f4f 	dsb	sy
  40288c:	b662      	cpsie	i
  40288e:	e7fe      	b.n	40288e <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402890:	4b03      	ldr	r3, [pc, #12]	; (4028a0 <vTaskPlaceOnEventListRestricted+0x64>)
  402892:	6819      	ldr	r1, [r3, #0]
  402894:	3104      	adds	r1, #4
  402896:	4808      	ldr	r0, [pc, #32]	; (4028b8 <vTaskPlaceOnEventListRestricted+0x7c>)
  402898:	4b02      	ldr	r3, [pc, #8]	; (4028a4 <vTaskPlaceOnEventListRestricted+0x68>)
  40289a:	4798      	blx	r3
  40289c:	bd70      	pop	{r4, r5, r6, pc}
  40289e:	bf00      	nop
  4028a0:	20400c78 	.word	0x20400c78
  4028a4:	004013e5 	.word	0x004013e5
  4028a8:	00401431 	.word	0x00401431
  4028ac:	20400cfc 	.word	0x20400cfc
  4028b0:	20400d70 	.word	0x20400d70
  4028b4:	0040201d 	.word	0x0040201d
  4028b8:	20400d48 	.word	0x20400d48

004028bc <xTaskRemoveFromEventList>:
{
  4028bc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4028be:	68c3      	ldr	r3, [r0, #12]
  4028c0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4028c2:	b324      	cbz	r4, 40290e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4028c4:	f104 0518 	add.w	r5, r4, #24
  4028c8:	4628      	mov	r0, r5
  4028ca:	4b1a      	ldr	r3, [pc, #104]	; (402934 <xTaskRemoveFromEventList+0x78>)
  4028cc:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4028ce:	4b1a      	ldr	r3, [pc, #104]	; (402938 <xTaskRemoveFromEventList+0x7c>)
  4028d0:	681b      	ldr	r3, [r3, #0]
  4028d2:	bb3b      	cbnz	r3, 402924 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4028d4:	1d25      	adds	r5, r4, #4
  4028d6:	4628      	mov	r0, r5
  4028d8:	4b16      	ldr	r3, [pc, #88]	; (402934 <xTaskRemoveFromEventList+0x78>)
  4028da:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4028dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4028de:	4a17      	ldr	r2, [pc, #92]	; (40293c <xTaskRemoveFromEventList+0x80>)
  4028e0:	6811      	ldr	r1, [r2, #0]
  4028e2:	2301      	movs	r3, #1
  4028e4:	4083      	lsls	r3, r0
  4028e6:	430b      	orrs	r3, r1
  4028e8:	6013      	str	r3, [r2, #0]
  4028ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4028ee:	4629      	mov	r1, r5
  4028f0:	4b13      	ldr	r3, [pc, #76]	; (402940 <xTaskRemoveFromEventList+0x84>)
  4028f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4028f6:	4b13      	ldr	r3, [pc, #76]	; (402944 <xTaskRemoveFromEventList+0x88>)
  4028f8:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4028fa:	4b13      	ldr	r3, [pc, #76]	; (402948 <xTaskRemoveFromEventList+0x8c>)
  4028fc:	681b      	ldr	r3, [r3, #0]
  4028fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402902:	429a      	cmp	r2, r3
  402904:	d913      	bls.n	40292e <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402906:	2001      	movs	r0, #1
  402908:	4b10      	ldr	r3, [pc, #64]	; (40294c <xTaskRemoveFromEventList+0x90>)
  40290a:	6018      	str	r0, [r3, #0]
  40290c:	bd38      	pop	{r3, r4, r5, pc}
  40290e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402912:	b672      	cpsid	i
  402914:	f383 8811 	msr	BASEPRI, r3
  402918:	f3bf 8f6f 	isb	sy
  40291c:	f3bf 8f4f 	dsb	sy
  402920:	b662      	cpsie	i
  402922:	e7fe      	b.n	402922 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402924:	4629      	mov	r1, r5
  402926:	480a      	ldr	r0, [pc, #40]	; (402950 <xTaskRemoveFromEventList+0x94>)
  402928:	4b06      	ldr	r3, [pc, #24]	; (402944 <xTaskRemoveFromEventList+0x88>)
  40292a:	4798      	blx	r3
  40292c:	e7e5      	b.n	4028fa <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40292e:	2000      	movs	r0, #0
}
  402930:	bd38      	pop	{r3, r4, r5, pc}
  402932:	bf00      	nop
  402934:	00401431 	.word	0x00401431
  402938:	20400cf0 	.word	0x20400cf0
  40293c:	20400cfc 	.word	0x20400cfc
  402940:	20400c84 	.word	0x20400c84
  402944:	004013e5 	.word	0x004013e5
  402948:	20400c78 	.word	0x20400c78
  40294c:	20400d74 	.word	0x20400d74
  402950:	20400d30 	.word	0x20400d30

00402954 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402954:	b130      	cbz	r0, 402964 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402956:	4a09      	ldr	r2, [pc, #36]	; (40297c <vTaskSetTimeOutState+0x28>)
  402958:	6812      	ldr	r2, [r2, #0]
  40295a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40295c:	4a08      	ldr	r2, [pc, #32]	; (402980 <vTaskSetTimeOutState+0x2c>)
  40295e:	6812      	ldr	r2, [r2, #0]
  402960:	6042      	str	r2, [r0, #4]
  402962:	4770      	bx	lr
  402964:	f04f 0380 	mov.w	r3, #128	; 0x80
  402968:	b672      	cpsid	i
  40296a:	f383 8811 	msr	BASEPRI, r3
  40296e:	f3bf 8f6f 	isb	sy
  402972:	f3bf 8f4f 	dsb	sy
  402976:	b662      	cpsie	i
  402978:	e7fe      	b.n	402978 <vTaskSetTimeOutState+0x24>
  40297a:	bf00      	nop
  40297c:	20400d2c 	.word	0x20400d2c
  402980:	20400d70 	.word	0x20400d70

00402984 <xTaskCheckForTimeOut>:
{
  402984:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402986:	b1c0      	cbz	r0, 4029ba <xTaskCheckForTimeOut+0x36>
  402988:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40298a:	b309      	cbz	r1, 4029d0 <xTaskCheckForTimeOut+0x4c>
  40298c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40298e:	4b1d      	ldr	r3, [pc, #116]	; (402a04 <xTaskCheckForTimeOut+0x80>)
  402990:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402992:	4b1d      	ldr	r3, [pc, #116]	; (402a08 <xTaskCheckForTimeOut+0x84>)
  402994:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402996:	682b      	ldr	r3, [r5, #0]
  402998:	f1b3 3fff 	cmp.w	r3, #4294967295
  40299c:	d02e      	beq.n	4029fc <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40299e:	491b      	ldr	r1, [pc, #108]	; (402a0c <xTaskCheckForTimeOut+0x88>)
  4029a0:	6809      	ldr	r1, [r1, #0]
  4029a2:	6820      	ldr	r0, [r4, #0]
  4029a4:	4288      	cmp	r0, r1
  4029a6:	d002      	beq.n	4029ae <xTaskCheckForTimeOut+0x2a>
  4029a8:	6861      	ldr	r1, [r4, #4]
  4029aa:	428a      	cmp	r2, r1
  4029ac:	d228      	bcs.n	402a00 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4029ae:	6861      	ldr	r1, [r4, #4]
  4029b0:	1a50      	subs	r0, r2, r1
  4029b2:	4283      	cmp	r3, r0
  4029b4:	d817      	bhi.n	4029e6 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4029b6:	2401      	movs	r4, #1
  4029b8:	e01c      	b.n	4029f4 <xTaskCheckForTimeOut+0x70>
  4029ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029be:	b672      	cpsid	i
  4029c0:	f383 8811 	msr	BASEPRI, r3
  4029c4:	f3bf 8f6f 	isb	sy
  4029c8:	f3bf 8f4f 	dsb	sy
  4029cc:	b662      	cpsie	i
  4029ce:	e7fe      	b.n	4029ce <xTaskCheckForTimeOut+0x4a>
  4029d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029d4:	b672      	cpsid	i
  4029d6:	f383 8811 	msr	BASEPRI, r3
  4029da:	f3bf 8f6f 	isb	sy
  4029de:	f3bf 8f4f 	dsb	sy
  4029e2:	b662      	cpsie	i
  4029e4:	e7fe      	b.n	4029e4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4029e6:	1a9b      	subs	r3, r3, r2
  4029e8:	440b      	add	r3, r1
  4029ea:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4029ec:	4620      	mov	r0, r4
  4029ee:	4b08      	ldr	r3, [pc, #32]	; (402a10 <xTaskCheckForTimeOut+0x8c>)
  4029f0:	4798      	blx	r3
			xReturn = pdFALSE;
  4029f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4029f4:	4b07      	ldr	r3, [pc, #28]	; (402a14 <xTaskCheckForTimeOut+0x90>)
  4029f6:	4798      	blx	r3
}
  4029f8:	4620      	mov	r0, r4
  4029fa:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4029fc:	2400      	movs	r4, #0
  4029fe:	e7f9      	b.n	4029f4 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402a00:	2401      	movs	r4, #1
  402a02:	e7f7      	b.n	4029f4 <xTaskCheckForTimeOut+0x70>
  402a04:	00401515 	.word	0x00401515
  402a08:	20400d70 	.word	0x20400d70
  402a0c:	20400d2c 	.word	0x20400d2c
  402a10:	00402955 	.word	0x00402955
  402a14:	00401561 	.word	0x00401561

00402a18 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402a18:	2201      	movs	r2, #1
  402a1a:	4b01      	ldr	r3, [pc, #4]	; (402a20 <vTaskMissedYield+0x8>)
  402a1c:	601a      	str	r2, [r3, #0]
  402a1e:	4770      	bx	lr
  402a20:	20400d74 	.word	0x20400d74

00402a24 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402a24:	4b05      	ldr	r3, [pc, #20]	; (402a3c <xTaskGetSchedulerState+0x18>)
  402a26:	681b      	ldr	r3, [r3, #0]
  402a28:	b133      	cbz	r3, 402a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a2a:	4b05      	ldr	r3, [pc, #20]	; (402a40 <xTaskGetSchedulerState+0x1c>)
  402a2c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402a2e:	2b00      	cmp	r3, #0
  402a30:	bf0c      	ite	eq
  402a32:	2002      	moveq	r0, #2
  402a34:	2000      	movne	r0, #0
  402a36:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402a38:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  402a3a:	4770      	bx	lr
  402a3c:	20400d44 	.word	0x20400d44
  402a40:	20400cf0 	.word	0x20400cf0

00402a44 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402a44:	2800      	cmp	r0, #0
  402a46:	d044      	beq.n	402ad2 <vTaskPriorityInherit+0x8e>
	{
  402a48:	b538      	push	{r3, r4, r5, lr}
  402a4a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402a4c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402a4e:	4921      	ldr	r1, [pc, #132]	; (402ad4 <vTaskPriorityInherit+0x90>)
  402a50:	6809      	ldr	r1, [r1, #0]
  402a52:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a54:	428a      	cmp	r2, r1
  402a56:	d214      	bcs.n	402a82 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402a58:	6981      	ldr	r1, [r0, #24]
  402a5a:	2900      	cmp	r1, #0
  402a5c:	db05      	blt.n	402a6a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402a5e:	491d      	ldr	r1, [pc, #116]	; (402ad4 <vTaskPriorityInherit+0x90>)
  402a60:	6809      	ldr	r1, [r1, #0]
  402a62:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a64:	f1c1 0105 	rsb	r1, r1, #5
  402a68:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402a6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402a6e:	491a      	ldr	r1, [pc, #104]	; (402ad8 <vTaskPriorityInherit+0x94>)
  402a70:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402a74:	6961      	ldr	r1, [r4, #20]
  402a76:	4291      	cmp	r1, r2
  402a78:	d004      	beq.n	402a84 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402a7a:	4a16      	ldr	r2, [pc, #88]	; (402ad4 <vTaskPriorityInherit+0x90>)
  402a7c:	6812      	ldr	r2, [r2, #0]
  402a7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402a80:	62e2      	str	r2, [r4, #44]	; 0x2c
  402a82:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402a84:	1d25      	adds	r5, r4, #4
  402a86:	4628      	mov	r0, r5
  402a88:	4b14      	ldr	r3, [pc, #80]	; (402adc <vTaskPriorityInherit+0x98>)
  402a8a:	4798      	blx	r3
  402a8c:	b970      	cbnz	r0, 402aac <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402a8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402a90:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402a94:	4a10      	ldr	r2, [pc, #64]	; (402ad8 <vTaskPriorityInherit+0x94>)
  402a96:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402a9a:	b93a      	cbnz	r2, 402aac <vTaskPriorityInherit+0x68>
  402a9c:	4810      	ldr	r0, [pc, #64]	; (402ae0 <vTaskPriorityInherit+0x9c>)
  402a9e:	6802      	ldr	r2, [r0, #0]
  402aa0:	2101      	movs	r1, #1
  402aa2:	fa01 f303 	lsl.w	r3, r1, r3
  402aa6:	ea22 0303 	bic.w	r3, r2, r3
  402aaa:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402aac:	4b09      	ldr	r3, [pc, #36]	; (402ad4 <vTaskPriorityInherit+0x90>)
  402aae:	681b      	ldr	r3, [r3, #0]
  402ab0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402ab2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402ab4:	4a0a      	ldr	r2, [pc, #40]	; (402ae0 <vTaskPriorityInherit+0x9c>)
  402ab6:	6811      	ldr	r1, [r2, #0]
  402ab8:	2301      	movs	r3, #1
  402aba:	4083      	lsls	r3, r0
  402abc:	430b      	orrs	r3, r1
  402abe:	6013      	str	r3, [r2, #0]
  402ac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ac4:	4629      	mov	r1, r5
  402ac6:	4b04      	ldr	r3, [pc, #16]	; (402ad8 <vTaskPriorityInherit+0x94>)
  402ac8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402acc:	4b05      	ldr	r3, [pc, #20]	; (402ae4 <vTaskPriorityInherit+0xa0>)
  402ace:	4798      	blx	r3
  402ad0:	bd38      	pop	{r3, r4, r5, pc}
  402ad2:	4770      	bx	lr
  402ad4:	20400c78 	.word	0x20400c78
  402ad8:	20400c84 	.word	0x20400c84
  402adc:	00401431 	.word	0x00401431
  402ae0:	20400cfc 	.word	0x20400cfc
  402ae4:	004013e5 	.word	0x004013e5

00402ae8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402ae8:	2800      	cmp	r0, #0
  402aea:	d04d      	beq.n	402b88 <xTaskPriorityDisinherit+0xa0>
	{
  402aec:	b538      	push	{r3, r4, r5, lr}
  402aee:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402af0:	4a27      	ldr	r2, [pc, #156]	; (402b90 <xTaskPriorityDisinherit+0xa8>)
  402af2:	6812      	ldr	r2, [r2, #0]
  402af4:	4290      	cmp	r0, r2
  402af6:	d00a      	beq.n	402b0e <xTaskPriorityDisinherit+0x26>
  402af8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402afc:	b672      	cpsid	i
  402afe:	f383 8811 	msr	BASEPRI, r3
  402b02:	f3bf 8f6f 	isb	sy
  402b06:	f3bf 8f4f 	dsb	sy
  402b0a:	b662      	cpsie	i
  402b0c:	e7fe      	b.n	402b0c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402b0e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402b10:	b952      	cbnz	r2, 402b28 <xTaskPriorityDisinherit+0x40>
  402b12:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b16:	b672      	cpsid	i
  402b18:	f383 8811 	msr	BASEPRI, r3
  402b1c:	f3bf 8f6f 	isb	sy
  402b20:	f3bf 8f4f 	dsb	sy
  402b24:	b662      	cpsie	i
  402b26:	e7fe      	b.n	402b26 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402b28:	3a01      	subs	r2, #1
  402b2a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402b2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402b2e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402b30:	4288      	cmp	r0, r1
  402b32:	d02b      	beq.n	402b8c <xTaskPriorityDisinherit+0xa4>
  402b34:	bb52      	cbnz	r2, 402b8c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b36:	1d25      	adds	r5, r4, #4
  402b38:	4628      	mov	r0, r5
  402b3a:	4b16      	ldr	r3, [pc, #88]	; (402b94 <xTaskPriorityDisinherit+0xac>)
  402b3c:	4798      	blx	r3
  402b3e:	b968      	cbnz	r0, 402b5c <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402b40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402b42:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402b46:	4b14      	ldr	r3, [pc, #80]	; (402b98 <xTaskPriorityDisinherit+0xb0>)
  402b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  402b4c:	b933      	cbnz	r3, 402b5c <xTaskPriorityDisinherit+0x74>
  402b4e:	4813      	ldr	r0, [pc, #76]	; (402b9c <xTaskPriorityDisinherit+0xb4>)
  402b50:	6803      	ldr	r3, [r0, #0]
  402b52:	2201      	movs	r2, #1
  402b54:	408a      	lsls	r2, r1
  402b56:	ea23 0302 	bic.w	r3, r3, r2
  402b5a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402b5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402b5e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b60:	f1c0 0305 	rsb	r3, r0, #5
  402b64:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402b66:	4a0d      	ldr	r2, [pc, #52]	; (402b9c <xTaskPriorityDisinherit+0xb4>)
  402b68:	6811      	ldr	r1, [r2, #0]
  402b6a:	2401      	movs	r4, #1
  402b6c:	fa04 f300 	lsl.w	r3, r4, r0
  402b70:	430b      	orrs	r3, r1
  402b72:	6013      	str	r3, [r2, #0]
  402b74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402b78:	4629      	mov	r1, r5
  402b7a:	4b07      	ldr	r3, [pc, #28]	; (402b98 <xTaskPriorityDisinherit+0xb0>)
  402b7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402b80:	4b07      	ldr	r3, [pc, #28]	; (402ba0 <xTaskPriorityDisinherit+0xb8>)
  402b82:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402b84:	4620      	mov	r0, r4
  402b86:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402b88:	2000      	movs	r0, #0
  402b8a:	4770      	bx	lr
  402b8c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402b8e:	bd38      	pop	{r3, r4, r5, pc}
  402b90:	20400c78 	.word	0x20400c78
  402b94:	00401431 	.word	0x00401431
  402b98:	20400c84 	.word	0x20400c84
  402b9c:	20400cfc 	.word	0x20400cfc
  402ba0:	004013e5 	.word	0x004013e5

00402ba4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402ba4:	4b05      	ldr	r3, [pc, #20]	; (402bbc <pvTaskIncrementMutexHeldCount+0x18>)
  402ba6:	681b      	ldr	r3, [r3, #0]
  402ba8:	b123      	cbz	r3, 402bb4 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402baa:	4b04      	ldr	r3, [pc, #16]	; (402bbc <pvTaskIncrementMutexHeldCount+0x18>)
  402bac:	681a      	ldr	r2, [r3, #0]
  402bae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402bb0:	3301      	adds	r3, #1
  402bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402bb4:	4b01      	ldr	r3, [pc, #4]	; (402bbc <pvTaskIncrementMutexHeldCount+0x18>)
  402bb6:	6818      	ldr	r0, [r3, #0]
	}
  402bb8:	4770      	bx	lr
  402bba:	bf00      	nop
  402bbc:	20400c78 	.word	0x20400c78

00402bc0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402bc0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402bc2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402bc4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402bc6:	4291      	cmp	r1, r2
  402bc8:	d80c      	bhi.n	402be4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402bca:	1ad2      	subs	r2, r2, r3
  402bcc:	6983      	ldr	r3, [r0, #24]
  402bce:	429a      	cmp	r2, r3
  402bd0:	d301      	bcc.n	402bd6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402bd2:	2001      	movs	r0, #1
  402bd4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402bd6:	1d01      	adds	r1, r0, #4
  402bd8:	4b09      	ldr	r3, [pc, #36]	; (402c00 <prvInsertTimerInActiveList+0x40>)
  402bda:	6818      	ldr	r0, [r3, #0]
  402bdc:	4b09      	ldr	r3, [pc, #36]	; (402c04 <prvInsertTimerInActiveList+0x44>)
  402bde:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402be0:	2000      	movs	r0, #0
  402be2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402be4:	429a      	cmp	r2, r3
  402be6:	d203      	bcs.n	402bf0 <prvInsertTimerInActiveList+0x30>
  402be8:	4299      	cmp	r1, r3
  402bea:	d301      	bcc.n	402bf0 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402bec:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402bee:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402bf0:	1d01      	adds	r1, r0, #4
  402bf2:	4b05      	ldr	r3, [pc, #20]	; (402c08 <prvInsertTimerInActiveList+0x48>)
  402bf4:	6818      	ldr	r0, [r3, #0]
  402bf6:	4b03      	ldr	r3, [pc, #12]	; (402c04 <prvInsertTimerInActiveList+0x44>)
  402bf8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402bfa:	2000      	movs	r0, #0
  402bfc:	bd08      	pop	{r3, pc}
  402bfe:	bf00      	nop
  402c00:	20400d7c 	.word	0x20400d7c
  402c04:	004013fd 	.word	0x004013fd
  402c08:	20400d78 	.word	0x20400d78

00402c0c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402c0c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402c0e:	4b15      	ldr	r3, [pc, #84]	; (402c64 <prvCheckForValidListAndQueue+0x58>)
  402c10:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402c12:	4b15      	ldr	r3, [pc, #84]	; (402c68 <prvCheckForValidListAndQueue+0x5c>)
  402c14:	681b      	ldr	r3, [r3, #0]
  402c16:	b113      	cbz	r3, 402c1e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402c18:	4b14      	ldr	r3, [pc, #80]	; (402c6c <prvCheckForValidListAndQueue+0x60>)
  402c1a:	4798      	blx	r3
  402c1c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402c1e:	4d14      	ldr	r5, [pc, #80]	; (402c70 <prvCheckForValidListAndQueue+0x64>)
  402c20:	4628      	mov	r0, r5
  402c22:	4e14      	ldr	r6, [pc, #80]	; (402c74 <prvCheckForValidListAndQueue+0x68>)
  402c24:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402c26:	4c14      	ldr	r4, [pc, #80]	; (402c78 <prvCheckForValidListAndQueue+0x6c>)
  402c28:	4620      	mov	r0, r4
  402c2a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402c2c:	4b13      	ldr	r3, [pc, #76]	; (402c7c <prvCheckForValidListAndQueue+0x70>)
  402c2e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402c30:	4b13      	ldr	r3, [pc, #76]	; (402c80 <prvCheckForValidListAndQueue+0x74>)
  402c32:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402c34:	2200      	movs	r2, #0
  402c36:	2110      	movs	r1, #16
  402c38:	2005      	movs	r0, #5
  402c3a:	4b12      	ldr	r3, [pc, #72]	; (402c84 <prvCheckForValidListAndQueue+0x78>)
  402c3c:	4798      	blx	r3
  402c3e:	4b0a      	ldr	r3, [pc, #40]	; (402c68 <prvCheckForValidListAndQueue+0x5c>)
  402c40:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402c42:	b118      	cbz	r0, 402c4c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402c44:	4910      	ldr	r1, [pc, #64]	; (402c88 <prvCheckForValidListAndQueue+0x7c>)
  402c46:	4b11      	ldr	r3, [pc, #68]	; (402c8c <prvCheckForValidListAndQueue+0x80>)
  402c48:	4798      	blx	r3
  402c4a:	e7e5      	b.n	402c18 <prvCheckForValidListAndQueue+0xc>
  402c4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c50:	b672      	cpsid	i
  402c52:	f383 8811 	msr	BASEPRI, r3
  402c56:	f3bf 8f6f 	isb	sy
  402c5a:	f3bf 8f4f 	dsb	sy
  402c5e:	b662      	cpsie	i
  402c60:	e7fe      	b.n	402c60 <prvCheckForValidListAndQueue+0x54>
  402c62:	bf00      	nop
  402c64:	00401515 	.word	0x00401515
  402c68:	20400dac 	.word	0x20400dac
  402c6c:	00401561 	.word	0x00401561
  402c70:	20400d80 	.word	0x20400d80
  402c74:	004013c9 	.word	0x004013c9
  402c78:	20400d94 	.word	0x20400d94
  402c7c:	20400d78 	.word	0x20400d78
  402c80:	20400d7c 	.word	0x20400d7c
  402c84:	00401a35 	.word	0x00401a35
  402c88:	00409f24 	.word	0x00409f24
  402c8c:	00401f65 	.word	0x00401f65

00402c90 <xTimerCreateTimerTask>:
{
  402c90:	b510      	push	{r4, lr}
  402c92:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402c94:	4b0f      	ldr	r3, [pc, #60]	; (402cd4 <xTimerCreateTimerTask+0x44>)
  402c96:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402c98:	4b0f      	ldr	r3, [pc, #60]	; (402cd8 <xTimerCreateTimerTask+0x48>)
  402c9a:	681b      	ldr	r3, [r3, #0]
  402c9c:	b173      	cbz	r3, 402cbc <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402c9e:	2300      	movs	r3, #0
  402ca0:	9303      	str	r3, [sp, #12]
  402ca2:	9302      	str	r3, [sp, #8]
  402ca4:	9301      	str	r3, [sp, #4]
  402ca6:	2204      	movs	r2, #4
  402ca8:	9200      	str	r2, [sp, #0]
  402caa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402cae:	490b      	ldr	r1, [pc, #44]	; (402cdc <xTimerCreateTimerTask+0x4c>)
  402cb0:	480b      	ldr	r0, [pc, #44]	; (402ce0 <xTimerCreateTimerTask+0x50>)
  402cb2:	4c0c      	ldr	r4, [pc, #48]	; (402ce4 <xTimerCreateTimerTask+0x54>)
  402cb4:	47a0      	blx	r4
	configASSERT( xReturn );
  402cb6:	b108      	cbz	r0, 402cbc <xTimerCreateTimerTask+0x2c>
}
  402cb8:	b004      	add	sp, #16
  402cba:	bd10      	pop	{r4, pc}
  402cbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cc0:	b672      	cpsid	i
  402cc2:	f383 8811 	msr	BASEPRI, r3
  402cc6:	f3bf 8f6f 	isb	sy
  402cca:	f3bf 8f4f 	dsb	sy
  402cce:	b662      	cpsie	i
  402cd0:	e7fe      	b.n	402cd0 <xTimerCreateTimerTask+0x40>
  402cd2:	bf00      	nop
  402cd4:	00402c0d 	.word	0x00402c0d
  402cd8:	20400dac 	.word	0x20400dac
  402cdc:	00409f2c 	.word	0x00409f2c
  402ce0:	00402e11 	.word	0x00402e11
  402ce4:	00402075 	.word	0x00402075

00402ce8 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402ce8:	b1d8      	cbz	r0, 402d22 <xTimerGenericCommand+0x3a>
{
  402cea:	b530      	push	{r4, r5, lr}
  402cec:	b085      	sub	sp, #20
  402cee:	4615      	mov	r5, r2
  402cf0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402cf2:	4a15      	ldr	r2, [pc, #84]	; (402d48 <xTimerGenericCommand+0x60>)
  402cf4:	6810      	ldr	r0, [r2, #0]
  402cf6:	b320      	cbz	r0, 402d42 <xTimerGenericCommand+0x5a>
  402cf8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402cfa:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402cfc:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402cfe:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402d00:	2905      	cmp	r1, #5
  402d02:	dc19      	bgt.n	402d38 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402d04:	4b11      	ldr	r3, [pc, #68]	; (402d4c <xTimerGenericCommand+0x64>)
  402d06:	4798      	blx	r3
  402d08:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402d0a:	f04f 0300 	mov.w	r3, #0
  402d0e:	bf0c      	ite	eq
  402d10:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402d12:	461a      	movne	r2, r3
  402d14:	4669      	mov	r1, sp
  402d16:	480c      	ldr	r0, [pc, #48]	; (402d48 <xTimerGenericCommand+0x60>)
  402d18:	6800      	ldr	r0, [r0, #0]
  402d1a:	4c0d      	ldr	r4, [pc, #52]	; (402d50 <xTimerGenericCommand+0x68>)
  402d1c:	47a0      	blx	r4
}
  402d1e:	b005      	add	sp, #20
  402d20:	bd30      	pop	{r4, r5, pc}
  402d22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d26:	b672      	cpsid	i
  402d28:	f383 8811 	msr	BASEPRI, r3
  402d2c:	f3bf 8f6f 	isb	sy
  402d30:	f3bf 8f4f 	dsb	sy
  402d34:	b662      	cpsie	i
  402d36:	e7fe      	b.n	402d36 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402d38:	2300      	movs	r3, #0
  402d3a:	4669      	mov	r1, sp
  402d3c:	4c05      	ldr	r4, [pc, #20]	; (402d54 <xTimerGenericCommand+0x6c>)
  402d3e:	47a0      	blx	r4
  402d40:	e7ed      	b.n	402d1e <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402d42:	2000      	movs	r0, #0
	return xReturn;
  402d44:	e7eb      	b.n	402d1e <xTimerGenericCommand+0x36>
  402d46:	bf00      	nop
  402d48:	20400dac 	.word	0x20400dac
  402d4c:	00402a25 	.word	0x00402a25
  402d50:	00401ab1 	.word	0x00401ab1
  402d54:	00401c95 	.word	0x00401c95

00402d58 <prvSampleTimeNow>:
{
  402d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d5c:	b082      	sub	sp, #8
  402d5e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402d60:	4b24      	ldr	r3, [pc, #144]	; (402df4 <prvSampleTimeNow+0x9c>)
  402d62:	4798      	blx	r3
  402d64:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402d66:	4b24      	ldr	r3, [pc, #144]	; (402df8 <prvSampleTimeNow+0xa0>)
  402d68:	681b      	ldr	r3, [r3, #0]
  402d6a:	4298      	cmp	r0, r3
  402d6c:	d31b      	bcc.n	402da6 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402d6e:	2300      	movs	r3, #0
  402d70:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402d74:	4b20      	ldr	r3, [pc, #128]	; (402df8 <prvSampleTimeNow+0xa0>)
  402d76:	601f      	str	r7, [r3, #0]
}
  402d78:	4638      	mov	r0, r7
  402d7a:	b002      	add	sp, #8
  402d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402d80:	2100      	movs	r1, #0
  402d82:	9100      	str	r1, [sp, #0]
  402d84:	460b      	mov	r3, r1
  402d86:	4652      	mov	r2, sl
  402d88:	4620      	mov	r0, r4
  402d8a:	4c1c      	ldr	r4, [pc, #112]	; (402dfc <prvSampleTimeNow+0xa4>)
  402d8c:	47a0      	blx	r4
				configASSERT( xResult );
  402d8e:	b960      	cbnz	r0, 402daa <prvSampleTimeNow+0x52>
  402d90:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d94:	b672      	cpsid	i
  402d96:	f383 8811 	msr	BASEPRI, r3
  402d9a:	f3bf 8f6f 	isb	sy
  402d9e:	f3bf 8f4f 	dsb	sy
  402da2:	b662      	cpsie	i
  402da4:	e7fe      	b.n	402da4 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402da6:	4d16      	ldr	r5, [pc, #88]	; (402e00 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402da8:	4e16      	ldr	r6, [pc, #88]	; (402e04 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402daa:	682b      	ldr	r3, [r5, #0]
  402dac:	681a      	ldr	r2, [r3, #0]
  402dae:	b1c2      	cbz	r2, 402de2 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402db0:	68db      	ldr	r3, [r3, #12]
  402db2:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402db6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402db8:	f104 0904 	add.w	r9, r4, #4
  402dbc:	4648      	mov	r0, r9
  402dbe:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402dc2:	4620      	mov	r0, r4
  402dc4:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402dc6:	69e3      	ldr	r3, [r4, #28]
  402dc8:	2b01      	cmp	r3, #1
  402dca:	d1ee      	bne.n	402daa <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402dcc:	69a3      	ldr	r3, [r4, #24]
  402dce:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402dd0:	459a      	cmp	sl, r3
  402dd2:	d2d5      	bcs.n	402d80 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402dd4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402dd6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402dd8:	4649      	mov	r1, r9
  402dda:	6828      	ldr	r0, [r5, #0]
  402ddc:	4b0a      	ldr	r3, [pc, #40]	; (402e08 <prvSampleTimeNow+0xb0>)
  402dde:	4798      	blx	r3
  402de0:	e7e3      	b.n	402daa <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402de2:	4a0a      	ldr	r2, [pc, #40]	; (402e0c <prvSampleTimeNow+0xb4>)
  402de4:	6810      	ldr	r0, [r2, #0]
  402de6:	4906      	ldr	r1, [pc, #24]	; (402e00 <prvSampleTimeNow+0xa8>)
  402de8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402dea:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402dec:	2301      	movs	r3, #1
  402dee:	f8c8 3000 	str.w	r3, [r8]
  402df2:	e7bf      	b.n	402d74 <prvSampleTimeNow+0x1c>
  402df4:	00402349 	.word	0x00402349
  402df8:	20400da8 	.word	0x20400da8
  402dfc:	00402ce9 	.word	0x00402ce9
  402e00:	20400d78 	.word	0x20400d78
  402e04:	00401431 	.word	0x00401431
  402e08:	004013fd 	.word	0x004013fd
  402e0c:	20400d7c 	.word	0x20400d7c

00402e10 <prvTimerTask>:
{
  402e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402e14:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402e16:	4e75      	ldr	r6, [pc, #468]	; (402fec <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402e18:	4f75      	ldr	r7, [pc, #468]	; (402ff0 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402e1a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403018 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402e1e:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 40301c <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402e22:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402e24:	681a      	ldr	r2, [r3, #0]
  402e26:	2a00      	cmp	r2, #0
  402e28:	f000 80ce 	beq.w	402fc8 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402e2c:	68db      	ldr	r3, [r3, #12]
  402e2e:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402e30:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402e32:	a804      	add	r0, sp, #16
  402e34:	4b6f      	ldr	r3, [pc, #444]	; (402ff4 <prvTimerTask+0x1e4>)
  402e36:	4798      	blx	r3
  402e38:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402e3a:	9b04      	ldr	r3, [sp, #16]
  402e3c:	2b00      	cmp	r3, #0
  402e3e:	d144      	bne.n	402eca <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402e40:	42a0      	cmp	r0, r4
  402e42:	d212      	bcs.n	402e6a <prvTimerTask+0x5a>
  402e44:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402e46:	1b61      	subs	r1, r4, r5
  402e48:	4b6b      	ldr	r3, [pc, #428]	; (402ff8 <prvTimerTask+0x1e8>)
  402e4a:	6818      	ldr	r0, [r3, #0]
  402e4c:	4b6b      	ldr	r3, [pc, #428]	; (402ffc <prvTimerTask+0x1ec>)
  402e4e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402e50:	4b6b      	ldr	r3, [pc, #428]	; (403000 <prvTimerTask+0x1f0>)
  402e52:	4798      	blx	r3
  402e54:	2800      	cmp	r0, #0
  402e56:	d13a      	bne.n	402ece <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402e58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402e5c:	f8c9 3000 	str.w	r3, [r9]
  402e60:	f3bf 8f4f 	dsb	sy
  402e64:	f3bf 8f6f 	isb	sy
  402e68:	e031      	b.n	402ece <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402e6a:	4b65      	ldr	r3, [pc, #404]	; (403000 <prvTimerTask+0x1f0>)
  402e6c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402e6e:	6833      	ldr	r3, [r6, #0]
  402e70:	68db      	ldr	r3, [r3, #12]
  402e72:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402e76:	f10a 0004 	add.w	r0, sl, #4
  402e7a:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402e7c:	f8da 301c 	ldr.w	r3, [sl, #28]
  402e80:	2b01      	cmp	r3, #1
  402e82:	d004      	beq.n	402e8e <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402e84:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402e88:	4650      	mov	r0, sl
  402e8a:	4798      	blx	r3
  402e8c:	e01f      	b.n	402ece <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402e8e:	f8da 1018 	ldr.w	r1, [sl, #24]
  402e92:	4623      	mov	r3, r4
  402e94:	462a      	mov	r2, r5
  402e96:	4421      	add	r1, r4
  402e98:	4650      	mov	r0, sl
  402e9a:	4d5a      	ldr	r5, [pc, #360]	; (403004 <prvTimerTask+0x1f4>)
  402e9c:	47a8      	blx	r5
  402e9e:	2801      	cmp	r0, #1
  402ea0:	d1f0      	bne.n	402e84 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402ea2:	2100      	movs	r1, #0
  402ea4:	9100      	str	r1, [sp, #0]
  402ea6:	460b      	mov	r3, r1
  402ea8:	4622      	mov	r2, r4
  402eaa:	4650      	mov	r0, sl
  402eac:	4c56      	ldr	r4, [pc, #344]	; (403008 <prvTimerTask+0x1f8>)
  402eae:	47a0      	blx	r4
			configASSERT( xResult );
  402eb0:	2800      	cmp	r0, #0
  402eb2:	d1e7      	bne.n	402e84 <prvTimerTask+0x74>
  402eb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402eb8:	b672      	cpsid	i
  402eba:	f383 8811 	msr	BASEPRI, r3
  402ebe:	f3bf 8f6f 	isb	sy
  402ec2:	f3bf 8f4f 	dsb	sy
  402ec6:	b662      	cpsie	i
  402ec8:	e7fe      	b.n	402ec8 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402eca:	4b4d      	ldr	r3, [pc, #308]	; (403000 <prvTimerTask+0x1f0>)
  402ecc:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402ece:	4d4a      	ldr	r5, [pc, #296]	; (402ff8 <prvTimerTask+0x1e8>)
  402ed0:	4c4e      	ldr	r4, [pc, #312]	; (40300c <prvTimerTask+0x1fc>)
  402ed2:	e006      	b.n	402ee2 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402ed4:	9907      	ldr	r1, [sp, #28]
  402ed6:	9806      	ldr	r0, [sp, #24]
  402ed8:	9b05      	ldr	r3, [sp, #20]
  402eda:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402edc:	9b04      	ldr	r3, [sp, #16]
  402ede:	2b00      	cmp	r3, #0
  402ee0:	da09      	bge.n	402ef6 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402ee2:	2300      	movs	r3, #0
  402ee4:	461a      	mov	r2, r3
  402ee6:	a904      	add	r1, sp, #16
  402ee8:	6828      	ldr	r0, [r5, #0]
  402eea:	47a0      	blx	r4
  402eec:	2800      	cmp	r0, #0
  402eee:	d098      	beq.n	402e22 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402ef0:	9b04      	ldr	r3, [sp, #16]
  402ef2:	2b00      	cmp	r3, #0
  402ef4:	dbee      	blt.n	402ed4 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402ef6:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402efa:	f8da 3014 	ldr.w	r3, [sl, #20]
  402efe:	b113      	cbz	r3, 402f06 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f00:	f10a 0004 	add.w	r0, sl, #4
  402f04:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402f06:	a803      	add	r0, sp, #12
  402f08:	4b3a      	ldr	r3, [pc, #232]	; (402ff4 <prvTimerTask+0x1e4>)
  402f0a:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402f0c:	9b04      	ldr	r3, [sp, #16]
  402f0e:	2b09      	cmp	r3, #9
  402f10:	d8e7      	bhi.n	402ee2 <prvTimerTask+0xd2>
  402f12:	a201      	add	r2, pc, #4	; (adr r2, 402f18 <prvTimerTask+0x108>)
  402f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402f18:	00402f41 	.word	0x00402f41
  402f1c:	00402f41 	.word	0x00402f41
  402f20:	00402f41 	.word	0x00402f41
  402f24:	00402ee3 	.word	0x00402ee3
  402f28:	00402f95 	.word	0x00402f95
  402f2c:	00402fc1 	.word	0x00402fc1
  402f30:	00402f41 	.word	0x00402f41
  402f34:	00402f41 	.word	0x00402f41
  402f38:	00402ee3 	.word	0x00402ee3
  402f3c:	00402f95 	.word	0x00402f95
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402f40:	9c05      	ldr	r4, [sp, #20]
  402f42:	f8da 1018 	ldr.w	r1, [sl, #24]
  402f46:	4623      	mov	r3, r4
  402f48:	4602      	mov	r2, r0
  402f4a:	4421      	add	r1, r4
  402f4c:	4650      	mov	r0, sl
  402f4e:	4c2d      	ldr	r4, [pc, #180]	; (403004 <prvTimerTask+0x1f4>)
  402f50:	47a0      	blx	r4
  402f52:	2801      	cmp	r0, #1
  402f54:	d1bc      	bne.n	402ed0 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402f56:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402f5a:	4650      	mov	r0, sl
  402f5c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402f5e:	f8da 301c 	ldr.w	r3, [sl, #28]
  402f62:	2b01      	cmp	r3, #1
  402f64:	d1b4      	bne.n	402ed0 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402f66:	f8da 2018 	ldr.w	r2, [sl, #24]
  402f6a:	2100      	movs	r1, #0
  402f6c:	9100      	str	r1, [sp, #0]
  402f6e:	460b      	mov	r3, r1
  402f70:	9805      	ldr	r0, [sp, #20]
  402f72:	4402      	add	r2, r0
  402f74:	4650      	mov	r0, sl
  402f76:	4c24      	ldr	r4, [pc, #144]	; (403008 <prvTimerTask+0x1f8>)
  402f78:	47a0      	blx	r4
							configASSERT( xResult );
  402f7a:	2800      	cmp	r0, #0
  402f7c:	d1a8      	bne.n	402ed0 <prvTimerTask+0xc0>
  402f7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f82:	b672      	cpsid	i
  402f84:	f383 8811 	msr	BASEPRI, r3
  402f88:	f3bf 8f6f 	isb	sy
  402f8c:	f3bf 8f4f 	dsb	sy
  402f90:	b662      	cpsie	i
  402f92:	e7fe      	b.n	402f92 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402f94:	9905      	ldr	r1, [sp, #20]
  402f96:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402f9a:	b131      	cbz	r1, 402faa <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402f9c:	4603      	mov	r3, r0
  402f9e:	4602      	mov	r2, r0
  402fa0:	4401      	add	r1, r0
  402fa2:	4650      	mov	r0, sl
  402fa4:	4c17      	ldr	r4, [pc, #92]	; (403004 <prvTimerTask+0x1f4>)
  402fa6:	47a0      	blx	r4
  402fa8:	e792      	b.n	402ed0 <prvTimerTask+0xc0>
  402faa:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fae:	b672      	cpsid	i
  402fb0:	f383 8811 	msr	BASEPRI, r3
  402fb4:	f3bf 8f6f 	isb	sy
  402fb8:	f3bf 8f4f 	dsb	sy
  402fbc:	b662      	cpsie	i
  402fbe:	e7fe      	b.n	402fbe <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402fc0:	4650      	mov	r0, sl
  402fc2:	4b13      	ldr	r3, [pc, #76]	; (403010 <prvTimerTask+0x200>)
  402fc4:	4798      	blx	r3
  402fc6:	e783      	b.n	402ed0 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402fc8:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402fca:	a804      	add	r0, sp, #16
  402fcc:	4b09      	ldr	r3, [pc, #36]	; (402ff4 <prvTimerTask+0x1e4>)
  402fce:	4798      	blx	r3
  402fd0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402fd2:	9b04      	ldr	r3, [sp, #16]
  402fd4:	2b00      	cmp	r3, #0
  402fd6:	f47f af78 	bne.w	402eca <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402fda:	4b0e      	ldr	r3, [pc, #56]	; (403014 <prvTimerTask+0x204>)
  402fdc:	681b      	ldr	r3, [r3, #0]
  402fde:	681a      	ldr	r2, [r3, #0]
  402fe0:	fab2 f282 	clz	r2, r2
  402fe4:	0952      	lsrs	r2, r2, #5
  402fe6:	2400      	movs	r4, #0
  402fe8:	e72d      	b.n	402e46 <prvTimerTask+0x36>
  402fea:	bf00      	nop
  402fec:	20400d78 	.word	0x20400d78
  402ff0:	00402339 	.word	0x00402339
  402ff4:	00402d59 	.word	0x00402d59
  402ff8:	20400dac 	.word	0x20400dac
  402ffc:	00401f99 	.word	0x00401f99
  403000:	004024a1 	.word	0x004024a1
  403004:	00402bc1 	.word	0x00402bc1
  403008:	00402ce9 	.word	0x00402ce9
  40300c:	00401d95 	.word	0x00401d95
  403010:	004017a1 	.word	0x004017a1
  403014:	20400d7c 	.word	0x20400d7c
  403018:	e000ed04 	.word	0xe000ed04
  40301c:	00401431 	.word	0x00401431

00403020 <clk_callback>:
/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/


void clk_callback(void) {
  403020:	b510      	push	{r4, lr}
  403022:	b082      	sub	sp, #8
	int acrescimo = 0;
  403024:	2300      	movs	r3, #0
  403026:	9301      	str	r3, [sp, #4]
	printf("clk_callback \n");
  403028:	4813      	ldr	r0, [pc, #76]	; (403078 <clk_callback+0x58>)
  40302a:	4b14      	ldr	r3, [pc, #80]	; (40307c <clk_callback+0x5c>)
  40302c:	4798      	blx	r3
	if(pio_get(DT_PIO, PIO_INPUT, DT_IDX_MASK)){
  40302e:	2240      	movs	r2, #64	; 0x40
  403030:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403034:	4812      	ldr	r0, [pc, #72]	; (403080 <clk_callback+0x60>)
  403036:	4b13      	ldr	r3, [pc, #76]	; (403084 <clk_callback+0x64>)
  403038:	4798      	blx	r3
  40303a:	b978      	cbnz	r0, 40305c <clk_callback+0x3c>
		printf("Sentido horario \n");
		acrescimo = 1;
		xQueueSendFromISR(xQueueAcrescimo, &acrescimo, NULL);
	} else {
		printf("Sentido anti-horario \n");
  40303c:	4812      	ldr	r0, [pc, #72]	; (403088 <clk_callback+0x68>)
  40303e:	4b0f      	ldr	r3, [pc, #60]	; (40307c <clk_callback+0x5c>)
  403040:	4798      	blx	r3
		acrescimo = -1;
  403042:	a902      	add	r1, sp, #8
  403044:	f04f 33ff 	mov.w	r3, #4294967295
  403048:	f841 3d04 	str.w	r3, [r1, #-4]!
		xQueueSendFromISR(xQueueAcrescimo, &acrescimo, NULL);
  40304c:	2300      	movs	r3, #0
  40304e:	461a      	mov	r2, r3
  403050:	480e      	ldr	r0, [pc, #56]	; (40308c <clk_callback+0x6c>)
  403052:	6800      	ldr	r0, [r0, #0]
  403054:	4c0e      	ldr	r4, [pc, #56]	; (403090 <clk_callback+0x70>)
  403056:	47a0      	blx	r4
	}
}
  403058:	b002      	add	sp, #8
  40305a:	bd10      	pop	{r4, pc}
		printf("Sentido horario \n");
  40305c:	480d      	ldr	r0, [pc, #52]	; (403094 <clk_callback+0x74>)
  40305e:	4b07      	ldr	r3, [pc, #28]	; (40307c <clk_callback+0x5c>)
  403060:	4798      	blx	r3
		acrescimo = 1;
  403062:	a902      	add	r1, sp, #8
  403064:	2301      	movs	r3, #1
  403066:	f841 3d04 	str.w	r3, [r1, #-4]!
		xQueueSendFromISR(xQueueAcrescimo, &acrescimo, NULL);
  40306a:	2300      	movs	r3, #0
  40306c:	461a      	mov	r2, r3
  40306e:	4807      	ldr	r0, [pc, #28]	; (40308c <clk_callback+0x6c>)
  403070:	6800      	ldr	r0, [r0, #0]
  403072:	4c07      	ldr	r4, [pc, #28]	; (403090 <clk_callback+0x70>)
  403074:	47a0      	blx	r4
  403076:	e7ef      	b.n	403058 <clk_callback+0x38>
  403078:	00409f34 	.word	0x00409f34
  40307c:	0040388d 	.word	0x0040388d
  403080:	400e0e00 	.word	0x400e0e00
  403084:	00400b6f 	.word	0x00400b6f
  403088:	00409f58 	.word	0x00409f58
  40308c:	20400e34 	.word	0x20400e34
  403090:	00401c95 	.word	0x00401c95
  403094:	00409f44 	.word	0x00409f44

00403098 <sw_callback>:

void sw_callback(void) {
  403098:	b530      	push	{r4, r5, lr}
  40309a:	b083      	sub	sp, #12
	int contadorCaracteres = 0;
  40309c:	2300      	movs	r3, #0
  40309e:	9301      	str	r3, [sp, #4]
	int reset = 0;
  4030a0:	9300      	str	r3, [sp, #0]
	if(pio_get(SW_PIO, PIO_INPUT, SW_IDX_MASK)){
  4030a2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4030a6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4030aa:	481f      	ldr	r0, [pc, #124]	; (403128 <sw_callback+0x90>)
  4030ac:	4b1f      	ldr	r3, [pc, #124]	; (40312c <sw_callback+0x94>)
  4030ae:	4798      	blx	r3
  4030b0:	2800      	cmp	r0, #0
  4030b2:	d02f      	beq.n	403114 <sw_callback+0x7c>
		printf("Botao solto \n");
  4030b4:	481e      	ldr	r0, [pc, #120]	; (403130 <sw_callback+0x98>)
  4030b6:	4b1f      	ldr	r3, [pc, #124]	; (403134 <sw_callback+0x9c>)
  4030b8:	4798      	blx	r3
		uint32_t delta_t = rtt_read_timer_value(RTT);
  4030ba:	481f      	ldr	r0, [pc, #124]	; (403138 <sw_callback+0xa0>)
  4030bc:	4b1f      	ldr	r3, [pc, #124]	; (40313c <sw_callback+0xa4>)
  4030be:	4798      	blx	r3
		if (delta_t/32768 >= 5){
  4030c0:	f5b0 3f20 	cmp.w	r0, #163840	; 0x28000
  4030c4:	d317      	bcc.n	4030f6 <sw_callback+0x5e>
			printf("Tempo de pressionamento: %d segundos \n", delta_t/32768);
  4030c6:	0bc1      	lsrs	r1, r0, #15
  4030c8:	481d      	ldr	r0, [pc, #116]	; (403140 <sw_callback+0xa8>)
  4030ca:	4c1a      	ldr	r4, [pc, #104]	; (403134 <sw_callback+0x9c>)
  4030cc:	47a0      	blx	r4
			printf("SEGUROU 5 SEGUNDOS \n");
  4030ce:	481d      	ldr	r0, [pc, #116]	; (403144 <sw_callback+0xac>)
  4030d0:	47a0      	blx	r4
			reset = 1;
  4030d2:	ac02      	add	r4, sp, #8
  4030d4:	2301      	movs	r3, #1
  4030d6:	f844 3d08 	str.w	r3, [r4, #-8]!
			xQueueSendFromISR(xQueueReset, &reset, NULL);
  4030da:	2300      	movs	r3, #0
  4030dc:	461a      	mov	r2, r3
  4030de:	4621      	mov	r1, r4
  4030e0:	4819      	ldr	r0, [pc, #100]	; (403148 <sw_callback+0xb0>)
  4030e2:	6800      	ldr	r0, [r0, #0]
  4030e4:	4d19      	ldr	r5, [pc, #100]	; (40314c <sw_callback+0xb4>)
  4030e6:	47a8      	blx	r5
			xQueueSendFromISR(xQueueLED, &reset, NULL);
  4030e8:	2300      	movs	r3, #0
  4030ea:	461a      	mov	r2, r3
  4030ec:	4621      	mov	r1, r4
  4030ee:	4818      	ldr	r0, [pc, #96]	; (403150 <sw_callback+0xb8>)
  4030f0:	6800      	ldr	r0, [r0, #0]
  4030f2:	47a8      	blx	r5
  4030f4:	e015      	b.n	403122 <sw_callback+0x8a>
		} else {
			printf("Tempo de pressionamento: %d milisegundos \n", delta_t/32);
  4030f6:	0941      	lsrs	r1, r0, #5
  4030f8:	4816      	ldr	r0, [pc, #88]	; (403154 <sw_callback+0xbc>)
  4030fa:	4b0e      	ldr	r3, [pc, #56]	; (403134 <sw_callback+0x9c>)
  4030fc:	4798      	blx	r3
			contadorCaracteres = 1;
  4030fe:	a902      	add	r1, sp, #8
  403100:	2301      	movs	r3, #1
  403102:	f841 3d04 	str.w	r3, [r1, #-4]!
			xQueueSendFromISR(xQueueContadorCaracteres, &contadorCaracteres, NULL);
  403106:	2300      	movs	r3, #0
  403108:	461a      	mov	r2, r3
  40310a:	4813      	ldr	r0, [pc, #76]	; (403158 <sw_callback+0xc0>)
  40310c:	6800      	ldr	r0, [r0, #0]
  40310e:	4c0f      	ldr	r4, [pc, #60]	; (40314c <sw_callback+0xb4>)
  403110:	47a0      	blx	r4
  403112:	e006      	b.n	403122 <sw_callback+0x8a>
		}
	} else {
		printf("Botao pressionado \n");
  403114:	4811      	ldr	r0, [pc, #68]	; (40315c <sw_callback+0xc4>)
  403116:	4b07      	ldr	r3, [pc, #28]	; (403134 <sw_callback+0x9c>)
  403118:	4798      	blx	r3
		rtt_init(RTT, 1);
  40311a:	2101      	movs	r1, #1
  40311c:	4806      	ldr	r0, [pc, #24]	; (403138 <sw_callback+0xa0>)
  40311e:	4b10      	ldr	r3, [pc, #64]	; (403160 <sw_callback+0xc8>)
  403120:	4798      	blx	r3
	}
}
  403122:	b003      	add	sp, #12
  403124:	bd30      	pop	{r4, r5, pc}
  403126:	bf00      	nop
  403128:	400e1200 	.word	0x400e1200
  40312c:	00400b6f 	.word	0x00400b6f
  403130:	00409fb8 	.word	0x00409fb8
  403134:	0040388d 	.word	0x0040388d
  403138:	400e1830 	.word	0x400e1830
  40313c:	004001c1 	.word	0x004001c1
  403140:	00409fc8 	.word	0x00409fc8
  403144:	00409ff0 	.word	0x00409ff0
  403148:	20400e30 	.word	0x20400e30
  40314c:	00401c95 	.word	0x00401c95
  403150:	20400e38 	.word	0x20400e38
  403154:	0040a008 	.word	0x0040a008
  403158:	20400e3c 	.word	0x20400e3c
  40315c:	0040a034 	.word	0x0040a034
  403160:	004001ad 	.word	0x004001ad

00403164 <task_led>:
    

	}
}

static void task_led(void *pvParameters) {
  403164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403168:	b082      	sub	sp, #8
	int reset = 0;
  40316a:	2300      	movs	r3, #0
  40316c:	9301      	str	r3, [sp, #4]
	for (;;) {
		if (xQueueReceive(xQueueLED, &reset, 0) == pdTRUE) {
  40316e:	f8df a04c 	ldr.w	sl, [pc, #76]	; 4031bc <task_led+0x58>
  403172:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4031c0 <task_led+0x5c>
			for (int i = 0; i < 20; i++) {
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  403176:	4f0e      	ldr	r7, [pc, #56]	; (4031b0 <task_led+0x4c>)
		if (xQueueReceive(xQueueLED, &reset, 0) == pdTRUE) {
  403178:	2300      	movs	r3, #0
  40317a:	461a      	mov	r2, r3
  40317c:	a901      	add	r1, sp, #4
  40317e:	f8da 0000 	ldr.w	r0, [sl]
  403182:	47c8      	blx	r9
  403184:	2801      	cmp	r0, #1
  403186:	d1f7      	bne.n	403178 <task_led+0x14>
  403188:	2414      	movs	r4, #20
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  40318a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  40318e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4031c4 <task_led+0x60>
  403192:	4631      	mov	r1, r6
  403194:	4638      	mov	r0, r7
  403196:	47c0      	blx	r8
				vTaskDelay(25);
  403198:	2019      	movs	r0, #25
  40319a:	4d06      	ldr	r5, [pc, #24]	; (4031b4 <task_led+0x50>)
  40319c:	47a8      	blx	r5
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  40319e:	4631      	mov	r1, r6
  4031a0:	4638      	mov	r0, r7
  4031a2:	4b05      	ldr	r3, [pc, #20]	; (4031b8 <task_led+0x54>)
  4031a4:	4798      	blx	r3
				vTaskDelay(25);
  4031a6:	2019      	movs	r0, #25
  4031a8:	47a8      	blx	r5
			for (int i = 0; i < 20; i++) {
  4031aa:	3c01      	subs	r4, #1
  4031ac:	d1f1      	bne.n	403192 <task_led+0x2e>
  4031ae:	e7e3      	b.n	403178 <task_led+0x14>
  4031b0:	400e1200 	.word	0x400e1200
  4031b4:	004025c1 	.word	0x004025c1
  4031b8:	00400b6b 	.word	0x00400b6b
  4031bc:	20400e38 	.word	0x20400e38
  4031c0:	00401d95 	.word	0x00401d95
  4031c4:	00400b67 	.word	0x00400b67

004031c8 <task_oled>:
static void task_oled(void *pvParameters) {
  4031c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4031cc:	b08d      	sub	sp, #52	; 0x34
	gfx_mono_ssd1306_init();
  4031ce:	4b86      	ldr	r3, [pc, #536]	; (4033e8 <task_oled+0x220>)
  4031d0:	4798      	blx	r3
	gfx_mono_draw_string("Arthur Cisotto", 0, 0, &sysfont);
  4031d2:	4b86      	ldr	r3, [pc, #536]	; (4033ec <task_oled+0x224>)
  4031d4:	2200      	movs	r2, #0
  4031d6:	4611      	mov	r1, r2
  4031d8:	4885      	ldr	r0, [pc, #532]	; (4033f0 <task_oled+0x228>)
  4031da:	4c86      	ldr	r4, [pc, #536]	; (4033f4 <task_oled+0x22c>)
  4031dc:	47a0      	blx	r4
	int acrescimo = 0;
  4031de:	2300      	movs	r3, #0
  4031e0:	930b      	str	r3, [sp, #44]	; 0x2c
	int contadorCaracteres = 0;
  4031e2:	930a      	str	r3, [sp, #40]	; 0x28
	int reset = 0;
  4031e4:	9309      	str	r3, [sp, #36]	; 0x24
	int caracter4 = 0;
  4031e6:	461e      	mov	r6, r3
	int caracter3 = 0;
  4031e8:	4699      	mov	r9, r3
	int caracter2 = 0;
  4031ea:	9303      	str	r3, [sp, #12]
    int caracter1 = 0;
  4031ec:	9302      	str	r3, [sp, #8]
	int caracterSelecionado = 1;
  4031ee:	2401      	movs	r4, #1
		if (xQueueReceive(xQueueReset, &reset, 0) == pdTRUE) {
  4031f0:	f8df b21c 	ldr.w	fp, [pc, #540]	; 403410 <task_oled+0x248>
  4031f4:	4d80      	ldr	r5, [pc, #512]	; (4033f8 <task_oled+0x230>)
		gfx_mono_draw_string(texto, 0, 20, &sysfont);
  4031f6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4033f4 <task_oled+0x22c>
		vTaskDelay(100);
  4031fa:	4f80      	ldr	r7, [pc, #512]	; (4033fc <task_oled+0x234>)
  4031fc:	e0b2      	b.n	403364 <task_oled+0x19c>
			caracter4 = 0;
  4031fe:	2600      	movs	r6, #0
			caracter3 = 0;
  403200:	46b1      	mov	r9, r6
			caracter2 = 0;
  403202:	9603      	str	r6, [sp, #12]
			caracter1 = 0;
  403204:	9602      	str	r6, [sp, #8]
			caracterSelecionado = 1;
  403206:	2401      	movs	r4, #1
  403208:	e0b5      	b.n	403376 <task_oled+0x1ae>
			caracterSelecionado += contadorCaracteres;
  40320a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40320c:	441c      	add	r4, r3
			if (caracterSelecionado > 4) {
  40320e:	2c04      	cmp	r4, #4
  403210:	f300 8083 	bgt.w	40331a <task_oled+0x152>
			} else if (caracterSelecionado < 1) {
  403214:	2c00      	cmp	r4, #0
  403216:	f300 80b7 	bgt.w	403388 <task_oled+0x1c0>
		if (xQueueReceive(xQueueAcrescimo, &acrescimo, 0) == pdTRUE) {
  40321a:	2300      	movs	r3, #0
  40321c:	461a      	mov	r2, r3
  40321e:	a90b      	add	r1, sp, #44	; 0x2c
  403220:	4877      	ldr	r0, [pc, #476]	; (403400 <task_oled+0x238>)
  403222:	6800      	ldr	r0, [r0, #0]
  403224:	47a8      	blx	r5
  403226:	2801      	cmp	r0, #1
  403228:	d071      	beq.n	40330e <task_oled+0x146>
		sprintf(texto, "0 x %X %X %X %X", caracter1, caracter2, caracter3, caracter4);
  40322a:	9601      	str	r6, [sp, #4]
  40322c:	f8cd 9000 	str.w	r9, [sp]
  403230:	9b03      	ldr	r3, [sp, #12]
  403232:	9a02      	ldr	r2, [sp, #8]
  403234:	4973      	ldr	r1, [pc, #460]	; (403404 <task_oled+0x23c>)
  403236:	a805      	add	r0, sp, #20
  403238:	4c73      	ldr	r4, [pc, #460]	; (403408 <task_oled+0x240>)
  40323a:	47a0      	blx	r4
		gfx_mono_draw_string(texto, 0, 20, &sysfont);
  40323c:	4b6b      	ldr	r3, [pc, #428]	; (4033ec <task_oled+0x224>)
  40323e:	2214      	movs	r2, #20
  403240:	2100      	movs	r1, #0
  403242:	eb0d 0002 	add.w	r0, sp, r2
  403246:	47c0      	blx	r8
		vTaskDelay(100);
  403248:	2064      	movs	r0, #100	; 0x64
  40324a:	47b8      	blx	r7
  40324c:	e04e      	b.n	4032ec <task_oled+0x124>
			if (caracterSelecionado == 1){
  40324e:	2c01      	cmp	r4, #1
  403250:	d024      	beq.n	40329c <task_oled+0xd4>
			if (caracterSelecionado == 2){
  403252:	2c02      	cmp	r4, #2
  403254:	d04f      	beq.n	4032f6 <task_oled+0x12e>
			if (caracterSelecionado == 3){
  403256:	2c03      	cmp	r4, #3
  403258:	d12d      	bne.n	4032b6 <task_oled+0xee>
				caracter3 += acrescimo;
  40325a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40325c:	4499      	add	r9, r3
				if (caracter3 > 15) {
  40325e:	f1b9 0f0f 	cmp.w	r9, #15
  403262:	f300 80bc 	bgt.w	4033de <task_oled+0x216>
					caracter3 = 15;
  403266:	f1b9 0f00 	cmp.w	r9, #0
  40326a:	bfb8      	it	lt
  40326c:	f04f 090f 	movlt.w	r9, #15
		sprintf(texto, "0 x %X %X %X %X", caracter1, caracter2, caracter3, caracter4);
  403270:	9601      	str	r6, [sp, #4]
  403272:	f8cd 9000 	str.w	r9, [sp]
  403276:	9b03      	ldr	r3, [sp, #12]
  403278:	9a02      	ldr	r2, [sp, #8]
  40327a:	4962      	ldr	r1, [pc, #392]	; (403404 <task_oled+0x23c>)
  40327c:	a805      	add	r0, sp, #20
  40327e:	4c62      	ldr	r4, [pc, #392]	; (403408 <task_oled+0x240>)
  403280:	47a0      	blx	r4
		gfx_mono_draw_string(texto, 0, 20, &sysfont);
  403282:	4b5a      	ldr	r3, [pc, #360]	; (4033ec <task_oled+0x224>)
  403284:	2214      	movs	r2, #20
  403286:	2100      	movs	r1, #0
  403288:	eb0d 0002 	add.w	r0, sp, r2
  40328c:	47c0      	blx	r8
		vTaskDelay(100);
  40328e:	2064      	movs	r0, #100	; 0x64
  403290:	47b8      	blx	r7
			texto[8] = ' ';
  403292:	2320      	movs	r3, #32
  403294:	f88d 301c 	strb.w	r3, [sp, #28]
  403298:	2403      	movs	r4, #3
  40329a:	e05b      	b.n	403354 <task_oled+0x18c>
				caracter1 += acrescimo;
  40329c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40329e:	9a02      	ldr	r2, [sp, #8]
  4032a0:	441a      	add	r2, r3
  4032a2:	4613      	mov	r3, r2
				if (caracter1 > 15) {
  4032a4:	2a0f      	cmp	r2, #15
  4032a6:	f300 8094 	bgt.w	4033d2 <task_oled+0x20a>
					caracter1 = 15;
  4032aa:	2a00      	cmp	r2, #0
  4032ac:	bfac      	ite	ge
  4032ae:	4613      	movge	r3, r2
  4032b0:	230f      	movlt	r3, #15
  4032b2:	9302      	str	r3, [sp, #8]
				caracterSelecionado = 4;
  4032b4:	2401      	movs	r4, #1
			if (caracterSelecionado == 4){
  4032b6:	2c04      	cmp	r4, #4
  4032b8:	d16f      	bne.n	40339a <task_oled+0x1d2>
				caracter4 += acrescimo;
  4032ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4032bc:	441e      	add	r6, r3
				if (caracter4 > 15) {
  4032be:	2e0f      	cmp	r6, #15
  4032c0:	f300 8090 	bgt.w	4033e4 <task_oled+0x21c>
					caracter4 = 15;
  4032c4:	2e00      	cmp	r6, #0
  4032c6:	bfb8      	it	lt
  4032c8:	260f      	movlt	r6, #15
		sprintf(texto, "0 x %X %X %X %X", caracter1, caracter2, caracter3, caracter4);
  4032ca:	9601      	str	r6, [sp, #4]
  4032cc:	f8cd 9000 	str.w	r9, [sp]
  4032d0:	9b03      	ldr	r3, [sp, #12]
  4032d2:	9a02      	ldr	r2, [sp, #8]
  4032d4:	494b      	ldr	r1, [pc, #300]	; (403404 <task_oled+0x23c>)
  4032d6:	a805      	add	r0, sp, #20
  4032d8:	4c4b      	ldr	r4, [pc, #300]	; (403408 <task_oled+0x240>)
  4032da:	47a0      	blx	r4
		gfx_mono_draw_string(texto, 0, 20, &sysfont);
  4032dc:	4b43      	ldr	r3, [pc, #268]	; (4033ec <task_oled+0x224>)
  4032de:	2214      	movs	r2, #20
  4032e0:	2100      	movs	r1, #0
  4032e2:	eb0d 0002 	add.w	r0, sp, r2
  4032e6:	47c0      	blx	r8
		vTaskDelay(100);
  4032e8:	2064      	movs	r0, #100	; 0x64
  4032ea:	47b8      	blx	r7
			texto[10] = ' ';
  4032ec:	2320      	movs	r3, #32
  4032ee:	f88d 301e 	strb.w	r3, [sp, #30]
  4032f2:	2404      	movs	r4, #4
  4032f4:	e02e      	b.n	403354 <task_oled+0x18c>
				caracter2 += acrescimo;
  4032f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4032f8:	9a03      	ldr	r2, [sp, #12]
  4032fa:	441a      	add	r2, r3
  4032fc:	4613      	mov	r3, r2
				if (caracter2 > 15) {
  4032fe:	2a0f      	cmp	r2, #15
  403300:	dc6a      	bgt.n	4033d8 <task_oled+0x210>
					caracter2 = 15;
  403302:	2a00      	cmp	r2, #0
  403304:	bfac      	ite	ge
  403306:	4613      	movge	r3, r2
  403308:	230f      	movlt	r3, #15
  40330a:	9303      	str	r3, [sp, #12]
  40330c:	e045      	b.n	40339a <task_oled+0x1d2>
				caracterSelecionado = 4;
  40330e:	2404      	movs	r4, #4
  403310:	e7a1      	b.n	403256 <task_oled+0x8e>
			texto[6] = ' ';
  403312:	2320      	movs	r3, #32
  403314:	f88d 301a 	strb.w	r3, [sp, #26]
  403318:	e01c      	b.n	403354 <task_oled+0x18c>
		if (xQueueReceive(xQueueAcrescimo, &acrescimo, 0) == pdTRUE) {
  40331a:	2300      	movs	r3, #0
  40331c:	461a      	mov	r2, r3
  40331e:	a90b      	add	r1, sp, #44	; 0x2c
  403320:	4837      	ldr	r0, [pc, #220]	; (403400 <task_oled+0x238>)
  403322:	6800      	ldr	r0, [r0, #0]
  403324:	47a8      	blx	r5
  403326:	2801      	cmp	r0, #1
  403328:	d0b8      	beq.n	40329c <task_oled+0xd4>
		sprintf(texto, "0 x %X %X %X %X", caracter1, caracter2, caracter3, caracter4);
  40332a:	9601      	str	r6, [sp, #4]
  40332c:	f8cd 9000 	str.w	r9, [sp]
  403330:	9b03      	ldr	r3, [sp, #12]
  403332:	9a02      	ldr	r2, [sp, #8]
  403334:	4933      	ldr	r1, [pc, #204]	; (403404 <task_oled+0x23c>)
  403336:	a805      	add	r0, sp, #20
  403338:	4c33      	ldr	r4, [pc, #204]	; (403408 <task_oled+0x240>)
  40333a:	47a0      	blx	r4
		gfx_mono_draw_string(texto, 0, 20, &sysfont);
  40333c:	4b2b      	ldr	r3, [pc, #172]	; (4033ec <task_oled+0x224>)
  40333e:	2214      	movs	r2, #20
  403340:	2100      	movs	r1, #0
  403342:	eb0d 0002 	add.w	r0, sp, r2
  403346:	47c0      	blx	r8
		vTaskDelay(100);
  403348:	2064      	movs	r0, #100	; 0x64
  40334a:	47b8      	blx	r7
			texto[4] = ' ';
  40334c:	2320      	movs	r3, #32
  40334e:	f88d 3018 	strb.w	r3, [sp, #24]
  403352:	2401      	movs	r4, #1
		gfx_mono_draw_string(texto, 0, 20, &sysfont);
  403354:	4b25      	ldr	r3, [pc, #148]	; (4033ec <task_oled+0x224>)
  403356:	2214      	movs	r2, #20
  403358:	2100      	movs	r1, #0
  40335a:	eb0d 0002 	add.w	r0, sp, r2
  40335e:	47c0      	blx	r8
		vTaskDelay(100);
  403360:	2064      	movs	r0, #100	; 0x64
  403362:	47b8      	blx	r7
		if (xQueueReceive(xQueueReset, &reset, 0) == pdTRUE) {
  403364:	2300      	movs	r3, #0
  403366:	461a      	mov	r2, r3
  403368:	a909      	add	r1, sp, #36	; 0x24
  40336a:	f8db 0000 	ldr.w	r0, [fp]
  40336e:	47a8      	blx	r5
  403370:	2801      	cmp	r0, #1
  403372:	f43f af44 	beq.w	4031fe <task_oled+0x36>
		if (xQueueReceive(xQueueContadorCaracteres, &contadorCaracteres, 0) ==pdTRUE){
  403376:	2300      	movs	r3, #0
  403378:	461a      	mov	r2, r3
  40337a:	a90a      	add	r1, sp, #40	; 0x28
  40337c:	4823      	ldr	r0, [pc, #140]	; (40340c <task_oled+0x244>)
  40337e:	6800      	ldr	r0, [r0, #0]
  403380:	47a8      	blx	r5
  403382:	2801      	cmp	r0, #1
  403384:	f43f af41 	beq.w	40320a <task_oled+0x42>
		if (xQueueReceive(xQueueAcrescimo, &acrescimo, 0) == pdTRUE) {
  403388:	2300      	movs	r3, #0
  40338a:	461a      	mov	r2, r3
  40338c:	a90b      	add	r1, sp, #44	; 0x2c
  40338e:	481c      	ldr	r0, [pc, #112]	; (403400 <task_oled+0x238>)
  403390:	6800      	ldr	r0, [r0, #0]
  403392:	47a8      	blx	r5
  403394:	2801      	cmp	r0, #1
  403396:	f43f af5a 	beq.w	40324e <task_oled+0x86>
		sprintf(texto, "0 x %X %X %X %X", caracter1, caracter2, caracter3, caracter4);
  40339a:	9601      	str	r6, [sp, #4]
  40339c:	f8cd 9000 	str.w	r9, [sp]
  4033a0:	9b03      	ldr	r3, [sp, #12]
  4033a2:	9a02      	ldr	r2, [sp, #8]
  4033a4:	4917      	ldr	r1, [pc, #92]	; (403404 <task_oled+0x23c>)
  4033a6:	a805      	add	r0, sp, #20
  4033a8:	f8df a05c 	ldr.w	sl, [pc, #92]	; 403408 <task_oled+0x240>
  4033ac:	47d0      	blx	sl
		gfx_mono_draw_string(texto, 0, 20, &sysfont);
  4033ae:	4b0f      	ldr	r3, [pc, #60]	; (4033ec <task_oled+0x224>)
  4033b0:	2214      	movs	r2, #20
  4033b2:	2100      	movs	r1, #0
  4033b4:	eb0d 0002 	add.w	r0, sp, r2
  4033b8:	47c0      	blx	r8
		vTaskDelay(100);
  4033ba:	2064      	movs	r0, #100	; 0x64
  4033bc:	47b8      	blx	r7
		if (caracterSelecionado == 1) {
  4033be:	2c01      	cmp	r4, #1
  4033c0:	d0c4      	beq.n	40334c <task_oled+0x184>
		} else if (caracterSelecionado == 2) {
  4033c2:	2c02      	cmp	r4, #2
  4033c4:	d0a5      	beq.n	403312 <task_oled+0x14a>
		} else if (caracterSelecionado == 3) {
  4033c6:	2c03      	cmp	r4, #3
  4033c8:	f43f af63 	beq.w	403292 <task_oled+0xca>
		} else if (caracterSelecionado == 4) {
  4033cc:	2c04      	cmp	r4, #4
  4033ce:	d1c1      	bne.n	403354 <task_oled+0x18c>
  4033d0:	e78c      	b.n	4032ec <task_oled+0x124>
					caracter1 = 0;
  4033d2:	2300      	movs	r3, #0
  4033d4:	9302      	str	r3, [sp, #8]
  4033d6:	e76d      	b.n	4032b4 <task_oled+0xec>
					caracter2 = 0;
  4033d8:	2300      	movs	r3, #0
  4033da:	9303      	str	r3, [sp, #12]
  4033dc:	e7dd      	b.n	40339a <task_oled+0x1d2>
					caracter3 = 0;
  4033de:	f04f 0900 	mov.w	r9, #0
  4033e2:	e745      	b.n	403270 <task_oled+0xa8>
					caracter4 = 0;
  4033e4:	2600      	movs	r6, #0
  4033e6:	e770      	b.n	4032ca <task_oled+0x102>
  4033e8:	00400599 	.word	0x00400599
  4033ec:	2040000c 	.word	0x2040000c
  4033f0:	0040a048 	.word	0x0040a048
  4033f4:	00400501 	.word	0x00400501
  4033f8:	00401d95 	.word	0x00401d95
  4033fc:	004025c1 	.word	0x004025c1
  403400:	20400e34 	.word	0x20400e34
  403404:	0040a058 	.word	0x0040a058
  403408:	004041e1 	.word	0x004041e1
  40340c:	20400e3c 	.word	0x20400e3c
  403410:	20400e30 	.word	0x20400e30

00403414 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403414:	b5f0      	push	{r4, r5, r6, r7, lr}
  403416:	b083      	sub	sp, #12
  403418:	4605      	mov	r5, r0
  40341a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40341c:	2300      	movs	r3, #0
  40341e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403420:	4b2a      	ldr	r3, [pc, #168]	; (4034cc <usart_serial_getchar+0xb8>)
  403422:	4298      	cmp	r0, r3
  403424:	d013      	beq.n	40344e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403426:	4b2a      	ldr	r3, [pc, #168]	; (4034d0 <usart_serial_getchar+0xbc>)
  403428:	4298      	cmp	r0, r3
  40342a:	d018      	beq.n	40345e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40342c:	4b29      	ldr	r3, [pc, #164]	; (4034d4 <usart_serial_getchar+0xc0>)
  40342e:	4298      	cmp	r0, r3
  403430:	d01d      	beq.n	40346e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403432:	4b29      	ldr	r3, [pc, #164]	; (4034d8 <usart_serial_getchar+0xc4>)
  403434:	429d      	cmp	r5, r3
  403436:	d022      	beq.n	40347e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403438:	4b28      	ldr	r3, [pc, #160]	; (4034dc <usart_serial_getchar+0xc8>)
  40343a:	429d      	cmp	r5, r3
  40343c:	d027      	beq.n	40348e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40343e:	4b28      	ldr	r3, [pc, #160]	; (4034e0 <usart_serial_getchar+0xcc>)
  403440:	429d      	cmp	r5, r3
  403442:	d02e      	beq.n	4034a2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403444:	4b27      	ldr	r3, [pc, #156]	; (4034e4 <usart_serial_getchar+0xd0>)
  403446:	429d      	cmp	r5, r3
  403448:	d035      	beq.n	4034b6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40344a:	b003      	add	sp, #12
  40344c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40344e:	461f      	mov	r7, r3
  403450:	4e25      	ldr	r6, [pc, #148]	; (4034e8 <usart_serial_getchar+0xd4>)
  403452:	4621      	mov	r1, r4
  403454:	4638      	mov	r0, r7
  403456:	47b0      	blx	r6
  403458:	2800      	cmp	r0, #0
  40345a:	d1fa      	bne.n	403452 <usart_serial_getchar+0x3e>
  40345c:	e7e9      	b.n	403432 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40345e:	461f      	mov	r7, r3
  403460:	4e21      	ldr	r6, [pc, #132]	; (4034e8 <usart_serial_getchar+0xd4>)
  403462:	4621      	mov	r1, r4
  403464:	4638      	mov	r0, r7
  403466:	47b0      	blx	r6
  403468:	2800      	cmp	r0, #0
  40346a:	d1fa      	bne.n	403462 <usart_serial_getchar+0x4e>
  40346c:	e7e4      	b.n	403438 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40346e:	461f      	mov	r7, r3
  403470:	4e1d      	ldr	r6, [pc, #116]	; (4034e8 <usart_serial_getchar+0xd4>)
  403472:	4621      	mov	r1, r4
  403474:	4638      	mov	r0, r7
  403476:	47b0      	blx	r6
  403478:	2800      	cmp	r0, #0
  40347a:	d1fa      	bne.n	403472 <usart_serial_getchar+0x5e>
  40347c:	e7df      	b.n	40343e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40347e:	461f      	mov	r7, r3
  403480:	4e19      	ldr	r6, [pc, #100]	; (4034e8 <usart_serial_getchar+0xd4>)
  403482:	4621      	mov	r1, r4
  403484:	4638      	mov	r0, r7
  403486:	47b0      	blx	r6
  403488:	2800      	cmp	r0, #0
  40348a:	d1fa      	bne.n	403482 <usart_serial_getchar+0x6e>
  40348c:	e7da      	b.n	403444 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40348e:	461e      	mov	r6, r3
  403490:	4d16      	ldr	r5, [pc, #88]	; (4034ec <usart_serial_getchar+0xd8>)
  403492:	a901      	add	r1, sp, #4
  403494:	4630      	mov	r0, r6
  403496:	47a8      	blx	r5
  403498:	2800      	cmp	r0, #0
  40349a:	d1fa      	bne.n	403492 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40349c:	9b01      	ldr	r3, [sp, #4]
  40349e:	7023      	strb	r3, [r4, #0]
  4034a0:	e7d3      	b.n	40344a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4034a2:	461e      	mov	r6, r3
  4034a4:	4d11      	ldr	r5, [pc, #68]	; (4034ec <usart_serial_getchar+0xd8>)
  4034a6:	a901      	add	r1, sp, #4
  4034a8:	4630      	mov	r0, r6
  4034aa:	47a8      	blx	r5
  4034ac:	2800      	cmp	r0, #0
  4034ae:	d1fa      	bne.n	4034a6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4034b0:	9b01      	ldr	r3, [sp, #4]
  4034b2:	7023      	strb	r3, [r4, #0]
  4034b4:	e7c9      	b.n	40344a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4034b6:	461e      	mov	r6, r3
  4034b8:	4d0c      	ldr	r5, [pc, #48]	; (4034ec <usart_serial_getchar+0xd8>)
  4034ba:	a901      	add	r1, sp, #4
  4034bc:	4630      	mov	r0, r6
  4034be:	47a8      	blx	r5
  4034c0:	2800      	cmp	r0, #0
  4034c2:	d1fa      	bne.n	4034ba <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4034c4:	9b01      	ldr	r3, [sp, #4]
  4034c6:	7023      	strb	r3, [r4, #0]
}
  4034c8:	e7bf      	b.n	40344a <usart_serial_getchar+0x36>
  4034ca:	bf00      	nop
  4034cc:	400e0800 	.word	0x400e0800
  4034d0:	400e0a00 	.word	0x400e0a00
  4034d4:	400e1a00 	.word	0x400e1a00
  4034d8:	400e1c00 	.word	0x400e1c00
  4034dc:	40024000 	.word	0x40024000
  4034e0:	40028000 	.word	0x40028000
  4034e4:	4002c000 	.word	0x4002c000
  4034e8:	00400ff3 	.word	0x00400ff3
  4034ec:	004010ff 	.word	0x004010ff

004034f0 <usart_serial_putchar>:
{
  4034f0:	b570      	push	{r4, r5, r6, lr}
  4034f2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4034f4:	4b2a      	ldr	r3, [pc, #168]	; (4035a0 <usart_serial_putchar+0xb0>)
  4034f6:	4298      	cmp	r0, r3
  4034f8:	d013      	beq.n	403522 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4034fa:	4b2a      	ldr	r3, [pc, #168]	; (4035a4 <usart_serial_putchar+0xb4>)
  4034fc:	4298      	cmp	r0, r3
  4034fe:	d019      	beq.n	403534 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403500:	4b29      	ldr	r3, [pc, #164]	; (4035a8 <usart_serial_putchar+0xb8>)
  403502:	4298      	cmp	r0, r3
  403504:	d01f      	beq.n	403546 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403506:	4b29      	ldr	r3, [pc, #164]	; (4035ac <usart_serial_putchar+0xbc>)
  403508:	4298      	cmp	r0, r3
  40350a:	d025      	beq.n	403558 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40350c:	4b28      	ldr	r3, [pc, #160]	; (4035b0 <usart_serial_putchar+0xc0>)
  40350e:	4298      	cmp	r0, r3
  403510:	d02b      	beq.n	40356a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403512:	4b28      	ldr	r3, [pc, #160]	; (4035b4 <usart_serial_putchar+0xc4>)
  403514:	4298      	cmp	r0, r3
  403516:	d031      	beq.n	40357c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403518:	4b27      	ldr	r3, [pc, #156]	; (4035b8 <usart_serial_putchar+0xc8>)
  40351a:	4298      	cmp	r0, r3
  40351c:	d037      	beq.n	40358e <usart_serial_putchar+0x9e>
	return 0;
  40351e:	2000      	movs	r0, #0
}
  403520:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403522:	461e      	mov	r6, r3
  403524:	4d25      	ldr	r5, [pc, #148]	; (4035bc <usart_serial_putchar+0xcc>)
  403526:	4621      	mov	r1, r4
  403528:	4630      	mov	r0, r6
  40352a:	47a8      	blx	r5
  40352c:	2800      	cmp	r0, #0
  40352e:	d1fa      	bne.n	403526 <usart_serial_putchar+0x36>
		return 1;
  403530:	2001      	movs	r0, #1
  403532:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403534:	461e      	mov	r6, r3
  403536:	4d21      	ldr	r5, [pc, #132]	; (4035bc <usart_serial_putchar+0xcc>)
  403538:	4621      	mov	r1, r4
  40353a:	4630      	mov	r0, r6
  40353c:	47a8      	blx	r5
  40353e:	2800      	cmp	r0, #0
  403540:	d1fa      	bne.n	403538 <usart_serial_putchar+0x48>
		return 1;
  403542:	2001      	movs	r0, #1
  403544:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403546:	461e      	mov	r6, r3
  403548:	4d1c      	ldr	r5, [pc, #112]	; (4035bc <usart_serial_putchar+0xcc>)
  40354a:	4621      	mov	r1, r4
  40354c:	4630      	mov	r0, r6
  40354e:	47a8      	blx	r5
  403550:	2800      	cmp	r0, #0
  403552:	d1fa      	bne.n	40354a <usart_serial_putchar+0x5a>
		return 1;
  403554:	2001      	movs	r0, #1
  403556:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403558:	461e      	mov	r6, r3
  40355a:	4d18      	ldr	r5, [pc, #96]	; (4035bc <usart_serial_putchar+0xcc>)
  40355c:	4621      	mov	r1, r4
  40355e:	4630      	mov	r0, r6
  403560:	47a8      	blx	r5
  403562:	2800      	cmp	r0, #0
  403564:	d1fa      	bne.n	40355c <usart_serial_putchar+0x6c>
		return 1;
  403566:	2001      	movs	r0, #1
  403568:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40356a:	461e      	mov	r6, r3
  40356c:	4d14      	ldr	r5, [pc, #80]	; (4035c0 <usart_serial_putchar+0xd0>)
  40356e:	4621      	mov	r1, r4
  403570:	4630      	mov	r0, r6
  403572:	47a8      	blx	r5
  403574:	2800      	cmp	r0, #0
  403576:	d1fa      	bne.n	40356e <usart_serial_putchar+0x7e>
		return 1;
  403578:	2001      	movs	r0, #1
  40357a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40357c:	461e      	mov	r6, r3
  40357e:	4d10      	ldr	r5, [pc, #64]	; (4035c0 <usart_serial_putchar+0xd0>)
  403580:	4621      	mov	r1, r4
  403582:	4630      	mov	r0, r6
  403584:	47a8      	blx	r5
  403586:	2800      	cmp	r0, #0
  403588:	d1fa      	bne.n	403580 <usart_serial_putchar+0x90>
		return 1;
  40358a:	2001      	movs	r0, #1
  40358c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40358e:	461e      	mov	r6, r3
  403590:	4d0b      	ldr	r5, [pc, #44]	; (4035c0 <usart_serial_putchar+0xd0>)
  403592:	4621      	mov	r1, r4
  403594:	4630      	mov	r0, r6
  403596:	47a8      	blx	r5
  403598:	2800      	cmp	r0, #0
  40359a:	d1fa      	bne.n	403592 <usart_serial_putchar+0xa2>
		return 1;
  40359c:	2001      	movs	r0, #1
  40359e:	bd70      	pop	{r4, r5, r6, pc}
  4035a0:	400e0800 	.word	0x400e0800
  4035a4:	400e0a00 	.word	0x400e0a00
  4035a8:	400e1a00 	.word	0x400e1a00
  4035ac:	400e1c00 	.word	0x400e1c00
  4035b0:	40024000 	.word	0x40024000
  4035b4:	40028000 	.word	0x40028000
  4035b8:	4002c000 	.word	0x4002c000
  4035bc:	00400fe1 	.word	0x00400fe1
  4035c0:	004010e9 	.word	0x004010e9

004035c4 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  4035c4:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4035c6:	460a      	mov	r2, r1
  4035c8:	4601      	mov	r1, r0
  4035ca:	4802      	ldr	r0, [pc, #8]	; (4035d4 <vApplicationStackOverflowHook+0x10>)
  4035cc:	4b02      	ldr	r3, [pc, #8]	; (4035d8 <vApplicationStackOverflowHook+0x14>)
  4035ce:	4798      	blx	r3
  4035d0:	e7fe      	b.n	4035d0 <vApplicationStackOverflowHook+0xc>
  4035d2:	bf00      	nop
  4035d4:	0040a068 	.word	0x0040a068
  4035d8:	0040388d 	.word	0x0040388d

004035dc <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  4035dc:	4770      	bx	lr

004035de <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4035de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4035e2:	b672      	cpsid	i
  4035e4:	f383 8811 	msr	BASEPRI, r3
  4035e8:	f3bf 8f6f 	isb	sy
  4035ec:	f3bf 8f4f 	dsb	sy
  4035f0:	b662      	cpsie	i
  4035f2:	e7fe      	b.n	4035f2 <vApplicationMallocFailedHook+0x14>

004035f4 <io_init>:
	/* Specify that stdout should not be buffered. */
	setbuf(stdout, NULL);
}


void io_init(void){
  4035f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4035f8:	b083      	sub	sp, #12
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4035fa:	4c2e      	ldr	r4, [pc, #184]	; (4036b4 <io_init+0xc0>)
  4035fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  403600:	6023      	str	r3, [r4, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  403602:	f04f 0980 	mov.w	r9, #128	; 0x80
  403606:	f884 9310 	strb.w	r9, [r4, #784]	; 0x310
	NVIC_EnableIRQ(CLK_PIO_ID);
	NVIC_SetPriority(CLK_PIO_ID, 4);

	pio_configure(CLK_PIO, PIO_INPUT, CLK_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  40360a:	4e2b      	ldr	r6, [pc, #172]	; (4036b8 <io_init+0xc4>)
  40360c:	2309      	movs	r3, #9
  40360e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403612:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403616:	4630      	mov	r0, r6
  403618:	4d28      	ldr	r5, [pc, #160]	; (4036bc <io_init+0xc8>)
  40361a:	47a8      	blx	r5
	pio_set_debounce_filter(CLK_PIO, CLK_IDX_MASK, 60);
  40361c:	223c      	movs	r2, #60	; 0x3c
  40361e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403622:	4630      	mov	r0, r6
  403624:	4f26      	ldr	r7, [pc, #152]	; (4036c0 <io_init+0xcc>)
  403626:	47b8      	blx	r7
	pio_enable_interrupt(CLK_PIO, CLK_IDX_MASK);
  403628:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40362c:	4630      	mov	r0, r6
  40362e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4036d8 <io_init+0xe4>
  403632:	47c0      	blx	r8
	pio_handler_set(CLK_PIO, CLK_PIO_ID, CLK_IDX_MASK, PIO_IT_FALL_EDGE , clk_callback);
  403634:	4b23      	ldr	r3, [pc, #140]	; (4036c4 <io_init+0xd0>)
  403636:	9300      	str	r3, [sp, #0]
  403638:	2350      	movs	r3, #80	; 0x50
  40363a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40363e:	2110      	movs	r1, #16
  403640:	4630      	mov	r0, r6
  403642:	4e21      	ldr	r6, [pc, #132]	; (4036c8 <io_init+0xd4>)
  403644:	47b0      	blx	r6
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  403646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40364a:	6023      	str	r3, [r4, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40364c:	f884 930c 	strb.w	r9, [r4, #780]	; 0x30c

	NVIC_EnableIRQ(SW_PIO_ID);
	NVIC_SetPriority(SW_PIO_ID, 4);

	pio_configure(DT_PIO, PIO_INPUT, DT_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403650:	4c1e      	ldr	r4, [pc, #120]	; (4036cc <io_init+0xd8>)
  403652:	2309      	movs	r3, #9
  403654:	2240      	movs	r2, #64	; 0x40
  403656:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40365a:	4620      	mov	r0, r4
  40365c:	47a8      	blx	r5
	pio_set_debounce_filter(DT_PIO, DT_IDX_MASK, 60);
  40365e:	223c      	movs	r2, #60	; 0x3c
  403660:	2140      	movs	r1, #64	; 0x40
  403662:	4620      	mov	r0, r4
  403664:	47b8      	blx	r7

	pio_configure(SW_PIO, PIO_INPUT, SW_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403666:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  40366a:	2309      	movs	r3, #9
  40366c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403670:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403674:	4620      	mov	r0, r4
  403676:	47a8      	blx	r5
	pio_set_debounce_filter(SW_PIO, SW_IDX_MASK, 60);
  403678:	223c      	movs	r2, #60	; 0x3c
  40367a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40367e:	4620      	mov	r0, r4
  403680:	47b8      	blx	r7
	pio_enable_interrupt(SW_PIO, SW_IDX_MASK);
  403682:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403686:	4620      	mov	r0, r4
  403688:	47c0      	blx	r8
	pio_handler_set(SW_PIO, SW_PIO_ID, SW_IDX_MASK, PIO_IT_EDGE , sw_callback);
  40368a:	4b11      	ldr	r3, [pc, #68]	; (4036d0 <io_init+0xdc>)
  40368c:	9300      	str	r3, [sp, #0]
  40368e:	2340      	movs	r3, #64	; 0x40
  403690:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403694:	210c      	movs	r1, #12
  403696:	4620      	mov	r0, r4
  403698:	47b0      	blx	r6

	pmc_enable_periph_clk(LED_PIO_ID);
  40369a:	200c      	movs	r0, #12
  40369c:	4b0d      	ldr	r3, [pc, #52]	; (4036d4 <io_init+0xe0>)
  40369e:	4798      	blx	r3
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_PIO_IDX_MASK, PIO_DEFAULT);
  4036a0:	2300      	movs	r3, #0
  4036a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4036a6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4036aa:	4620      	mov	r0, r4
  4036ac:	47a8      	blx	r5
}
  4036ae:	b003      	add	sp, #12
  4036b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4036b4:	e000e100 	.word	0xe000e100
  4036b8:	400e1400 	.word	0x400e1400
  4036bc:	00400c79 	.word	0x00400c79
  4036c0:	00400b4d 	.word	0x00400b4d
  4036c4:	00403021 	.word	0x00403021
  4036c8:	00400d99 	.word	0x00400d99
  4036cc:	400e0e00 	.word	0x400e0e00
  4036d0:	00403099 	.word	0x00403099
  4036d4:	00400f8d 	.word	0x00400f8d
  4036d8:	00400d3b 	.word	0x00400d3b

004036dc <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/


int main(void) {
  4036dc:	b500      	push	{lr}
  4036de:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  4036e0:	4b38      	ldr	r3, [pc, #224]	; (4037c4 <main+0xe8>)
  4036e2:	4798      	blx	r3
	board_init();
  4036e4:	4b38      	ldr	r3, [pc, #224]	; (4037c8 <main+0xec>)
  4036e6:	4798      	blx	r3
	io_init();
  4036e8:	4b38      	ldr	r3, [pc, #224]	; (4037cc <main+0xf0>)
  4036ea:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4036ec:	4d38      	ldr	r5, [pc, #224]	; (4037d0 <main+0xf4>)
  4036ee:	4b39      	ldr	r3, [pc, #228]	; (4037d4 <main+0xf8>)
  4036f0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4036f2:	4a39      	ldr	r2, [pc, #228]	; (4037d8 <main+0xfc>)
  4036f4:	4b39      	ldr	r3, [pc, #228]	; (4037dc <main+0x100>)
  4036f6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4036f8:	4a39      	ldr	r2, [pc, #228]	; (4037e0 <main+0x104>)
  4036fa:	4b3a      	ldr	r3, [pc, #232]	; (4037e4 <main+0x108>)
  4036fc:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  4036fe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403702:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403704:	23c0      	movs	r3, #192	; 0xc0
  403706:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403708:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40370c:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  40370e:	2400      	movs	r4, #0
  403710:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403712:	9408      	str	r4, [sp, #32]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  403714:	200e      	movs	r0, #14
  403716:	4b34      	ldr	r3, [pc, #208]	; (4037e8 <main+0x10c>)
  403718:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  40371a:	4a34      	ldr	r2, [pc, #208]	; (4037ec <main+0x110>)
  40371c:	a904      	add	r1, sp, #16
  40371e:	4628      	mov	r0, r5
  403720:	4b33      	ldr	r3, [pc, #204]	; (4037f0 <main+0x114>)
  403722:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403724:	4628      	mov	r0, r5
  403726:	4b33      	ldr	r3, [pc, #204]	; (4037f4 <main+0x118>)
  403728:	4798      	blx	r3
		usart_enable_rx(p_usart);
  40372a:	4628      	mov	r0, r5
  40372c:	4b32      	ldr	r3, [pc, #200]	; (4037f8 <main+0x11c>)
  40372e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403730:	4e32      	ldr	r6, [pc, #200]	; (4037fc <main+0x120>)
  403732:	6833      	ldr	r3, [r6, #0]
  403734:	4621      	mov	r1, r4
  403736:	6898      	ldr	r0, [r3, #8]
  403738:	4d31      	ldr	r5, [pc, #196]	; (403800 <main+0x124>)
  40373a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  40373c:	6833      	ldr	r3, [r6, #0]
  40373e:	4621      	mov	r1, r4
  403740:	6858      	ldr	r0, [r3, #4]
  403742:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403744:	6833      	ldr	r3, [r6, #0]
  403746:	4621      	mov	r1, r4
  403748:	6898      	ldr	r0, [r3, #8]
  40374a:	47a8      	blx	r5

	/* Initialize the console uart */
	configure_console();

	xQueueAcrescimo = xQueueCreate(1, sizeof(int));
  40374c:	4622      	mov	r2, r4
  40374e:	2104      	movs	r1, #4
  403750:	2001      	movs	r0, #1
  403752:	4d2c      	ldr	r5, [pc, #176]	; (403804 <main+0x128>)
  403754:	47a8      	blx	r5
  403756:	4b2c      	ldr	r3, [pc, #176]	; (403808 <main+0x12c>)
  403758:	6018      	str	r0, [r3, #0]
	xQueueContadorCaracteres = xQueueCreate(1, sizeof(int));
  40375a:	4622      	mov	r2, r4
  40375c:	2104      	movs	r1, #4
  40375e:	2001      	movs	r0, #1
  403760:	47a8      	blx	r5
  403762:	4b2a      	ldr	r3, [pc, #168]	; (40380c <main+0x130>)
  403764:	6018      	str	r0, [r3, #0]
	xQueueReset = xQueueCreate(1, sizeof(int));
  403766:	4622      	mov	r2, r4
  403768:	2104      	movs	r1, #4
  40376a:	2001      	movs	r0, #1
  40376c:	47a8      	blx	r5
  40376e:	4b28      	ldr	r3, [pc, #160]	; (403810 <main+0x134>)
  403770:	6018      	str	r0, [r3, #0]
	xQueueLED = xQueueCreate(1, sizeof(int));
  403772:	4622      	mov	r2, r4
  403774:	2104      	movs	r1, #4
  403776:	2001      	movs	r0, #1
  403778:	47a8      	blx	r5
  40377a:	4b26      	ldr	r3, [pc, #152]	; (403814 <main+0x138>)
  40377c:	6018      	str	r0, [r3, #0]

	/* Create task to control oled */
	if (xTaskCreate(task_oled, "oled", TASK_STACK_SIZE, NULL, TASK_STACK_PRIORITY, NULL) != pdPASS) {
  40377e:	9403      	str	r4, [sp, #12]
  403780:	9402      	str	r4, [sp, #8]
  403782:	9401      	str	r4, [sp, #4]
  403784:	9400      	str	r4, [sp, #0]
  403786:	4623      	mov	r3, r4
  403788:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  40378c:	4922      	ldr	r1, [pc, #136]	; (403818 <main+0x13c>)
  40378e:	4823      	ldr	r0, [pc, #140]	; (40381c <main+0x140>)
  403790:	4c23      	ldr	r4, [pc, #140]	; (403820 <main+0x144>)
  403792:	47a0      	blx	r4
  403794:	2801      	cmp	r0, #1
  403796:	d002      	beq.n	40379e <main+0xc2>
	  printf("Failed to create oled task\r\n");
  403798:	4822      	ldr	r0, [pc, #136]	; (403824 <main+0x148>)
  40379a:	4b23      	ldr	r3, [pc, #140]	; (403828 <main+0x14c>)
  40379c:	4798      	blx	r3
	}

	/* Create task to control led */
	if (xTaskCreate(task_led, "led", TASK_STACK_SIZE, NULL, TASK_STACK_PRIORITY, NULL) != pdPASS) {
  40379e:	2300      	movs	r3, #0
  4037a0:	9303      	str	r3, [sp, #12]
  4037a2:	9302      	str	r3, [sp, #8]
  4037a4:	9301      	str	r3, [sp, #4]
  4037a6:	9300      	str	r3, [sp, #0]
  4037a8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4037ac:	491f      	ldr	r1, [pc, #124]	; (40382c <main+0x150>)
  4037ae:	4820      	ldr	r0, [pc, #128]	; (403830 <main+0x154>)
  4037b0:	4c1b      	ldr	r4, [pc, #108]	; (403820 <main+0x144>)
  4037b2:	47a0      	blx	r4
  4037b4:	2801      	cmp	r0, #1
  4037b6:	d002      	beq.n	4037be <main+0xe2>
	  printf("Failed to create led task\r\n");
  4037b8:	481e      	ldr	r0, [pc, #120]	; (403834 <main+0x158>)
  4037ba:	4b1b      	ldr	r3, [pc, #108]	; (403828 <main+0x14c>)
  4037bc:	4798      	blx	r3
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
  4037be:	4b1e      	ldr	r3, [pc, #120]	; (403838 <main+0x15c>)
  4037c0:	4798      	blx	r3
  4037c2:	e7fe      	b.n	4037c2 <main+0xe6>
  4037c4:	004008b9 	.word	0x004008b9
  4037c8:	004009b5 	.word	0x004009b5
  4037cc:	004035f5 	.word	0x004035f5
  4037d0:	40028000 	.word	0x40028000
  4037d4:	20400dec 	.word	0x20400dec
  4037d8:	004034f1 	.word	0x004034f1
  4037dc:	20400de8 	.word	0x20400de8
  4037e0:	00403415 	.word	0x00403415
  4037e4:	20400de4 	.word	0x20400de4
  4037e8:	00400f8d 	.word	0x00400f8d
  4037ec:	08f0d180 	.word	0x08f0d180
  4037f0:	00401089 	.word	0x00401089
  4037f4:	004010dd 	.word	0x004010dd
  4037f8:	004010e3 	.word	0x004010e3
  4037fc:	20400024 	.word	0x20400024
  403800:	00404041 	.word	0x00404041
  403804:	00401a35 	.word	0x00401a35
  403808:	20400e34 	.word	0x20400e34
  40380c:	20400e3c 	.word	0x20400e3c
  403810:	20400e30 	.word	0x20400e30
  403814:	20400e38 	.word	0x20400e38
  403818:	00409f70 	.word	0x00409f70
  40381c:	004031c9 	.word	0x004031c9
  403820:	00402075 	.word	0x00402075
  403824:	00409f78 	.word	0x00409f78
  403828:	0040388d 	.word	0x0040388d
  40382c:	00409f98 	.word	0x00409f98
  403830:	00403165 	.word	0x00403165
  403834:	00409f9c 	.word	0x00409f9c
  403838:	004022a9 	.word	0x004022a9

0040383c <__libc_init_array>:
  40383c:	b570      	push	{r4, r5, r6, lr}
  40383e:	4e0f      	ldr	r6, [pc, #60]	; (40387c <__libc_init_array+0x40>)
  403840:	4d0f      	ldr	r5, [pc, #60]	; (403880 <__libc_init_array+0x44>)
  403842:	1b76      	subs	r6, r6, r5
  403844:	10b6      	asrs	r6, r6, #2
  403846:	bf18      	it	ne
  403848:	2400      	movne	r4, #0
  40384a:	d005      	beq.n	403858 <__libc_init_array+0x1c>
  40384c:	3401      	adds	r4, #1
  40384e:	f855 3b04 	ldr.w	r3, [r5], #4
  403852:	4798      	blx	r3
  403854:	42a6      	cmp	r6, r4
  403856:	d1f9      	bne.n	40384c <__libc_init_array+0x10>
  403858:	4e0a      	ldr	r6, [pc, #40]	; (403884 <__libc_init_array+0x48>)
  40385a:	4d0b      	ldr	r5, [pc, #44]	; (403888 <__libc_init_array+0x4c>)
  40385c:	1b76      	subs	r6, r6, r5
  40385e:	f006 fd63 	bl	40a328 <_init>
  403862:	10b6      	asrs	r6, r6, #2
  403864:	bf18      	it	ne
  403866:	2400      	movne	r4, #0
  403868:	d006      	beq.n	403878 <__libc_init_array+0x3c>
  40386a:	3401      	adds	r4, #1
  40386c:	f855 3b04 	ldr.w	r3, [r5], #4
  403870:	4798      	blx	r3
  403872:	42a6      	cmp	r6, r4
  403874:	d1f9      	bne.n	40386a <__libc_init_array+0x2e>
  403876:	bd70      	pop	{r4, r5, r6, pc}
  403878:	bd70      	pop	{r4, r5, r6, pc}
  40387a:	bf00      	nop
  40387c:	0040a334 	.word	0x0040a334
  403880:	0040a334 	.word	0x0040a334
  403884:	0040a33c 	.word	0x0040a33c
  403888:	0040a334 	.word	0x0040a334

0040388c <iprintf>:
  40388c:	b40f      	push	{r0, r1, r2, r3}
  40388e:	b500      	push	{lr}
  403890:	4907      	ldr	r1, [pc, #28]	; (4038b0 <iprintf+0x24>)
  403892:	b083      	sub	sp, #12
  403894:	ab04      	add	r3, sp, #16
  403896:	6808      	ldr	r0, [r1, #0]
  403898:	f853 2b04 	ldr.w	r2, [r3], #4
  40389c:	6881      	ldr	r1, [r0, #8]
  40389e:	9301      	str	r3, [sp, #4]
  4038a0:	f001 ffaa 	bl	4057f8 <_vfiprintf_r>
  4038a4:	b003      	add	sp, #12
  4038a6:	f85d eb04 	ldr.w	lr, [sp], #4
  4038aa:	b004      	add	sp, #16
  4038ac:	4770      	bx	lr
  4038ae:	bf00      	nop
  4038b0:	20400024 	.word	0x20400024

004038b4 <malloc>:
  4038b4:	4b02      	ldr	r3, [pc, #8]	; (4038c0 <malloc+0xc>)
  4038b6:	4601      	mov	r1, r0
  4038b8:	6818      	ldr	r0, [r3, #0]
  4038ba:	f000 b80b 	b.w	4038d4 <_malloc_r>
  4038be:	bf00      	nop
  4038c0:	20400024 	.word	0x20400024

004038c4 <free>:
  4038c4:	4b02      	ldr	r3, [pc, #8]	; (4038d0 <free+0xc>)
  4038c6:	4601      	mov	r1, r0
  4038c8:	6818      	ldr	r0, [r3, #0]
  4038ca:	f004 b871 	b.w	4079b0 <_free_r>
  4038ce:	bf00      	nop
  4038d0:	20400024 	.word	0x20400024

004038d4 <_malloc_r>:
  4038d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038d8:	f101 060b 	add.w	r6, r1, #11
  4038dc:	2e16      	cmp	r6, #22
  4038de:	b083      	sub	sp, #12
  4038e0:	4605      	mov	r5, r0
  4038e2:	f240 809e 	bls.w	403a22 <_malloc_r+0x14e>
  4038e6:	f036 0607 	bics.w	r6, r6, #7
  4038ea:	f100 80bd 	bmi.w	403a68 <_malloc_r+0x194>
  4038ee:	42b1      	cmp	r1, r6
  4038f0:	f200 80ba 	bhi.w	403a68 <_malloc_r+0x194>
  4038f4:	f000 fb86 	bl	404004 <__malloc_lock>
  4038f8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4038fc:	f0c0 8293 	bcc.w	403e26 <_malloc_r+0x552>
  403900:	0a73      	lsrs	r3, r6, #9
  403902:	f000 80b8 	beq.w	403a76 <_malloc_r+0x1a2>
  403906:	2b04      	cmp	r3, #4
  403908:	f200 8179 	bhi.w	403bfe <_malloc_r+0x32a>
  40390c:	09b3      	lsrs	r3, r6, #6
  40390e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403912:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403916:	00c3      	lsls	r3, r0, #3
  403918:	4fbf      	ldr	r7, [pc, #764]	; (403c18 <_malloc_r+0x344>)
  40391a:	443b      	add	r3, r7
  40391c:	f1a3 0108 	sub.w	r1, r3, #8
  403920:	685c      	ldr	r4, [r3, #4]
  403922:	42a1      	cmp	r1, r4
  403924:	d106      	bne.n	403934 <_malloc_r+0x60>
  403926:	e00c      	b.n	403942 <_malloc_r+0x6e>
  403928:	2a00      	cmp	r2, #0
  40392a:	f280 80aa 	bge.w	403a82 <_malloc_r+0x1ae>
  40392e:	68e4      	ldr	r4, [r4, #12]
  403930:	42a1      	cmp	r1, r4
  403932:	d006      	beq.n	403942 <_malloc_r+0x6e>
  403934:	6863      	ldr	r3, [r4, #4]
  403936:	f023 0303 	bic.w	r3, r3, #3
  40393a:	1b9a      	subs	r2, r3, r6
  40393c:	2a0f      	cmp	r2, #15
  40393e:	ddf3      	ble.n	403928 <_malloc_r+0x54>
  403940:	4670      	mov	r0, lr
  403942:	693c      	ldr	r4, [r7, #16]
  403944:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403c2c <_malloc_r+0x358>
  403948:	4574      	cmp	r4, lr
  40394a:	f000 81ab 	beq.w	403ca4 <_malloc_r+0x3d0>
  40394e:	6863      	ldr	r3, [r4, #4]
  403950:	f023 0303 	bic.w	r3, r3, #3
  403954:	1b9a      	subs	r2, r3, r6
  403956:	2a0f      	cmp	r2, #15
  403958:	f300 8190 	bgt.w	403c7c <_malloc_r+0x3a8>
  40395c:	2a00      	cmp	r2, #0
  40395e:	f8c7 e014 	str.w	lr, [r7, #20]
  403962:	f8c7 e010 	str.w	lr, [r7, #16]
  403966:	f280 809d 	bge.w	403aa4 <_malloc_r+0x1d0>
  40396a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40396e:	f080 8161 	bcs.w	403c34 <_malloc_r+0x360>
  403972:	08db      	lsrs	r3, r3, #3
  403974:	f103 0c01 	add.w	ip, r3, #1
  403978:	1099      	asrs	r1, r3, #2
  40397a:	687a      	ldr	r2, [r7, #4]
  40397c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403980:	f8c4 8008 	str.w	r8, [r4, #8]
  403984:	2301      	movs	r3, #1
  403986:	408b      	lsls	r3, r1
  403988:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40398c:	4313      	orrs	r3, r2
  40398e:	3908      	subs	r1, #8
  403990:	60e1      	str	r1, [r4, #12]
  403992:	607b      	str	r3, [r7, #4]
  403994:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403998:	f8c8 400c 	str.w	r4, [r8, #12]
  40399c:	1082      	asrs	r2, r0, #2
  40399e:	2401      	movs	r4, #1
  4039a0:	4094      	lsls	r4, r2
  4039a2:	429c      	cmp	r4, r3
  4039a4:	f200 808b 	bhi.w	403abe <_malloc_r+0x1ea>
  4039a8:	421c      	tst	r4, r3
  4039aa:	d106      	bne.n	4039ba <_malloc_r+0xe6>
  4039ac:	f020 0003 	bic.w	r0, r0, #3
  4039b0:	0064      	lsls	r4, r4, #1
  4039b2:	421c      	tst	r4, r3
  4039b4:	f100 0004 	add.w	r0, r0, #4
  4039b8:	d0fa      	beq.n	4039b0 <_malloc_r+0xdc>
  4039ba:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4039be:	46cc      	mov	ip, r9
  4039c0:	4680      	mov	r8, r0
  4039c2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4039c6:	459c      	cmp	ip, r3
  4039c8:	d107      	bne.n	4039da <_malloc_r+0x106>
  4039ca:	e16d      	b.n	403ca8 <_malloc_r+0x3d4>
  4039cc:	2a00      	cmp	r2, #0
  4039ce:	f280 817b 	bge.w	403cc8 <_malloc_r+0x3f4>
  4039d2:	68db      	ldr	r3, [r3, #12]
  4039d4:	459c      	cmp	ip, r3
  4039d6:	f000 8167 	beq.w	403ca8 <_malloc_r+0x3d4>
  4039da:	6859      	ldr	r1, [r3, #4]
  4039dc:	f021 0103 	bic.w	r1, r1, #3
  4039e0:	1b8a      	subs	r2, r1, r6
  4039e2:	2a0f      	cmp	r2, #15
  4039e4:	ddf2      	ble.n	4039cc <_malloc_r+0xf8>
  4039e6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4039ea:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4039ee:	9300      	str	r3, [sp, #0]
  4039f0:	199c      	adds	r4, r3, r6
  4039f2:	4628      	mov	r0, r5
  4039f4:	f046 0601 	orr.w	r6, r6, #1
  4039f8:	f042 0501 	orr.w	r5, r2, #1
  4039fc:	605e      	str	r6, [r3, #4]
  4039fe:	f8c8 c00c 	str.w	ip, [r8, #12]
  403a02:	f8cc 8008 	str.w	r8, [ip, #8]
  403a06:	617c      	str	r4, [r7, #20]
  403a08:	613c      	str	r4, [r7, #16]
  403a0a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403a0e:	f8c4 e008 	str.w	lr, [r4, #8]
  403a12:	6065      	str	r5, [r4, #4]
  403a14:	505a      	str	r2, [r3, r1]
  403a16:	f000 fafb 	bl	404010 <__malloc_unlock>
  403a1a:	9b00      	ldr	r3, [sp, #0]
  403a1c:	f103 0408 	add.w	r4, r3, #8
  403a20:	e01e      	b.n	403a60 <_malloc_r+0x18c>
  403a22:	2910      	cmp	r1, #16
  403a24:	d820      	bhi.n	403a68 <_malloc_r+0x194>
  403a26:	f000 faed 	bl	404004 <__malloc_lock>
  403a2a:	2610      	movs	r6, #16
  403a2c:	2318      	movs	r3, #24
  403a2e:	2002      	movs	r0, #2
  403a30:	4f79      	ldr	r7, [pc, #484]	; (403c18 <_malloc_r+0x344>)
  403a32:	443b      	add	r3, r7
  403a34:	f1a3 0208 	sub.w	r2, r3, #8
  403a38:	685c      	ldr	r4, [r3, #4]
  403a3a:	4294      	cmp	r4, r2
  403a3c:	f000 813d 	beq.w	403cba <_malloc_r+0x3e6>
  403a40:	6863      	ldr	r3, [r4, #4]
  403a42:	68e1      	ldr	r1, [r4, #12]
  403a44:	68a6      	ldr	r6, [r4, #8]
  403a46:	f023 0303 	bic.w	r3, r3, #3
  403a4a:	4423      	add	r3, r4
  403a4c:	4628      	mov	r0, r5
  403a4e:	685a      	ldr	r2, [r3, #4]
  403a50:	60f1      	str	r1, [r6, #12]
  403a52:	f042 0201 	orr.w	r2, r2, #1
  403a56:	608e      	str	r6, [r1, #8]
  403a58:	605a      	str	r2, [r3, #4]
  403a5a:	f000 fad9 	bl	404010 <__malloc_unlock>
  403a5e:	3408      	adds	r4, #8
  403a60:	4620      	mov	r0, r4
  403a62:	b003      	add	sp, #12
  403a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a68:	2400      	movs	r4, #0
  403a6a:	230c      	movs	r3, #12
  403a6c:	4620      	mov	r0, r4
  403a6e:	602b      	str	r3, [r5, #0]
  403a70:	b003      	add	sp, #12
  403a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a76:	2040      	movs	r0, #64	; 0x40
  403a78:	f44f 7300 	mov.w	r3, #512	; 0x200
  403a7c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403a80:	e74a      	b.n	403918 <_malloc_r+0x44>
  403a82:	4423      	add	r3, r4
  403a84:	68e1      	ldr	r1, [r4, #12]
  403a86:	685a      	ldr	r2, [r3, #4]
  403a88:	68a6      	ldr	r6, [r4, #8]
  403a8a:	f042 0201 	orr.w	r2, r2, #1
  403a8e:	60f1      	str	r1, [r6, #12]
  403a90:	4628      	mov	r0, r5
  403a92:	608e      	str	r6, [r1, #8]
  403a94:	605a      	str	r2, [r3, #4]
  403a96:	f000 fabb 	bl	404010 <__malloc_unlock>
  403a9a:	3408      	adds	r4, #8
  403a9c:	4620      	mov	r0, r4
  403a9e:	b003      	add	sp, #12
  403aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403aa4:	4423      	add	r3, r4
  403aa6:	4628      	mov	r0, r5
  403aa8:	685a      	ldr	r2, [r3, #4]
  403aaa:	f042 0201 	orr.w	r2, r2, #1
  403aae:	605a      	str	r2, [r3, #4]
  403ab0:	f000 faae 	bl	404010 <__malloc_unlock>
  403ab4:	3408      	adds	r4, #8
  403ab6:	4620      	mov	r0, r4
  403ab8:	b003      	add	sp, #12
  403aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403abe:	68bc      	ldr	r4, [r7, #8]
  403ac0:	6863      	ldr	r3, [r4, #4]
  403ac2:	f023 0803 	bic.w	r8, r3, #3
  403ac6:	45b0      	cmp	r8, r6
  403ac8:	d304      	bcc.n	403ad4 <_malloc_r+0x200>
  403aca:	eba8 0306 	sub.w	r3, r8, r6
  403ace:	2b0f      	cmp	r3, #15
  403ad0:	f300 8085 	bgt.w	403bde <_malloc_r+0x30a>
  403ad4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403c30 <_malloc_r+0x35c>
  403ad8:	4b50      	ldr	r3, [pc, #320]	; (403c1c <_malloc_r+0x348>)
  403ada:	f8d9 2000 	ldr.w	r2, [r9]
  403ade:	681b      	ldr	r3, [r3, #0]
  403ae0:	3201      	adds	r2, #1
  403ae2:	4433      	add	r3, r6
  403ae4:	eb04 0a08 	add.w	sl, r4, r8
  403ae8:	f000 8155 	beq.w	403d96 <_malloc_r+0x4c2>
  403aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403af0:	330f      	adds	r3, #15
  403af2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403af6:	f02b 0b0f 	bic.w	fp, fp, #15
  403afa:	4659      	mov	r1, fp
  403afc:	4628      	mov	r0, r5
  403afe:	f000 fa8d 	bl	40401c <_sbrk_r>
  403b02:	1c41      	adds	r1, r0, #1
  403b04:	4602      	mov	r2, r0
  403b06:	f000 80fc 	beq.w	403d02 <_malloc_r+0x42e>
  403b0a:	4582      	cmp	sl, r0
  403b0c:	f200 80f7 	bhi.w	403cfe <_malloc_r+0x42a>
  403b10:	4b43      	ldr	r3, [pc, #268]	; (403c20 <_malloc_r+0x34c>)
  403b12:	6819      	ldr	r1, [r3, #0]
  403b14:	4459      	add	r1, fp
  403b16:	6019      	str	r1, [r3, #0]
  403b18:	f000 814d 	beq.w	403db6 <_malloc_r+0x4e2>
  403b1c:	f8d9 0000 	ldr.w	r0, [r9]
  403b20:	3001      	adds	r0, #1
  403b22:	bf1b      	ittet	ne
  403b24:	eba2 0a0a 	subne.w	sl, r2, sl
  403b28:	4451      	addne	r1, sl
  403b2a:	f8c9 2000 	streq.w	r2, [r9]
  403b2e:	6019      	strne	r1, [r3, #0]
  403b30:	f012 0107 	ands.w	r1, r2, #7
  403b34:	f000 8115 	beq.w	403d62 <_malloc_r+0x48e>
  403b38:	f1c1 0008 	rsb	r0, r1, #8
  403b3c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403b40:	4402      	add	r2, r0
  403b42:	3108      	adds	r1, #8
  403b44:	eb02 090b 	add.w	r9, r2, fp
  403b48:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403b4c:	eba1 0909 	sub.w	r9, r1, r9
  403b50:	4649      	mov	r1, r9
  403b52:	4628      	mov	r0, r5
  403b54:	9301      	str	r3, [sp, #4]
  403b56:	9200      	str	r2, [sp, #0]
  403b58:	f000 fa60 	bl	40401c <_sbrk_r>
  403b5c:	1c43      	adds	r3, r0, #1
  403b5e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403b62:	f000 8143 	beq.w	403dec <_malloc_r+0x518>
  403b66:	1a80      	subs	r0, r0, r2
  403b68:	4448      	add	r0, r9
  403b6a:	f040 0001 	orr.w	r0, r0, #1
  403b6e:	6819      	ldr	r1, [r3, #0]
  403b70:	60ba      	str	r2, [r7, #8]
  403b72:	4449      	add	r1, r9
  403b74:	42bc      	cmp	r4, r7
  403b76:	6050      	str	r0, [r2, #4]
  403b78:	6019      	str	r1, [r3, #0]
  403b7a:	d017      	beq.n	403bac <_malloc_r+0x2d8>
  403b7c:	f1b8 0f0f 	cmp.w	r8, #15
  403b80:	f240 80fb 	bls.w	403d7a <_malloc_r+0x4a6>
  403b84:	6860      	ldr	r0, [r4, #4]
  403b86:	f1a8 020c 	sub.w	r2, r8, #12
  403b8a:	f022 0207 	bic.w	r2, r2, #7
  403b8e:	eb04 0e02 	add.w	lr, r4, r2
  403b92:	f000 0001 	and.w	r0, r0, #1
  403b96:	f04f 0c05 	mov.w	ip, #5
  403b9a:	4310      	orrs	r0, r2
  403b9c:	2a0f      	cmp	r2, #15
  403b9e:	6060      	str	r0, [r4, #4]
  403ba0:	f8ce c004 	str.w	ip, [lr, #4]
  403ba4:	f8ce c008 	str.w	ip, [lr, #8]
  403ba8:	f200 8117 	bhi.w	403dda <_malloc_r+0x506>
  403bac:	4b1d      	ldr	r3, [pc, #116]	; (403c24 <_malloc_r+0x350>)
  403bae:	68bc      	ldr	r4, [r7, #8]
  403bb0:	681a      	ldr	r2, [r3, #0]
  403bb2:	4291      	cmp	r1, r2
  403bb4:	bf88      	it	hi
  403bb6:	6019      	strhi	r1, [r3, #0]
  403bb8:	4b1b      	ldr	r3, [pc, #108]	; (403c28 <_malloc_r+0x354>)
  403bba:	681a      	ldr	r2, [r3, #0]
  403bbc:	4291      	cmp	r1, r2
  403bbe:	6862      	ldr	r2, [r4, #4]
  403bc0:	bf88      	it	hi
  403bc2:	6019      	strhi	r1, [r3, #0]
  403bc4:	f022 0203 	bic.w	r2, r2, #3
  403bc8:	4296      	cmp	r6, r2
  403bca:	eba2 0306 	sub.w	r3, r2, r6
  403bce:	d801      	bhi.n	403bd4 <_malloc_r+0x300>
  403bd0:	2b0f      	cmp	r3, #15
  403bd2:	dc04      	bgt.n	403bde <_malloc_r+0x30a>
  403bd4:	4628      	mov	r0, r5
  403bd6:	f000 fa1b 	bl	404010 <__malloc_unlock>
  403bda:	2400      	movs	r4, #0
  403bdc:	e740      	b.n	403a60 <_malloc_r+0x18c>
  403bde:	19a2      	adds	r2, r4, r6
  403be0:	f043 0301 	orr.w	r3, r3, #1
  403be4:	f046 0601 	orr.w	r6, r6, #1
  403be8:	6066      	str	r6, [r4, #4]
  403bea:	4628      	mov	r0, r5
  403bec:	60ba      	str	r2, [r7, #8]
  403bee:	6053      	str	r3, [r2, #4]
  403bf0:	f000 fa0e 	bl	404010 <__malloc_unlock>
  403bf4:	3408      	adds	r4, #8
  403bf6:	4620      	mov	r0, r4
  403bf8:	b003      	add	sp, #12
  403bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bfe:	2b14      	cmp	r3, #20
  403c00:	d971      	bls.n	403ce6 <_malloc_r+0x412>
  403c02:	2b54      	cmp	r3, #84	; 0x54
  403c04:	f200 80a3 	bhi.w	403d4e <_malloc_r+0x47a>
  403c08:	0b33      	lsrs	r3, r6, #12
  403c0a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403c0e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403c12:	00c3      	lsls	r3, r0, #3
  403c14:	e680      	b.n	403918 <_malloc_r+0x44>
  403c16:	bf00      	nop
  403c18:	20400450 	.word	0x20400450
  403c1c:	20400de0 	.word	0x20400de0
  403c20:	20400db0 	.word	0x20400db0
  403c24:	20400dd8 	.word	0x20400dd8
  403c28:	20400ddc 	.word	0x20400ddc
  403c2c:	20400458 	.word	0x20400458
  403c30:	20400858 	.word	0x20400858
  403c34:	0a5a      	lsrs	r2, r3, #9
  403c36:	2a04      	cmp	r2, #4
  403c38:	d95b      	bls.n	403cf2 <_malloc_r+0x41e>
  403c3a:	2a14      	cmp	r2, #20
  403c3c:	f200 80ae 	bhi.w	403d9c <_malloc_r+0x4c8>
  403c40:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403c44:	00c9      	lsls	r1, r1, #3
  403c46:	325b      	adds	r2, #91	; 0x5b
  403c48:	eb07 0c01 	add.w	ip, r7, r1
  403c4c:	5879      	ldr	r1, [r7, r1]
  403c4e:	f1ac 0c08 	sub.w	ip, ip, #8
  403c52:	458c      	cmp	ip, r1
  403c54:	f000 8088 	beq.w	403d68 <_malloc_r+0x494>
  403c58:	684a      	ldr	r2, [r1, #4]
  403c5a:	f022 0203 	bic.w	r2, r2, #3
  403c5e:	4293      	cmp	r3, r2
  403c60:	d273      	bcs.n	403d4a <_malloc_r+0x476>
  403c62:	6889      	ldr	r1, [r1, #8]
  403c64:	458c      	cmp	ip, r1
  403c66:	d1f7      	bne.n	403c58 <_malloc_r+0x384>
  403c68:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403c6c:	687b      	ldr	r3, [r7, #4]
  403c6e:	60e2      	str	r2, [r4, #12]
  403c70:	f8c4 c008 	str.w	ip, [r4, #8]
  403c74:	6094      	str	r4, [r2, #8]
  403c76:	f8cc 400c 	str.w	r4, [ip, #12]
  403c7a:	e68f      	b.n	40399c <_malloc_r+0xc8>
  403c7c:	19a1      	adds	r1, r4, r6
  403c7e:	f046 0c01 	orr.w	ip, r6, #1
  403c82:	f042 0601 	orr.w	r6, r2, #1
  403c86:	f8c4 c004 	str.w	ip, [r4, #4]
  403c8a:	4628      	mov	r0, r5
  403c8c:	6179      	str	r1, [r7, #20]
  403c8e:	6139      	str	r1, [r7, #16]
  403c90:	f8c1 e00c 	str.w	lr, [r1, #12]
  403c94:	f8c1 e008 	str.w	lr, [r1, #8]
  403c98:	604e      	str	r6, [r1, #4]
  403c9a:	50e2      	str	r2, [r4, r3]
  403c9c:	f000 f9b8 	bl	404010 <__malloc_unlock>
  403ca0:	3408      	adds	r4, #8
  403ca2:	e6dd      	b.n	403a60 <_malloc_r+0x18c>
  403ca4:	687b      	ldr	r3, [r7, #4]
  403ca6:	e679      	b.n	40399c <_malloc_r+0xc8>
  403ca8:	f108 0801 	add.w	r8, r8, #1
  403cac:	f018 0f03 	tst.w	r8, #3
  403cb0:	f10c 0c08 	add.w	ip, ip, #8
  403cb4:	f47f ae85 	bne.w	4039c2 <_malloc_r+0xee>
  403cb8:	e02d      	b.n	403d16 <_malloc_r+0x442>
  403cba:	68dc      	ldr	r4, [r3, #12]
  403cbc:	42a3      	cmp	r3, r4
  403cbe:	bf08      	it	eq
  403cc0:	3002      	addeq	r0, #2
  403cc2:	f43f ae3e 	beq.w	403942 <_malloc_r+0x6e>
  403cc6:	e6bb      	b.n	403a40 <_malloc_r+0x16c>
  403cc8:	4419      	add	r1, r3
  403cca:	461c      	mov	r4, r3
  403ccc:	684a      	ldr	r2, [r1, #4]
  403cce:	68db      	ldr	r3, [r3, #12]
  403cd0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403cd4:	f042 0201 	orr.w	r2, r2, #1
  403cd8:	604a      	str	r2, [r1, #4]
  403cda:	4628      	mov	r0, r5
  403cdc:	60f3      	str	r3, [r6, #12]
  403cde:	609e      	str	r6, [r3, #8]
  403ce0:	f000 f996 	bl	404010 <__malloc_unlock>
  403ce4:	e6bc      	b.n	403a60 <_malloc_r+0x18c>
  403ce6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403cea:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403cee:	00c3      	lsls	r3, r0, #3
  403cf0:	e612      	b.n	403918 <_malloc_r+0x44>
  403cf2:	099a      	lsrs	r2, r3, #6
  403cf4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403cf8:	00c9      	lsls	r1, r1, #3
  403cfa:	3238      	adds	r2, #56	; 0x38
  403cfc:	e7a4      	b.n	403c48 <_malloc_r+0x374>
  403cfe:	42bc      	cmp	r4, r7
  403d00:	d054      	beq.n	403dac <_malloc_r+0x4d8>
  403d02:	68bc      	ldr	r4, [r7, #8]
  403d04:	6862      	ldr	r2, [r4, #4]
  403d06:	f022 0203 	bic.w	r2, r2, #3
  403d0a:	e75d      	b.n	403bc8 <_malloc_r+0x2f4>
  403d0c:	f859 3908 	ldr.w	r3, [r9], #-8
  403d10:	4599      	cmp	r9, r3
  403d12:	f040 8086 	bne.w	403e22 <_malloc_r+0x54e>
  403d16:	f010 0f03 	tst.w	r0, #3
  403d1a:	f100 30ff 	add.w	r0, r0, #4294967295
  403d1e:	d1f5      	bne.n	403d0c <_malloc_r+0x438>
  403d20:	687b      	ldr	r3, [r7, #4]
  403d22:	ea23 0304 	bic.w	r3, r3, r4
  403d26:	607b      	str	r3, [r7, #4]
  403d28:	0064      	lsls	r4, r4, #1
  403d2a:	429c      	cmp	r4, r3
  403d2c:	f63f aec7 	bhi.w	403abe <_malloc_r+0x1ea>
  403d30:	2c00      	cmp	r4, #0
  403d32:	f43f aec4 	beq.w	403abe <_malloc_r+0x1ea>
  403d36:	421c      	tst	r4, r3
  403d38:	4640      	mov	r0, r8
  403d3a:	f47f ae3e 	bne.w	4039ba <_malloc_r+0xe6>
  403d3e:	0064      	lsls	r4, r4, #1
  403d40:	421c      	tst	r4, r3
  403d42:	f100 0004 	add.w	r0, r0, #4
  403d46:	d0fa      	beq.n	403d3e <_malloc_r+0x46a>
  403d48:	e637      	b.n	4039ba <_malloc_r+0xe6>
  403d4a:	468c      	mov	ip, r1
  403d4c:	e78c      	b.n	403c68 <_malloc_r+0x394>
  403d4e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403d52:	d815      	bhi.n	403d80 <_malloc_r+0x4ac>
  403d54:	0bf3      	lsrs	r3, r6, #15
  403d56:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403d5a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403d5e:	00c3      	lsls	r3, r0, #3
  403d60:	e5da      	b.n	403918 <_malloc_r+0x44>
  403d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403d66:	e6ed      	b.n	403b44 <_malloc_r+0x270>
  403d68:	687b      	ldr	r3, [r7, #4]
  403d6a:	1092      	asrs	r2, r2, #2
  403d6c:	2101      	movs	r1, #1
  403d6e:	fa01 f202 	lsl.w	r2, r1, r2
  403d72:	4313      	orrs	r3, r2
  403d74:	607b      	str	r3, [r7, #4]
  403d76:	4662      	mov	r2, ip
  403d78:	e779      	b.n	403c6e <_malloc_r+0x39a>
  403d7a:	2301      	movs	r3, #1
  403d7c:	6053      	str	r3, [r2, #4]
  403d7e:	e729      	b.n	403bd4 <_malloc_r+0x300>
  403d80:	f240 5254 	movw	r2, #1364	; 0x554
  403d84:	4293      	cmp	r3, r2
  403d86:	d822      	bhi.n	403dce <_malloc_r+0x4fa>
  403d88:	0cb3      	lsrs	r3, r6, #18
  403d8a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403d8e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403d92:	00c3      	lsls	r3, r0, #3
  403d94:	e5c0      	b.n	403918 <_malloc_r+0x44>
  403d96:	f103 0b10 	add.w	fp, r3, #16
  403d9a:	e6ae      	b.n	403afa <_malloc_r+0x226>
  403d9c:	2a54      	cmp	r2, #84	; 0x54
  403d9e:	d829      	bhi.n	403df4 <_malloc_r+0x520>
  403da0:	0b1a      	lsrs	r2, r3, #12
  403da2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403da6:	00c9      	lsls	r1, r1, #3
  403da8:	326e      	adds	r2, #110	; 0x6e
  403daa:	e74d      	b.n	403c48 <_malloc_r+0x374>
  403dac:	4b20      	ldr	r3, [pc, #128]	; (403e30 <_malloc_r+0x55c>)
  403dae:	6819      	ldr	r1, [r3, #0]
  403db0:	4459      	add	r1, fp
  403db2:	6019      	str	r1, [r3, #0]
  403db4:	e6b2      	b.n	403b1c <_malloc_r+0x248>
  403db6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403dba:	2800      	cmp	r0, #0
  403dbc:	f47f aeae 	bne.w	403b1c <_malloc_r+0x248>
  403dc0:	eb08 030b 	add.w	r3, r8, fp
  403dc4:	68ba      	ldr	r2, [r7, #8]
  403dc6:	f043 0301 	orr.w	r3, r3, #1
  403dca:	6053      	str	r3, [r2, #4]
  403dcc:	e6ee      	b.n	403bac <_malloc_r+0x2d8>
  403dce:	207f      	movs	r0, #127	; 0x7f
  403dd0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403dd4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403dd8:	e59e      	b.n	403918 <_malloc_r+0x44>
  403dda:	f104 0108 	add.w	r1, r4, #8
  403dde:	4628      	mov	r0, r5
  403de0:	9300      	str	r3, [sp, #0]
  403de2:	f003 fde5 	bl	4079b0 <_free_r>
  403de6:	9b00      	ldr	r3, [sp, #0]
  403de8:	6819      	ldr	r1, [r3, #0]
  403dea:	e6df      	b.n	403bac <_malloc_r+0x2d8>
  403dec:	2001      	movs	r0, #1
  403dee:	f04f 0900 	mov.w	r9, #0
  403df2:	e6bc      	b.n	403b6e <_malloc_r+0x29a>
  403df4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403df8:	d805      	bhi.n	403e06 <_malloc_r+0x532>
  403dfa:	0bda      	lsrs	r2, r3, #15
  403dfc:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403e00:	00c9      	lsls	r1, r1, #3
  403e02:	3277      	adds	r2, #119	; 0x77
  403e04:	e720      	b.n	403c48 <_malloc_r+0x374>
  403e06:	f240 5154 	movw	r1, #1364	; 0x554
  403e0a:	428a      	cmp	r2, r1
  403e0c:	d805      	bhi.n	403e1a <_malloc_r+0x546>
  403e0e:	0c9a      	lsrs	r2, r3, #18
  403e10:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403e14:	00c9      	lsls	r1, r1, #3
  403e16:	327c      	adds	r2, #124	; 0x7c
  403e18:	e716      	b.n	403c48 <_malloc_r+0x374>
  403e1a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403e1e:	227e      	movs	r2, #126	; 0x7e
  403e20:	e712      	b.n	403c48 <_malloc_r+0x374>
  403e22:	687b      	ldr	r3, [r7, #4]
  403e24:	e780      	b.n	403d28 <_malloc_r+0x454>
  403e26:	08f0      	lsrs	r0, r6, #3
  403e28:	f106 0308 	add.w	r3, r6, #8
  403e2c:	e600      	b.n	403a30 <_malloc_r+0x15c>
  403e2e:	bf00      	nop
  403e30:	20400db0 	.word	0x20400db0

00403e34 <memcpy>:
  403e34:	4684      	mov	ip, r0
  403e36:	ea41 0300 	orr.w	r3, r1, r0
  403e3a:	f013 0303 	ands.w	r3, r3, #3
  403e3e:	d16d      	bne.n	403f1c <memcpy+0xe8>
  403e40:	3a40      	subs	r2, #64	; 0x40
  403e42:	d341      	bcc.n	403ec8 <memcpy+0x94>
  403e44:	f851 3b04 	ldr.w	r3, [r1], #4
  403e48:	f840 3b04 	str.w	r3, [r0], #4
  403e4c:	f851 3b04 	ldr.w	r3, [r1], #4
  403e50:	f840 3b04 	str.w	r3, [r0], #4
  403e54:	f851 3b04 	ldr.w	r3, [r1], #4
  403e58:	f840 3b04 	str.w	r3, [r0], #4
  403e5c:	f851 3b04 	ldr.w	r3, [r1], #4
  403e60:	f840 3b04 	str.w	r3, [r0], #4
  403e64:	f851 3b04 	ldr.w	r3, [r1], #4
  403e68:	f840 3b04 	str.w	r3, [r0], #4
  403e6c:	f851 3b04 	ldr.w	r3, [r1], #4
  403e70:	f840 3b04 	str.w	r3, [r0], #4
  403e74:	f851 3b04 	ldr.w	r3, [r1], #4
  403e78:	f840 3b04 	str.w	r3, [r0], #4
  403e7c:	f851 3b04 	ldr.w	r3, [r1], #4
  403e80:	f840 3b04 	str.w	r3, [r0], #4
  403e84:	f851 3b04 	ldr.w	r3, [r1], #4
  403e88:	f840 3b04 	str.w	r3, [r0], #4
  403e8c:	f851 3b04 	ldr.w	r3, [r1], #4
  403e90:	f840 3b04 	str.w	r3, [r0], #4
  403e94:	f851 3b04 	ldr.w	r3, [r1], #4
  403e98:	f840 3b04 	str.w	r3, [r0], #4
  403e9c:	f851 3b04 	ldr.w	r3, [r1], #4
  403ea0:	f840 3b04 	str.w	r3, [r0], #4
  403ea4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ea8:	f840 3b04 	str.w	r3, [r0], #4
  403eac:	f851 3b04 	ldr.w	r3, [r1], #4
  403eb0:	f840 3b04 	str.w	r3, [r0], #4
  403eb4:	f851 3b04 	ldr.w	r3, [r1], #4
  403eb8:	f840 3b04 	str.w	r3, [r0], #4
  403ebc:	f851 3b04 	ldr.w	r3, [r1], #4
  403ec0:	f840 3b04 	str.w	r3, [r0], #4
  403ec4:	3a40      	subs	r2, #64	; 0x40
  403ec6:	d2bd      	bcs.n	403e44 <memcpy+0x10>
  403ec8:	3230      	adds	r2, #48	; 0x30
  403eca:	d311      	bcc.n	403ef0 <memcpy+0xbc>
  403ecc:	f851 3b04 	ldr.w	r3, [r1], #4
  403ed0:	f840 3b04 	str.w	r3, [r0], #4
  403ed4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ed8:	f840 3b04 	str.w	r3, [r0], #4
  403edc:	f851 3b04 	ldr.w	r3, [r1], #4
  403ee0:	f840 3b04 	str.w	r3, [r0], #4
  403ee4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ee8:	f840 3b04 	str.w	r3, [r0], #4
  403eec:	3a10      	subs	r2, #16
  403eee:	d2ed      	bcs.n	403ecc <memcpy+0x98>
  403ef0:	320c      	adds	r2, #12
  403ef2:	d305      	bcc.n	403f00 <memcpy+0xcc>
  403ef4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ef8:	f840 3b04 	str.w	r3, [r0], #4
  403efc:	3a04      	subs	r2, #4
  403efe:	d2f9      	bcs.n	403ef4 <memcpy+0xc0>
  403f00:	3204      	adds	r2, #4
  403f02:	d008      	beq.n	403f16 <memcpy+0xe2>
  403f04:	07d2      	lsls	r2, r2, #31
  403f06:	bf1c      	itt	ne
  403f08:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403f0c:	f800 3b01 	strbne.w	r3, [r0], #1
  403f10:	d301      	bcc.n	403f16 <memcpy+0xe2>
  403f12:	880b      	ldrh	r3, [r1, #0]
  403f14:	8003      	strh	r3, [r0, #0]
  403f16:	4660      	mov	r0, ip
  403f18:	4770      	bx	lr
  403f1a:	bf00      	nop
  403f1c:	2a08      	cmp	r2, #8
  403f1e:	d313      	bcc.n	403f48 <memcpy+0x114>
  403f20:	078b      	lsls	r3, r1, #30
  403f22:	d08d      	beq.n	403e40 <memcpy+0xc>
  403f24:	f010 0303 	ands.w	r3, r0, #3
  403f28:	d08a      	beq.n	403e40 <memcpy+0xc>
  403f2a:	f1c3 0304 	rsb	r3, r3, #4
  403f2e:	1ad2      	subs	r2, r2, r3
  403f30:	07db      	lsls	r3, r3, #31
  403f32:	bf1c      	itt	ne
  403f34:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403f38:	f800 3b01 	strbne.w	r3, [r0], #1
  403f3c:	d380      	bcc.n	403e40 <memcpy+0xc>
  403f3e:	f831 3b02 	ldrh.w	r3, [r1], #2
  403f42:	f820 3b02 	strh.w	r3, [r0], #2
  403f46:	e77b      	b.n	403e40 <memcpy+0xc>
  403f48:	3a04      	subs	r2, #4
  403f4a:	d3d9      	bcc.n	403f00 <memcpy+0xcc>
  403f4c:	3a01      	subs	r2, #1
  403f4e:	f811 3b01 	ldrb.w	r3, [r1], #1
  403f52:	f800 3b01 	strb.w	r3, [r0], #1
  403f56:	d2f9      	bcs.n	403f4c <memcpy+0x118>
  403f58:	780b      	ldrb	r3, [r1, #0]
  403f5a:	7003      	strb	r3, [r0, #0]
  403f5c:	784b      	ldrb	r3, [r1, #1]
  403f5e:	7043      	strb	r3, [r0, #1]
  403f60:	788b      	ldrb	r3, [r1, #2]
  403f62:	7083      	strb	r3, [r0, #2]
  403f64:	4660      	mov	r0, ip
  403f66:	4770      	bx	lr

00403f68 <memset>:
  403f68:	b470      	push	{r4, r5, r6}
  403f6a:	0786      	lsls	r6, r0, #30
  403f6c:	d046      	beq.n	403ffc <memset+0x94>
  403f6e:	1e54      	subs	r4, r2, #1
  403f70:	2a00      	cmp	r2, #0
  403f72:	d041      	beq.n	403ff8 <memset+0x90>
  403f74:	b2ca      	uxtb	r2, r1
  403f76:	4603      	mov	r3, r0
  403f78:	e002      	b.n	403f80 <memset+0x18>
  403f7a:	f114 34ff 	adds.w	r4, r4, #4294967295
  403f7e:	d33b      	bcc.n	403ff8 <memset+0x90>
  403f80:	f803 2b01 	strb.w	r2, [r3], #1
  403f84:	079d      	lsls	r5, r3, #30
  403f86:	d1f8      	bne.n	403f7a <memset+0x12>
  403f88:	2c03      	cmp	r4, #3
  403f8a:	d92e      	bls.n	403fea <memset+0x82>
  403f8c:	b2cd      	uxtb	r5, r1
  403f8e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403f92:	2c0f      	cmp	r4, #15
  403f94:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403f98:	d919      	bls.n	403fce <memset+0x66>
  403f9a:	f103 0210 	add.w	r2, r3, #16
  403f9e:	4626      	mov	r6, r4
  403fa0:	3e10      	subs	r6, #16
  403fa2:	2e0f      	cmp	r6, #15
  403fa4:	f842 5c10 	str.w	r5, [r2, #-16]
  403fa8:	f842 5c0c 	str.w	r5, [r2, #-12]
  403fac:	f842 5c08 	str.w	r5, [r2, #-8]
  403fb0:	f842 5c04 	str.w	r5, [r2, #-4]
  403fb4:	f102 0210 	add.w	r2, r2, #16
  403fb8:	d8f2      	bhi.n	403fa0 <memset+0x38>
  403fba:	f1a4 0210 	sub.w	r2, r4, #16
  403fbe:	f022 020f 	bic.w	r2, r2, #15
  403fc2:	f004 040f 	and.w	r4, r4, #15
  403fc6:	3210      	adds	r2, #16
  403fc8:	2c03      	cmp	r4, #3
  403fca:	4413      	add	r3, r2
  403fcc:	d90d      	bls.n	403fea <memset+0x82>
  403fce:	461e      	mov	r6, r3
  403fd0:	4622      	mov	r2, r4
  403fd2:	3a04      	subs	r2, #4
  403fd4:	2a03      	cmp	r2, #3
  403fd6:	f846 5b04 	str.w	r5, [r6], #4
  403fda:	d8fa      	bhi.n	403fd2 <memset+0x6a>
  403fdc:	1f22      	subs	r2, r4, #4
  403fde:	f022 0203 	bic.w	r2, r2, #3
  403fe2:	3204      	adds	r2, #4
  403fe4:	4413      	add	r3, r2
  403fe6:	f004 0403 	and.w	r4, r4, #3
  403fea:	b12c      	cbz	r4, 403ff8 <memset+0x90>
  403fec:	b2c9      	uxtb	r1, r1
  403fee:	441c      	add	r4, r3
  403ff0:	f803 1b01 	strb.w	r1, [r3], #1
  403ff4:	429c      	cmp	r4, r3
  403ff6:	d1fb      	bne.n	403ff0 <memset+0x88>
  403ff8:	bc70      	pop	{r4, r5, r6}
  403ffa:	4770      	bx	lr
  403ffc:	4614      	mov	r4, r2
  403ffe:	4603      	mov	r3, r0
  404000:	e7c2      	b.n	403f88 <memset+0x20>
  404002:	bf00      	nop

00404004 <__malloc_lock>:
  404004:	4801      	ldr	r0, [pc, #4]	; (40400c <__malloc_lock+0x8>)
  404006:	f003 bf7b 	b.w	407f00 <__retarget_lock_acquire_recursive>
  40400a:	bf00      	nop
  40400c:	20400e50 	.word	0x20400e50

00404010 <__malloc_unlock>:
  404010:	4801      	ldr	r0, [pc, #4]	; (404018 <__malloc_unlock+0x8>)
  404012:	f003 bf77 	b.w	407f04 <__retarget_lock_release_recursive>
  404016:	bf00      	nop
  404018:	20400e50 	.word	0x20400e50

0040401c <_sbrk_r>:
  40401c:	b538      	push	{r3, r4, r5, lr}
  40401e:	4c07      	ldr	r4, [pc, #28]	; (40403c <_sbrk_r+0x20>)
  404020:	2300      	movs	r3, #0
  404022:	4605      	mov	r5, r0
  404024:	4608      	mov	r0, r1
  404026:	6023      	str	r3, [r4, #0]
  404028:	f7fd f9a6 	bl	401378 <_sbrk>
  40402c:	1c43      	adds	r3, r0, #1
  40402e:	d000      	beq.n	404032 <_sbrk_r+0x16>
  404030:	bd38      	pop	{r3, r4, r5, pc}
  404032:	6823      	ldr	r3, [r4, #0]
  404034:	2b00      	cmp	r3, #0
  404036:	d0fb      	beq.n	404030 <_sbrk_r+0x14>
  404038:	602b      	str	r3, [r5, #0]
  40403a:	bd38      	pop	{r3, r4, r5, pc}
  40403c:	20400e64 	.word	0x20400e64

00404040 <setbuf>:
  404040:	2900      	cmp	r1, #0
  404042:	bf0c      	ite	eq
  404044:	2202      	moveq	r2, #2
  404046:	2200      	movne	r2, #0
  404048:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40404c:	f000 b800 	b.w	404050 <setvbuf>

00404050 <setvbuf>:
  404050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404054:	4c61      	ldr	r4, [pc, #388]	; (4041dc <setvbuf+0x18c>)
  404056:	6825      	ldr	r5, [r4, #0]
  404058:	b083      	sub	sp, #12
  40405a:	4604      	mov	r4, r0
  40405c:	460f      	mov	r7, r1
  40405e:	4690      	mov	r8, r2
  404060:	461e      	mov	r6, r3
  404062:	b115      	cbz	r5, 40406a <setvbuf+0x1a>
  404064:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404066:	2b00      	cmp	r3, #0
  404068:	d064      	beq.n	404134 <setvbuf+0xe4>
  40406a:	f1b8 0f02 	cmp.w	r8, #2
  40406e:	d006      	beq.n	40407e <setvbuf+0x2e>
  404070:	f1b8 0f01 	cmp.w	r8, #1
  404074:	f200 809f 	bhi.w	4041b6 <setvbuf+0x166>
  404078:	2e00      	cmp	r6, #0
  40407a:	f2c0 809c 	blt.w	4041b6 <setvbuf+0x166>
  40407e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404080:	07d8      	lsls	r0, r3, #31
  404082:	d534      	bpl.n	4040ee <setvbuf+0x9e>
  404084:	4621      	mov	r1, r4
  404086:	4628      	mov	r0, r5
  404088:	f003 fb14 	bl	4076b4 <_fflush_r>
  40408c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40408e:	b141      	cbz	r1, 4040a2 <setvbuf+0x52>
  404090:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404094:	4299      	cmp	r1, r3
  404096:	d002      	beq.n	40409e <setvbuf+0x4e>
  404098:	4628      	mov	r0, r5
  40409a:	f003 fc89 	bl	4079b0 <_free_r>
  40409e:	2300      	movs	r3, #0
  4040a0:	6323      	str	r3, [r4, #48]	; 0x30
  4040a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4040a6:	2200      	movs	r2, #0
  4040a8:	61a2      	str	r2, [r4, #24]
  4040aa:	6062      	str	r2, [r4, #4]
  4040ac:	061a      	lsls	r2, r3, #24
  4040ae:	d43a      	bmi.n	404126 <setvbuf+0xd6>
  4040b0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4040b4:	f023 0303 	bic.w	r3, r3, #3
  4040b8:	f1b8 0f02 	cmp.w	r8, #2
  4040bc:	81a3      	strh	r3, [r4, #12]
  4040be:	d01d      	beq.n	4040fc <setvbuf+0xac>
  4040c0:	ab01      	add	r3, sp, #4
  4040c2:	466a      	mov	r2, sp
  4040c4:	4621      	mov	r1, r4
  4040c6:	4628      	mov	r0, r5
  4040c8:	f003 ff1e 	bl	407f08 <__swhatbuf_r>
  4040cc:	89a3      	ldrh	r3, [r4, #12]
  4040ce:	4318      	orrs	r0, r3
  4040d0:	81a0      	strh	r0, [r4, #12]
  4040d2:	2e00      	cmp	r6, #0
  4040d4:	d132      	bne.n	40413c <setvbuf+0xec>
  4040d6:	9e00      	ldr	r6, [sp, #0]
  4040d8:	4630      	mov	r0, r6
  4040da:	f7ff fbeb 	bl	4038b4 <malloc>
  4040de:	4607      	mov	r7, r0
  4040e0:	2800      	cmp	r0, #0
  4040e2:	d06b      	beq.n	4041bc <setvbuf+0x16c>
  4040e4:	89a3      	ldrh	r3, [r4, #12]
  4040e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4040ea:	81a3      	strh	r3, [r4, #12]
  4040ec:	e028      	b.n	404140 <setvbuf+0xf0>
  4040ee:	89a3      	ldrh	r3, [r4, #12]
  4040f0:	0599      	lsls	r1, r3, #22
  4040f2:	d4c7      	bmi.n	404084 <setvbuf+0x34>
  4040f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4040f6:	f003 ff03 	bl	407f00 <__retarget_lock_acquire_recursive>
  4040fa:	e7c3      	b.n	404084 <setvbuf+0x34>
  4040fc:	2500      	movs	r5, #0
  4040fe:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404100:	2600      	movs	r6, #0
  404102:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404106:	f043 0302 	orr.w	r3, r3, #2
  40410a:	2001      	movs	r0, #1
  40410c:	60a6      	str	r6, [r4, #8]
  40410e:	07ce      	lsls	r6, r1, #31
  404110:	81a3      	strh	r3, [r4, #12]
  404112:	6022      	str	r2, [r4, #0]
  404114:	6122      	str	r2, [r4, #16]
  404116:	6160      	str	r0, [r4, #20]
  404118:	d401      	bmi.n	40411e <setvbuf+0xce>
  40411a:	0598      	lsls	r0, r3, #22
  40411c:	d53e      	bpl.n	40419c <setvbuf+0x14c>
  40411e:	4628      	mov	r0, r5
  404120:	b003      	add	sp, #12
  404122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404126:	6921      	ldr	r1, [r4, #16]
  404128:	4628      	mov	r0, r5
  40412a:	f003 fc41 	bl	4079b0 <_free_r>
  40412e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404132:	e7bd      	b.n	4040b0 <setvbuf+0x60>
  404134:	4628      	mov	r0, r5
  404136:	f003 fb15 	bl	407764 <__sinit>
  40413a:	e796      	b.n	40406a <setvbuf+0x1a>
  40413c:	2f00      	cmp	r7, #0
  40413e:	d0cb      	beq.n	4040d8 <setvbuf+0x88>
  404140:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404142:	2b00      	cmp	r3, #0
  404144:	d033      	beq.n	4041ae <setvbuf+0x15e>
  404146:	9b00      	ldr	r3, [sp, #0]
  404148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40414c:	6027      	str	r7, [r4, #0]
  40414e:	429e      	cmp	r6, r3
  404150:	bf1c      	itt	ne
  404152:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404156:	81a2      	strhne	r2, [r4, #12]
  404158:	f1b8 0f01 	cmp.w	r8, #1
  40415c:	bf04      	itt	eq
  40415e:	f042 0201 	orreq.w	r2, r2, #1
  404162:	81a2      	strheq	r2, [r4, #12]
  404164:	b292      	uxth	r2, r2
  404166:	f012 0308 	ands.w	r3, r2, #8
  40416a:	6127      	str	r7, [r4, #16]
  40416c:	6166      	str	r6, [r4, #20]
  40416e:	d00e      	beq.n	40418e <setvbuf+0x13e>
  404170:	07d1      	lsls	r1, r2, #31
  404172:	d51a      	bpl.n	4041aa <setvbuf+0x15a>
  404174:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404176:	4276      	negs	r6, r6
  404178:	2300      	movs	r3, #0
  40417a:	f015 0501 	ands.w	r5, r5, #1
  40417e:	61a6      	str	r6, [r4, #24]
  404180:	60a3      	str	r3, [r4, #8]
  404182:	d009      	beq.n	404198 <setvbuf+0x148>
  404184:	2500      	movs	r5, #0
  404186:	4628      	mov	r0, r5
  404188:	b003      	add	sp, #12
  40418a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40418e:	60a3      	str	r3, [r4, #8]
  404190:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404192:	f015 0501 	ands.w	r5, r5, #1
  404196:	d1f5      	bne.n	404184 <setvbuf+0x134>
  404198:	0593      	lsls	r3, r2, #22
  40419a:	d4c0      	bmi.n	40411e <setvbuf+0xce>
  40419c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40419e:	f003 feb1 	bl	407f04 <__retarget_lock_release_recursive>
  4041a2:	4628      	mov	r0, r5
  4041a4:	b003      	add	sp, #12
  4041a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4041aa:	60a6      	str	r6, [r4, #8]
  4041ac:	e7f0      	b.n	404190 <setvbuf+0x140>
  4041ae:	4628      	mov	r0, r5
  4041b0:	f003 fad8 	bl	407764 <__sinit>
  4041b4:	e7c7      	b.n	404146 <setvbuf+0xf6>
  4041b6:	f04f 35ff 	mov.w	r5, #4294967295
  4041ba:	e7b0      	b.n	40411e <setvbuf+0xce>
  4041bc:	f8dd 9000 	ldr.w	r9, [sp]
  4041c0:	45b1      	cmp	r9, r6
  4041c2:	d004      	beq.n	4041ce <setvbuf+0x17e>
  4041c4:	4648      	mov	r0, r9
  4041c6:	f7ff fb75 	bl	4038b4 <malloc>
  4041ca:	4607      	mov	r7, r0
  4041cc:	b920      	cbnz	r0, 4041d8 <setvbuf+0x188>
  4041ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041d2:	f04f 35ff 	mov.w	r5, #4294967295
  4041d6:	e792      	b.n	4040fe <setvbuf+0xae>
  4041d8:	464e      	mov	r6, r9
  4041da:	e783      	b.n	4040e4 <setvbuf+0x94>
  4041dc:	20400024 	.word	0x20400024

004041e0 <sprintf>:
  4041e0:	b40e      	push	{r1, r2, r3}
  4041e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4041e4:	b09c      	sub	sp, #112	; 0x70
  4041e6:	ab21      	add	r3, sp, #132	; 0x84
  4041e8:	490f      	ldr	r1, [pc, #60]	; (404228 <sprintf+0x48>)
  4041ea:	f853 2b04 	ldr.w	r2, [r3], #4
  4041ee:	9301      	str	r3, [sp, #4]
  4041f0:	4605      	mov	r5, r0
  4041f2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  4041f6:	6808      	ldr	r0, [r1, #0]
  4041f8:	9502      	str	r5, [sp, #8]
  4041fa:	f44f 7702 	mov.w	r7, #520	; 0x208
  4041fe:	f64f 76ff 	movw	r6, #65535	; 0xffff
  404202:	a902      	add	r1, sp, #8
  404204:	9506      	str	r5, [sp, #24]
  404206:	f8ad 7014 	strh.w	r7, [sp, #20]
  40420a:	9404      	str	r4, [sp, #16]
  40420c:	9407      	str	r4, [sp, #28]
  40420e:	f8ad 6016 	strh.w	r6, [sp, #22]
  404212:	f000 f883 	bl	40431c <_svfprintf_r>
  404216:	9b02      	ldr	r3, [sp, #8]
  404218:	2200      	movs	r2, #0
  40421a:	701a      	strb	r2, [r3, #0]
  40421c:	b01c      	add	sp, #112	; 0x70
  40421e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  404222:	b003      	add	sp, #12
  404224:	4770      	bx	lr
  404226:	bf00      	nop
  404228:	20400024 	.word	0x20400024
	...

00404240 <strlen>:
  404240:	f890 f000 	pld	[r0]
  404244:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404248:	f020 0107 	bic.w	r1, r0, #7
  40424c:	f06f 0c00 	mvn.w	ip, #0
  404250:	f010 0407 	ands.w	r4, r0, #7
  404254:	f891 f020 	pld	[r1, #32]
  404258:	f040 8049 	bne.w	4042ee <strlen+0xae>
  40425c:	f04f 0400 	mov.w	r4, #0
  404260:	f06f 0007 	mvn.w	r0, #7
  404264:	e9d1 2300 	ldrd	r2, r3, [r1]
  404268:	f891 f040 	pld	[r1, #64]	; 0x40
  40426c:	f100 0008 	add.w	r0, r0, #8
  404270:	fa82 f24c 	uadd8	r2, r2, ip
  404274:	faa4 f28c 	sel	r2, r4, ip
  404278:	fa83 f34c 	uadd8	r3, r3, ip
  40427c:	faa2 f38c 	sel	r3, r2, ip
  404280:	bb4b      	cbnz	r3, 4042d6 <strlen+0x96>
  404282:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404286:	fa82 f24c 	uadd8	r2, r2, ip
  40428a:	f100 0008 	add.w	r0, r0, #8
  40428e:	faa4 f28c 	sel	r2, r4, ip
  404292:	fa83 f34c 	uadd8	r3, r3, ip
  404296:	faa2 f38c 	sel	r3, r2, ip
  40429a:	b9e3      	cbnz	r3, 4042d6 <strlen+0x96>
  40429c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4042a0:	fa82 f24c 	uadd8	r2, r2, ip
  4042a4:	f100 0008 	add.w	r0, r0, #8
  4042a8:	faa4 f28c 	sel	r2, r4, ip
  4042ac:	fa83 f34c 	uadd8	r3, r3, ip
  4042b0:	faa2 f38c 	sel	r3, r2, ip
  4042b4:	b97b      	cbnz	r3, 4042d6 <strlen+0x96>
  4042b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4042ba:	f101 0120 	add.w	r1, r1, #32
  4042be:	fa82 f24c 	uadd8	r2, r2, ip
  4042c2:	f100 0008 	add.w	r0, r0, #8
  4042c6:	faa4 f28c 	sel	r2, r4, ip
  4042ca:	fa83 f34c 	uadd8	r3, r3, ip
  4042ce:	faa2 f38c 	sel	r3, r2, ip
  4042d2:	2b00      	cmp	r3, #0
  4042d4:	d0c6      	beq.n	404264 <strlen+0x24>
  4042d6:	2a00      	cmp	r2, #0
  4042d8:	bf04      	itt	eq
  4042da:	3004      	addeq	r0, #4
  4042dc:	461a      	moveq	r2, r3
  4042de:	ba12      	rev	r2, r2
  4042e0:	fab2 f282 	clz	r2, r2
  4042e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4042e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4042ec:	4770      	bx	lr
  4042ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4042f2:	f004 0503 	and.w	r5, r4, #3
  4042f6:	f1c4 0000 	rsb	r0, r4, #0
  4042fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4042fe:	f014 0f04 	tst.w	r4, #4
  404302:	f891 f040 	pld	[r1, #64]	; 0x40
  404306:	fa0c f505 	lsl.w	r5, ip, r5
  40430a:	ea62 0205 	orn	r2, r2, r5
  40430e:	bf1c      	itt	ne
  404310:	ea63 0305 	ornne	r3, r3, r5
  404314:	4662      	movne	r2, ip
  404316:	f04f 0400 	mov.w	r4, #0
  40431a:	e7a9      	b.n	404270 <strlen+0x30>

0040431c <_svfprintf_r>:
  40431c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404320:	b0c3      	sub	sp, #268	; 0x10c
  404322:	460c      	mov	r4, r1
  404324:	910b      	str	r1, [sp, #44]	; 0x2c
  404326:	4692      	mov	sl, r2
  404328:	930f      	str	r3, [sp, #60]	; 0x3c
  40432a:	900c      	str	r0, [sp, #48]	; 0x30
  40432c:	f003 fdd6 	bl	407edc <_localeconv_r>
  404330:	6803      	ldr	r3, [r0, #0]
  404332:	931a      	str	r3, [sp, #104]	; 0x68
  404334:	4618      	mov	r0, r3
  404336:	f7ff ff83 	bl	404240 <strlen>
  40433a:	89a3      	ldrh	r3, [r4, #12]
  40433c:	9019      	str	r0, [sp, #100]	; 0x64
  40433e:	0619      	lsls	r1, r3, #24
  404340:	d503      	bpl.n	40434a <_svfprintf_r+0x2e>
  404342:	6923      	ldr	r3, [r4, #16]
  404344:	2b00      	cmp	r3, #0
  404346:	f001 8003 	beq.w	405350 <_svfprintf_r+0x1034>
  40434a:	2300      	movs	r3, #0
  40434c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404350:	9313      	str	r3, [sp, #76]	; 0x4c
  404352:	9315      	str	r3, [sp, #84]	; 0x54
  404354:	9314      	str	r3, [sp, #80]	; 0x50
  404356:	9327      	str	r3, [sp, #156]	; 0x9c
  404358:	9326      	str	r3, [sp, #152]	; 0x98
  40435a:	9318      	str	r3, [sp, #96]	; 0x60
  40435c:	931b      	str	r3, [sp, #108]	; 0x6c
  40435e:	9309      	str	r3, [sp, #36]	; 0x24
  404360:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404364:	46c8      	mov	r8, r9
  404366:	9316      	str	r3, [sp, #88]	; 0x58
  404368:	9317      	str	r3, [sp, #92]	; 0x5c
  40436a:	f89a 3000 	ldrb.w	r3, [sl]
  40436e:	4654      	mov	r4, sl
  404370:	b1e3      	cbz	r3, 4043ac <_svfprintf_r+0x90>
  404372:	2b25      	cmp	r3, #37	; 0x25
  404374:	d102      	bne.n	40437c <_svfprintf_r+0x60>
  404376:	e019      	b.n	4043ac <_svfprintf_r+0x90>
  404378:	2b25      	cmp	r3, #37	; 0x25
  40437a:	d003      	beq.n	404384 <_svfprintf_r+0x68>
  40437c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404380:	2b00      	cmp	r3, #0
  404382:	d1f9      	bne.n	404378 <_svfprintf_r+0x5c>
  404384:	eba4 050a 	sub.w	r5, r4, sl
  404388:	b185      	cbz	r5, 4043ac <_svfprintf_r+0x90>
  40438a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40438c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40438e:	f8c8 a000 	str.w	sl, [r8]
  404392:	3301      	adds	r3, #1
  404394:	442a      	add	r2, r5
  404396:	2b07      	cmp	r3, #7
  404398:	f8c8 5004 	str.w	r5, [r8, #4]
  40439c:	9227      	str	r2, [sp, #156]	; 0x9c
  40439e:	9326      	str	r3, [sp, #152]	; 0x98
  4043a0:	dc7f      	bgt.n	4044a2 <_svfprintf_r+0x186>
  4043a2:	f108 0808 	add.w	r8, r8, #8
  4043a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4043a8:	442b      	add	r3, r5
  4043aa:	9309      	str	r3, [sp, #36]	; 0x24
  4043ac:	7823      	ldrb	r3, [r4, #0]
  4043ae:	2b00      	cmp	r3, #0
  4043b0:	d07f      	beq.n	4044b2 <_svfprintf_r+0x196>
  4043b2:	2300      	movs	r3, #0
  4043b4:	461a      	mov	r2, r3
  4043b6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4043ba:	4619      	mov	r1, r3
  4043bc:	930d      	str	r3, [sp, #52]	; 0x34
  4043be:	469b      	mov	fp, r3
  4043c0:	f04f 30ff 	mov.w	r0, #4294967295
  4043c4:	7863      	ldrb	r3, [r4, #1]
  4043c6:	900a      	str	r0, [sp, #40]	; 0x28
  4043c8:	f104 0a01 	add.w	sl, r4, #1
  4043cc:	f10a 0a01 	add.w	sl, sl, #1
  4043d0:	f1a3 0020 	sub.w	r0, r3, #32
  4043d4:	2858      	cmp	r0, #88	; 0x58
  4043d6:	f200 83c1 	bhi.w	404b5c <_svfprintf_r+0x840>
  4043da:	e8df f010 	tbh	[pc, r0, lsl #1]
  4043de:	0238      	.short	0x0238
  4043e0:	03bf03bf 	.word	0x03bf03bf
  4043e4:	03bf0240 	.word	0x03bf0240
  4043e8:	03bf03bf 	.word	0x03bf03bf
  4043ec:	03bf03bf 	.word	0x03bf03bf
  4043f0:	024503bf 	.word	0x024503bf
  4043f4:	03bf0203 	.word	0x03bf0203
  4043f8:	026b005d 	.word	0x026b005d
  4043fc:	028603bf 	.word	0x028603bf
  404400:	039d039d 	.word	0x039d039d
  404404:	039d039d 	.word	0x039d039d
  404408:	039d039d 	.word	0x039d039d
  40440c:	039d039d 	.word	0x039d039d
  404410:	03bf039d 	.word	0x03bf039d
  404414:	03bf03bf 	.word	0x03bf03bf
  404418:	03bf03bf 	.word	0x03bf03bf
  40441c:	03bf03bf 	.word	0x03bf03bf
  404420:	03bf03bf 	.word	0x03bf03bf
  404424:	033703bf 	.word	0x033703bf
  404428:	03bf0357 	.word	0x03bf0357
  40442c:	03bf0357 	.word	0x03bf0357
  404430:	03bf03bf 	.word	0x03bf03bf
  404434:	039803bf 	.word	0x039803bf
  404438:	03bf03bf 	.word	0x03bf03bf
  40443c:	03bf03ad 	.word	0x03bf03ad
  404440:	03bf03bf 	.word	0x03bf03bf
  404444:	03bf03bf 	.word	0x03bf03bf
  404448:	03bf0259 	.word	0x03bf0259
  40444c:	031e03bf 	.word	0x031e03bf
  404450:	03bf03bf 	.word	0x03bf03bf
  404454:	03bf03bf 	.word	0x03bf03bf
  404458:	03bf03bf 	.word	0x03bf03bf
  40445c:	03bf03bf 	.word	0x03bf03bf
  404460:	03bf03bf 	.word	0x03bf03bf
  404464:	02db02c6 	.word	0x02db02c6
  404468:	03570357 	.word	0x03570357
  40446c:	028b0357 	.word	0x028b0357
  404470:	03bf02db 	.word	0x03bf02db
  404474:	029003bf 	.word	0x029003bf
  404478:	029d03bf 	.word	0x029d03bf
  40447c:	02b401cc 	.word	0x02b401cc
  404480:	03bf0208 	.word	0x03bf0208
  404484:	03bf01e1 	.word	0x03bf01e1
  404488:	03bf007e 	.word	0x03bf007e
  40448c:	020d03bf 	.word	0x020d03bf
  404490:	980d      	ldr	r0, [sp, #52]	; 0x34
  404492:	930f      	str	r3, [sp, #60]	; 0x3c
  404494:	4240      	negs	r0, r0
  404496:	900d      	str	r0, [sp, #52]	; 0x34
  404498:	f04b 0b04 	orr.w	fp, fp, #4
  40449c:	f89a 3000 	ldrb.w	r3, [sl]
  4044a0:	e794      	b.n	4043cc <_svfprintf_r+0xb0>
  4044a2:	aa25      	add	r2, sp, #148	; 0x94
  4044a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044a6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044a8:	f004 fb5a 	bl	408b60 <__ssprint_r>
  4044ac:	b940      	cbnz	r0, 4044c0 <_svfprintf_r+0x1a4>
  4044ae:	46c8      	mov	r8, r9
  4044b0:	e779      	b.n	4043a6 <_svfprintf_r+0x8a>
  4044b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4044b4:	b123      	cbz	r3, 4044c0 <_svfprintf_r+0x1a4>
  4044b6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4044b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4044ba:	aa25      	add	r2, sp, #148	; 0x94
  4044bc:	f004 fb50 	bl	408b60 <__ssprint_r>
  4044c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4044c2:	899b      	ldrh	r3, [r3, #12]
  4044c4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4044c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4044ca:	bf18      	it	ne
  4044cc:	f04f 33ff 	movne.w	r3, #4294967295
  4044d0:	9309      	str	r3, [sp, #36]	; 0x24
  4044d2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4044d4:	b043      	add	sp, #268	; 0x10c
  4044d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4044da:	f01b 0f20 	tst.w	fp, #32
  4044de:	9311      	str	r3, [sp, #68]	; 0x44
  4044e0:	f040 81dd 	bne.w	40489e <_svfprintf_r+0x582>
  4044e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4044e6:	f01b 0f10 	tst.w	fp, #16
  4044ea:	4613      	mov	r3, r2
  4044ec:	f040 856e 	bne.w	404fcc <_svfprintf_r+0xcb0>
  4044f0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4044f4:	f000 856a 	beq.w	404fcc <_svfprintf_r+0xcb0>
  4044f8:	8814      	ldrh	r4, [r2, #0]
  4044fa:	3204      	adds	r2, #4
  4044fc:	2500      	movs	r5, #0
  4044fe:	2301      	movs	r3, #1
  404500:	920f      	str	r2, [sp, #60]	; 0x3c
  404502:	2700      	movs	r7, #0
  404504:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404508:	990a      	ldr	r1, [sp, #40]	; 0x28
  40450a:	1c4a      	adds	r2, r1, #1
  40450c:	f000 8265 	beq.w	4049da <_svfprintf_r+0x6be>
  404510:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  404514:	9207      	str	r2, [sp, #28]
  404516:	ea54 0205 	orrs.w	r2, r4, r5
  40451a:	f040 8264 	bne.w	4049e6 <_svfprintf_r+0x6ca>
  40451e:	2900      	cmp	r1, #0
  404520:	f040 843c 	bne.w	404d9c <_svfprintf_r+0xa80>
  404524:	2b00      	cmp	r3, #0
  404526:	f040 84d7 	bne.w	404ed8 <_svfprintf_r+0xbbc>
  40452a:	f01b 0301 	ands.w	r3, fp, #1
  40452e:	930e      	str	r3, [sp, #56]	; 0x38
  404530:	f000 8604 	beq.w	40513c <_svfprintf_r+0xe20>
  404534:	ae42      	add	r6, sp, #264	; 0x108
  404536:	2330      	movs	r3, #48	; 0x30
  404538:	f806 3d41 	strb.w	r3, [r6, #-65]!
  40453c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40453e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404540:	4293      	cmp	r3, r2
  404542:	bfb8      	it	lt
  404544:	4613      	movlt	r3, r2
  404546:	9308      	str	r3, [sp, #32]
  404548:	2300      	movs	r3, #0
  40454a:	9312      	str	r3, [sp, #72]	; 0x48
  40454c:	b117      	cbz	r7, 404554 <_svfprintf_r+0x238>
  40454e:	9b08      	ldr	r3, [sp, #32]
  404550:	3301      	adds	r3, #1
  404552:	9308      	str	r3, [sp, #32]
  404554:	9b07      	ldr	r3, [sp, #28]
  404556:	f013 0302 	ands.w	r3, r3, #2
  40455a:	9310      	str	r3, [sp, #64]	; 0x40
  40455c:	d002      	beq.n	404564 <_svfprintf_r+0x248>
  40455e:	9b08      	ldr	r3, [sp, #32]
  404560:	3302      	adds	r3, #2
  404562:	9308      	str	r3, [sp, #32]
  404564:	9b07      	ldr	r3, [sp, #28]
  404566:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40456a:	f040 830e 	bne.w	404b8a <_svfprintf_r+0x86e>
  40456e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404570:	9a08      	ldr	r2, [sp, #32]
  404572:	eba3 0b02 	sub.w	fp, r3, r2
  404576:	f1bb 0f00 	cmp.w	fp, #0
  40457a:	f340 8306 	ble.w	404b8a <_svfprintf_r+0x86e>
  40457e:	f1bb 0f10 	cmp.w	fp, #16
  404582:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404584:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404586:	dd29      	ble.n	4045dc <_svfprintf_r+0x2c0>
  404588:	4643      	mov	r3, r8
  40458a:	4621      	mov	r1, r4
  40458c:	46a8      	mov	r8, r5
  40458e:	2710      	movs	r7, #16
  404590:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404592:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404594:	e006      	b.n	4045a4 <_svfprintf_r+0x288>
  404596:	f1ab 0b10 	sub.w	fp, fp, #16
  40459a:	f1bb 0f10 	cmp.w	fp, #16
  40459e:	f103 0308 	add.w	r3, r3, #8
  4045a2:	dd18      	ble.n	4045d6 <_svfprintf_r+0x2ba>
  4045a4:	3201      	adds	r2, #1
  4045a6:	48b7      	ldr	r0, [pc, #732]	; (404884 <_svfprintf_r+0x568>)
  4045a8:	9226      	str	r2, [sp, #152]	; 0x98
  4045aa:	3110      	adds	r1, #16
  4045ac:	2a07      	cmp	r2, #7
  4045ae:	9127      	str	r1, [sp, #156]	; 0x9c
  4045b0:	e883 0081 	stmia.w	r3, {r0, r7}
  4045b4:	ddef      	ble.n	404596 <_svfprintf_r+0x27a>
  4045b6:	aa25      	add	r2, sp, #148	; 0x94
  4045b8:	4629      	mov	r1, r5
  4045ba:	4620      	mov	r0, r4
  4045bc:	f004 fad0 	bl	408b60 <__ssprint_r>
  4045c0:	2800      	cmp	r0, #0
  4045c2:	f47f af7d 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  4045c6:	f1ab 0b10 	sub.w	fp, fp, #16
  4045ca:	f1bb 0f10 	cmp.w	fp, #16
  4045ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4045d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4045d2:	464b      	mov	r3, r9
  4045d4:	dce6      	bgt.n	4045a4 <_svfprintf_r+0x288>
  4045d6:	4645      	mov	r5, r8
  4045d8:	460c      	mov	r4, r1
  4045da:	4698      	mov	r8, r3
  4045dc:	3201      	adds	r2, #1
  4045de:	4ba9      	ldr	r3, [pc, #676]	; (404884 <_svfprintf_r+0x568>)
  4045e0:	9226      	str	r2, [sp, #152]	; 0x98
  4045e2:	445c      	add	r4, fp
  4045e4:	2a07      	cmp	r2, #7
  4045e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4045e8:	e888 0808 	stmia.w	r8, {r3, fp}
  4045ec:	f300 8498 	bgt.w	404f20 <_svfprintf_r+0xc04>
  4045f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4045f4:	f108 0808 	add.w	r8, r8, #8
  4045f8:	b177      	cbz	r7, 404618 <_svfprintf_r+0x2fc>
  4045fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045fc:	3301      	adds	r3, #1
  4045fe:	3401      	adds	r4, #1
  404600:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  404604:	2201      	movs	r2, #1
  404606:	2b07      	cmp	r3, #7
  404608:	9427      	str	r4, [sp, #156]	; 0x9c
  40460a:	9326      	str	r3, [sp, #152]	; 0x98
  40460c:	e888 0006 	stmia.w	r8, {r1, r2}
  404610:	f300 83db 	bgt.w	404dca <_svfprintf_r+0xaae>
  404614:	f108 0808 	add.w	r8, r8, #8
  404618:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40461a:	b16b      	cbz	r3, 404638 <_svfprintf_r+0x31c>
  40461c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40461e:	3301      	adds	r3, #1
  404620:	3402      	adds	r4, #2
  404622:	a91e      	add	r1, sp, #120	; 0x78
  404624:	2202      	movs	r2, #2
  404626:	2b07      	cmp	r3, #7
  404628:	9427      	str	r4, [sp, #156]	; 0x9c
  40462a:	9326      	str	r3, [sp, #152]	; 0x98
  40462c:	e888 0006 	stmia.w	r8, {r1, r2}
  404630:	f300 83d6 	bgt.w	404de0 <_svfprintf_r+0xac4>
  404634:	f108 0808 	add.w	r8, r8, #8
  404638:	2d80      	cmp	r5, #128	; 0x80
  40463a:	f000 8315 	beq.w	404c68 <_svfprintf_r+0x94c>
  40463e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404642:	1a9f      	subs	r7, r3, r2
  404644:	2f00      	cmp	r7, #0
  404646:	dd36      	ble.n	4046b6 <_svfprintf_r+0x39a>
  404648:	2f10      	cmp	r7, #16
  40464a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40464c:	4d8e      	ldr	r5, [pc, #568]	; (404888 <_svfprintf_r+0x56c>)
  40464e:	dd27      	ble.n	4046a0 <_svfprintf_r+0x384>
  404650:	4642      	mov	r2, r8
  404652:	4621      	mov	r1, r4
  404654:	46b0      	mov	r8, r6
  404656:	f04f 0b10 	mov.w	fp, #16
  40465a:	462e      	mov	r6, r5
  40465c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40465e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404660:	e004      	b.n	40466c <_svfprintf_r+0x350>
  404662:	3f10      	subs	r7, #16
  404664:	2f10      	cmp	r7, #16
  404666:	f102 0208 	add.w	r2, r2, #8
  40466a:	dd15      	ble.n	404698 <_svfprintf_r+0x37c>
  40466c:	3301      	adds	r3, #1
  40466e:	3110      	adds	r1, #16
  404670:	2b07      	cmp	r3, #7
  404672:	9127      	str	r1, [sp, #156]	; 0x9c
  404674:	9326      	str	r3, [sp, #152]	; 0x98
  404676:	e882 0840 	stmia.w	r2, {r6, fp}
  40467a:	ddf2      	ble.n	404662 <_svfprintf_r+0x346>
  40467c:	aa25      	add	r2, sp, #148	; 0x94
  40467e:	4629      	mov	r1, r5
  404680:	4620      	mov	r0, r4
  404682:	f004 fa6d 	bl	408b60 <__ssprint_r>
  404686:	2800      	cmp	r0, #0
  404688:	f47f af1a 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  40468c:	3f10      	subs	r7, #16
  40468e:	2f10      	cmp	r7, #16
  404690:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404692:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404694:	464a      	mov	r2, r9
  404696:	dce9      	bgt.n	40466c <_svfprintf_r+0x350>
  404698:	4635      	mov	r5, r6
  40469a:	460c      	mov	r4, r1
  40469c:	4646      	mov	r6, r8
  40469e:	4690      	mov	r8, r2
  4046a0:	3301      	adds	r3, #1
  4046a2:	443c      	add	r4, r7
  4046a4:	2b07      	cmp	r3, #7
  4046a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4046a8:	9326      	str	r3, [sp, #152]	; 0x98
  4046aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4046ae:	f300 8381 	bgt.w	404db4 <_svfprintf_r+0xa98>
  4046b2:	f108 0808 	add.w	r8, r8, #8
  4046b6:	9b07      	ldr	r3, [sp, #28]
  4046b8:	05df      	lsls	r7, r3, #23
  4046ba:	f100 8268 	bmi.w	404b8e <_svfprintf_r+0x872>
  4046be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046c0:	990e      	ldr	r1, [sp, #56]	; 0x38
  4046c2:	f8c8 6000 	str.w	r6, [r8]
  4046c6:	3301      	adds	r3, #1
  4046c8:	440c      	add	r4, r1
  4046ca:	2b07      	cmp	r3, #7
  4046cc:	9427      	str	r4, [sp, #156]	; 0x9c
  4046ce:	f8c8 1004 	str.w	r1, [r8, #4]
  4046d2:	9326      	str	r3, [sp, #152]	; 0x98
  4046d4:	f300 834d 	bgt.w	404d72 <_svfprintf_r+0xa56>
  4046d8:	f108 0808 	add.w	r8, r8, #8
  4046dc:	9b07      	ldr	r3, [sp, #28]
  4046de:	075b      	lsls	r3, r3, #29
  4046e0:	d53a      	bpl.n	404758 <_svfprintf_r+0x43c>
  4046e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4046e4:	9a08      	ldr	r2, [sp, #32]
  4046e6:	1a9d      	subs	r5, r3, r2
  4046e8:	2d00      	cmp	r5, #0
  4046ea:	dd35      	ble.n	404758 <_svfprintf_r+0x43c>
  4046ec:	2d10      	cmp	r5, #16
  4046ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4046f0:	dd20      	ble.n	404734 <_svfprintf_r+0x418>
  4046f2:	2610      	movs	r6, #16
  4046f4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4046f6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4046fa:	e004      	b.n	404706 <_svfprintf_r+0x3ea>
  4046fc:	3d10      	subs	r5, #16
  4046fe:	2d10      	cmp	r5, #16
  404700:	f108 0808 	add.w	r8, r8, #8
  404704:	dd16      	ble.n	404734 <_svfprintf_r+0x418>
  404706:	3301      	adds	r3, #1
  404708:	4a5e      	ldr	r2, [pc, #376]	; (404884 <_svfprintf_r+0x568>)
  40470a:	9326      	str	r3, [sp, #152]	; 0x98
  40470c:	3410      	adds	r4, #16
  40470e:	2b07      	cmp	r3, #7
  404710:	9427      	str	r4, [sp, #156]	; 0x9c
  404712:	e888 0044 	stmia.w	r8, {r2, r6}
  404716:	ddf1      	ble.n	4046fc <_svfprintf_r+0x3e0>
  404718:	aa25      	add	r2, sp, #148	; 0x94
  40471a:	4659      	mov	r1, fp
  40471c:	4638      	mov	r0, r7
  40471e:	f004 fa1f 	bl	408b60 <__ssprint_r>
  404722:	2800      	cmp	r0, #0
  404724:	f47f aecc 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404728:	3d10      	subs	r5, #16
  40472a:	2d10      	cmp	r5, #16
  40472c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40472e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404730:	46c8      	mov	r8, r9
  404732:	dce8      	bgt.n	404706 <_svfprintf_r+0x3ea>
  404734:	3301      	adds	r3, #1
  404736:	4a53      	ldr	r2, [pc, #332]	; (404884 <_svfprintf_r+0x568>)
  404738:	9326      	str	r3, [sp, #152]	; 0x98
  40473a:	442c      	add	r4, r5
  40473c:	2b07      	cmp	r3, #7
  40473e:	9427      	str	r4, [sp, #156]	; 0x9c
  404740:	e888 0024 	stmia.w	r8, {r2, r5}
  404744:	dd08      	ble.n	404758 <_svfprintf_r+0x43c>
  404746:	aa25      	add	r2, sp, #148	; 0x94
  404748:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40474a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40474c:	f004 fa08 	bl	408b60 <__ssprint_r>
  404750:	2800      	cmp	r0, #0
  404752:	f47f aeb5 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404756:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404758:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40475a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40475c:	9908      	ldr	r1, [sp, #32]
  40475e:	428a      	cmp	r2, r1
  404760:	bfac      	ite	ge
  404762:	189b      	addge	r3, r3, r2
  404764:	185b      	addlt	r3, r3, r1
  404766:	9309      	str	r3, [sp, #36]	; 0x24
  404768:	2c00      	cmp	r4, #0
  40476a:	f040 830d 	bne.w	404d88 <_svfprintf_r+0xa6c>
  40476e:	2300      	movs	r3, #0
  404770:	9326      	str	r3, [sp, #152]	; 0x98
  404772:	46c8      	mov	r8, r9
  404774:	e5f9      	b.n	40436a <_svfprintf_r+0x4e>
  404776:	9311      	str	r3, [sp, #68]	; 0x44
  404778:	f01b 0320 	ands.w	r3, fp, #32
  40477c:	f040 81e3 	bne.w	404b46 <_svfprintf_r+0x82a>
  404780:	f01b 0210 	ands.w	r2, fp, #16
  404784:	f040 842e 	bne.w	404fe4 <_svfprintf_r+0xcc8>
  404788:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  40478c:	f000 842a 	beq.w	404fe4 <_svfprintf_r+0xcc8>
  404790:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404792:	4613      	mov	r3, r2
  404794:	460a      	mov	r2, r1
  404796:	3204      	adds	r2, #4
  404798:	880c      	ldrh	r4, [r1, #0]
  40479a:	920f      	str	r2, [sp, #60]	; 0x3c
  40479c:	2500      	movs	r5, #0
  40479e:	e6b0      	b.n	404502 <_svfprintf_r+0x1e6>
  4047a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4047a2:	9311      	str	r3, [sp, #68]	; 0x44
  4047a4:	6816      	ldr	r6, [r2, #0]
  4047a6:	2400      	movs	r4, #0
  4047a8:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  4047ac:	1d15      	adds	r5, r2, #4
  4047ae:	2e00      	cmp	r6, #0
  4047b0:	f000 86a7 	beq.w	405502 <_svfprintf_r+0x11e6>
  4047b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4047b6:	1c53      	adds	r3, r2, #1
  4047b8:	f000 8609 	beq.w	4053ce <_svfprintf_r+0x10b2>
  4047bc:	4621      	mov	r1, r4
  4047be:	4630      	mov	r0, r6
  4047c0:	f003 fc36 	bl	408030 <memchr>
  4047c4:	2800      	cmp	r0, #0
  4047c6:	f000 86e1 	beq.w	40558c <_svfprintf_r+0x1270>
  4047ca:	1b83      	subs	r3, r0, r6
  4047cc:	930e      	str	r3, [sp, #56]	; 0x38
  4047ce:	940a      	str	r4, [sp, #40]	; 0x28
  4047d0:	950f      	str	r5, [sp, #60]	; 0x3c
  4047d2:	f8cd b01c 	str.w	fp, [sp, #28]
  4047d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4047da:	9308      	str	r3, [sp, #32]
  4047dc:	9412      	str	r4, [sp, #72]	; 0x48
  4047de:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4047e2:	e6b3      	b.n	40454c <_svfprintf_r+0x230>
  4047e4:	f89a 3000 	ldrb.w	r3, [sl]
  4047e8:	2201      	movs	r2, #1
  4047ea:	212b      	movs	r1, #43	; 0x2b
  4047ec:	e5ee      	b.n	4043cc <_svfprintf_r+0xb0>
  4047ee:	f04b 0b20 	orr.w	fp, fp, #32
  4047f2:	f89a 3000 	ldrb.w	r3, [sl]
  4047f6:	e5e9      	b.n	4043cc <_svfprintf_r+0xb0>
  4047f8:	9311      	str	r3, [sp, #68]	; 0x44
  4047fa:	2a00      	cmp	r2, #0
  4047fc:	f040 8795 	bne.w	40572a <_svfprintf_r+0x140e>
  404800:	4b22      	ldr	r3, [pc, #136]	; (40488c <_svfprintf_r+0x570>)
  404802:	9318      	str	r3, [sp, #96]	; 0x60
  404804:	f01b 0f20 	tst.w	fp, #32
  404808:	f040 8111 	bne.w	404a2e <_svfprintf_r+0x712>
  40480c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40480e:	f01b 0f10 	tst.w	fp, #16
  404812:	4613      	mov	r3, r2
  404814:	f040 83e1 	bne.w	404fda <_svfprintf_r+0xcbe>
  404818:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40481c:	f000 83dd 	beq.w	404fda <_svfprintf_r+0xcbe>
  404820:	3304      	adds	r3, #4
  404822:	8814      	ldrh	r4, [r2, #0]
  404824:	930f      	str	r3, [sp, #60]	; 0x3c
  404826:	2500      	movs	r5, #0
  404828:	f01b 0f01 	tst.w	fp, #1
  40482c:	f000 810c 	beq.w	404a48 <_svfprintf_r+0x72c>
  404830:	ea54 0305 	orrs.w	r3, r4, r5
  404834:	f000 8108 	beq.w	404a48 <_svfprintf_r+0x72c>
  404838:	2330      	movs	r3, #48	; 0x30
  40483a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40483e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404842:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404846:	f04b 0b02 	orr.w	fp, fp, #2
  40484a:	2302      	movs	r3, #2
  40484c:	e659      	b.n	404502 <_svfprintf_r+0x1e6>
  40484e:	f89a 3000 	ldrb.w	r3, [sl]
  404852:	2900      	cmp	r1, #0
  404854:	f47f adba 	bne.w	4043cc <_svfprintf_r+0xb0>
  404858:	2201      	movs	r2, #1
  40485a:	2120      	movs	r1, #32
  40485c:	e5b6      	b.n	4043cc <_svfprintf_r+0xb0>
  40485e:	f04b 0b01 	orr.w	fp, fp, #1
  404862:	f89a 3000 	ldrb.w	r3, [sl]
  404866:	e5b1      	b.n	4043cc <_svfprintf_r+0xb0>
  404868:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  40486a:	6823      	ldr	r3, [r4, #0]
  40486c:	930d      	str	r3, [sp, #52]	; 0x34
  40486e:	4618      	mov	r0, r3
  404870:	2800      	cmp	r0, #0
  404872:	4623      	mov	r3, r4
  404874:	f103 0304 	add.w	r3, r3, #4
  404878:	f6ff ae0a 	blt.w	404490 <_svfprintf_r+0x174>
  40487c:	930f      	str	r3, [sp, #60]	; 0x3c
  40487e:	f89a 3000 	ldrb.w	r3, [sl]
  404882:	e5a3      	b.n	4043cc <_svfprintf_r+0xb0>
  404884:	0040a0c8 	.word	0x0040a0c8
  404888:	0040a0d8 	.word	0x0040a0d8
  40488c:	0040a0a8 	.word	0x0040a0a8
  404890:	f04b 0b10 	orr.w	fp, fp, #16
  404894:	f01b 0f20 	tst.w	fp, #32
  404898:	9311      	str	r3, [sp, #68]	; 0x44
  40489a:	f43f ae23 	beq.w	4044e4 <_svfprintf_r+0x1c8>
  40489e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4048a0:	3507      	adds	r5, #7
  4048a2:	f025 0307 	bic.w	r3, r5, #7
  4048a6:	f103 0208 	add.w	r2, r3, #8
  4048aa:	e9d3 4500 	ldrd	r4, r5, [r3]
  4048ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4048b0:	2301      	movs	r3, #1
  4048b2:	e626      	b.n	404502 <_svfprintf_r+0x1e6>
  4048b4:	f89a 3000 	ldrb.w	r3, [sl]
  4048b8:	2b2a      	cmp	r3, #42	; 0x2a
  4048ba:	f10a 0401 	add.w	r4, sl, #1
  4048be:	f000 8727 	beq.w	405710 <_svfprintf_r+0x13f4>
  4048c2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4048c6:	2809      	cmp	r0, #9
  4048c8:	46a2      	mov	sl, r4
  4048ca:	f200 86ad 	bhi.w	405628 <_svfprintf_r+0x130c>
  4048ce:	2300      	movs	r3, #0
  4048d0:	461c      	mov	r4, r3
  4048d2:	f81a 3b01 	ldrb.w	r3, [sl], #1
  4048d6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4048da:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4048de:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4048e2:	2809      	cmp	r0, #9
  4048e4:	d9f5      	bls.n	4048d2 <_svfprintf_r+0x5b6>
  4048e6:	940a      	str	r4, [sp, #40]	; 0x28
  4048e8:	e572      	b.n	4043d0 <_svfprintf_r+0xb4>
  4048ea:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  4048ee:	f89a 3000 	ldrb.w	r3, [sl]
  4048f2:	e56b      	b.n	4043cc <_svfprintf_r+0xb0>
  4048f4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  4048f8:	f89a 3000 	ldrb.w	r3, [sl]
  4048fc:	e566      	b.n	4043cc <_svfprintf_r+0xb0>
  4048fe:	f89a 3000 	ldrb.w	r3, [sl]
  404902:	2b6c      	cmp	r3, #108	; 0x6c
  404904:	bf03      	ittte	eq
  404906:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  40490a:	f04b 0b20 	orreq.w	fp, fp, #32
  40490e:	f10a 0a01 	addeq.w	sl, sl, #1
  404912:	f04b 0b10 	orrne.w	fp, fp, #16
  404916:	e559      	b.n	4043cc <_svfprintf_r+0xb0>
  404918:	2a00      	cmp	r2, #0
  40491a:	f040 8711 	bne.w	405740 <_svfprintf_r+0x1424>
  40491e:	f01b 0f20 	tst.w	fp, #32
  404922:	f040 84f9 	bne.w	405318 <_svfprintf_r+0xffc>
  404926:	f01b 0f10 	tst.w	fp, #16
  40492a:	f040 84ac 	bne.w	405286 <_svfprintf_r+0xf6a>
  40492e:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404932:	f000 84a8 	beq.w	405286 <_svfprintf_r+0xf6a>
  404936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404938:	6813      	ldr	r3, [r2, #0]
  40493a:	3204      	adds	r2, #4
  40493c:	920f      	str	r2, [sp, #60]	; 0x3c
  40493e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404942:	801a      	strh	r2, [r3, #0]
  404944:	e511      	b.n	40436a <_svfprintf_r+0x4e>
  404946:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404948:	4bb3      	ldr	r3, [pc, #716]	; (404c18 <_svfprintf_r+0x8fc>)
  40494a:	680c      	ldr	r4, [r1, #0]
  40494c:	9318      	str	r3, [sp, #96]	; 0x60
  40494e:	2230      	movs	r2, #48	; 0x30
  404950:	2378      	movs	r3, #120	; 0x78
  404952:	3104      	adds	r1, #4
  404954:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404958:	9311      	str	r3, [sp, #68]	; 0x44
  40495a:	f04b 0b02 	orr.w	fp, fp, #2
  40495e:	910f      	str	r1, [sp, #60]	; 0x3c
  404960:	2500      	movs	r5, #0
  404962:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404966:	2302      	movs	r3, #2
  404968:	e5cb      	b.n	404502 <_svfprintf_r+0x1e6>
  40496a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40496c:	9311      	str	r3, [sp, #68]	; 0x44
  40496e:	680a      	ldr	r2, [r1, #0]
  404970:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404974:	2300      	movs	r3, #0
  404976:	460a      	mov	r2, r1
  404978:	461f      	mov	r7, r3
  40497a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40497e:	3204      	adds	r2, #4
  404980:	2301      	movs	r3, #1
  404982:	9308      	str	r3, [sp, #32]
  404984:	f8cd b01c 	str.w	fp, [sp, #28]
  404988:	970a      	str	r7, [sp, #40]	; 0x28
  40498a:	9712      	str	r7, [sp, #72]	; 0x48
  40498c:	920f      	str	r2, [sp, #60]	; 0x3c
  40498e:	930e      	str	r3, [sp, #56]	; 0x38
  404990:	ae28      	add	r6, sp, #160	; 0xa0
  404992:	e5df      	b.n	404554 <_svfprintf_r+0x238>
  404994:	9311      	str	r3, [sp, #68]	; 0x44
  404996:	2a00      	cmp	r2, #0
  404998:	f040 86ea 	bne.w	405770 <_svfprintf_r+0x1454>
  40499c:	f01b 0f20 	tst.w	fp, #32
  4049a0:	d15d      	bne.n	404a5e <_svfprintf_r+0x742>
  4049a2:	f01b 0f10 	tst.w	fp, #16
  4049a6:	f040 8308 	bne.w	404fba <_svfprintf_r+0xc9e>
  4049aa:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4049ae:	f000 8304 	beq.w	404fba <_svfprintf_r+0xc9e>
  4049b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4049b4:	f9b1 4000 	ldrsh.w	r4, [r1]
  4049b8:	3104      	adds	r1, #4
  4049ba:	17e5      	asrs	r5, r4, #31
  4049bc:	4622      	mov	r2, r4
  4049be:	462b      	mov	r3, r5
  4049c0:	910f      	str	r1, [sp, #60]	; 0x3c
  4049c2:	2a00      	cmp	r2, #0
  4049c4:	f173 0300 	sbcs.w	r3, r3, #0
  4049c8:	db58      	blt.n	404a7c <_svfprintf_r+0x760>
  4049ca:	990a      	ldr	r1, [sp, #40]	; 0x28
  4049cc:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4049d0:	1c4a      	adds	r2, r1, #1
  4049d2:	f04f 0301 	mov.w	r3, #1
  4049d6:	f47f ad9b 	bne.w	404510 <_svfprintf_r+0x1f4>
  4049da:	ea54 0205 	orrs.w	r2, r4, r5
  4049de:	f000 81df 	beq.w	404da0 <_svfprintf_r+0xa84>
  4049e2:	f8cd b01c 	str.w	fp, [sp, #28]
  4049e6:	2b01      	cmp	r3, #1
  4049e8:	f000 827b 	beq.w	404ee2 <_svfprintf_r+0xbc6>
  4049ec:	2b02      	cmp	r3, #2
  4049ee:	f040 8206 	bne.w	404dfe <_svfprintf_r+0xae2>
  4049f2:	9818      	ldr	r0, [sp, #96]	; 0x60
  4049f4:	464e      	mov	r6, r9
  4049f6:	0923      	lsrs	r3, r4, #4
  4049f8:	f004 010f 	and.w	r1, r4, #15
  4049fc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404a00:	092a      	lsrs	r2, r5, #4
  404a02:	461c      	mov	r4, r3
  404a04:	4615      	mov	r5, r2
  404a06:	5c43      	ldrb	r3, [r0, r1]
  404a08:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404a0c:	ea54 0305 	orrs.w	r3, r4, r5
  404a10:	d1f1      	bne.n	4049f6 <_svfprintf_r+0x6da>
  404a12:	eba9 0306 	sub.w	r3, r9, r6
  404a16:	930e      	str	r3, [sp, #56]	; 0x38
  404a18:	e590      	b.n	40453c <_svfprintf_r+0x220>
  404a1a:	9311      	str	r3, [sp, #68]	; 0x44
  404a1c:	2a00      	cmp	r2, #0
  404a1e:	f040 86a3 	bne.w	405768 <_svfprintf_r+0x144c>
  404a22:	4b7e      	ldr	r3, [pc, #504]	; (404c1c <_svfprintf_r+0x900>)
  404a24:	9318      	str	r3, [sp, #96]	; 0x60
  404a26:	f01b 0f20 	tst.w	fp, #32
  404a2a:	f43f aeef 	beq.w	40480c <_svfprintf_r+0x4f0>
  404a2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404a30:	3507      	adds	r5, #7
  404a32:	f025 0307 	bic.w	r3, r5, #7
  404a36:	f103 0208 	add.w	r2, r3, #8
  404a3a:	f01b 0f01 	tst.w	fp, #1
  404a3e:	920f      	str	r2, [sp, #60]	; 0x3c
  404a40:	e9d3 4500 	ldrd	r4, r5, [r3]
  404a44:	f47f aef4 	bne.w	404830 <_svfprintf_r+0x514>
  404a48:	2302      	movs	r3, #2
  404a4a:	e55a      	b.n	404502 <_svfprintf_r+0x1e6>
  404a4c:	9311      	str	r3, [sp, #68]	; 0x44
  404a4e:	2a00      	cmp	r2, #0
  404a50:	f040 8686 	bne.w	405760 <_svfprintf_r+0x1444>
  404a54:	f04b 0b10 	orr.w	fp, fp, #16
  404a58:	f01b 0f20 	tst.w	fp, #32
  404a5c:	d0a1      	beq.n	4049a2 <_svfprintf_r+0x686>
  404a5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404a60:	3507      	adds	r5, #7
  404a62:	f025 0507 	bic.w	r5, r5, #7
  404a66:	e9d5 2300 	ldrd	r2, r3, [r5]
  404a6a:	2a00      	cmp	r2, #0
  404a6c:	f105 0108 	add.w	r1, r5, #8
  404a70:	461d      	mov	r5, r3
  404a72:	f173 0300 	sbcs.w	r3, r3, #0
  404a76:	910f      	str	r1, [sp, #60]	; 0x3c
  404a78:	4614      	mov	r4, r2
  404a7a:	daa6      	bge.n	4049ca <_svfprintf_r+0x6ae>
  404a7c:	272d      	movs	r7, #45	; 0x2d
  404a7e:	4264      	negs	r4, r4
  404a80:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404a84:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404a88:	2301      	movs	r3, #1
  404a8a:	e53d      	b.n	404508 <_svfprintf_r+0x1ec>
  404a8c:	9311      	str	r3, [sp, #68]	; 0x44
  404a8e:	2a00      	cmp	r2, #0
  404a90:	f040 8662 	bne.w	405758 <_svfprintf_r+0x143c>
  404a94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404a96:	3507      	adds	r5, #7
  404a98:	f025 0307 	bic.w	r3, r5, #7
  404a9c:	f103 0208 	add.w	r2, r3, #8
  404aa0:	920f      	str	r2, [sp, #60]	; 0x3c
  404aa2:	681a      	ldr	r2, [r3, #0]
  404aa4:	9215      	str	r2, [sp, #84]	; 0x54
  404aa6:	685b      	ldr	r3, [r3, #4]
  404aa8:	9314      	str	r3, [sp, #80]	; 0x50
  404aaa:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404aac:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404aae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404ab2:	4628      	mov	r0, r5
  404ab4:	4621      	mov	r1, r4
  404ab6:	f04f 32ff 	mov.w	r2, #4294967295
  404aba:	4b59      	ldr	r3, [pc, #356]	; (404c20 <_svfprintf_r+0x904>)
  404abc:	f004 ff1e 	bl	4098fc <__aeabi_dcmpun>
  404ac0:	2800      	cmp	r0, #0
  404ac2:	f040 834a 	bne.w	40515a <_svfprintf_r+0xe3e>
  404ac6:	4628      	mov	r0, r5
  404ac8:	4621      	mov	r1, r4
  404aca:	f04f 32ff 	mov.w	r2, #4294967295
  404ace:	4b54      	ldr	r3, [pc, #336]	; (404c20 <_svfprintf_r+0x904>)
  404ad0:	f004 fef6 	bl	4098c0 <__aeabi_dcmple>
  404ad4:	2800      	cmp	r0, #0
  404ad6:	f040 8340 	bne.w	40515a <_svfprintf_r+0xe3e>
  404ada:	a815      	add	r0, sp, #84	; 0x54
  404adc:	c80d      	ldmia	r0, {r0, r2, r3}
  404ade:	9914      	ldr	r1, [sp, #80]	; 0x50
  404ae0:	f004 fee4 	bl	4098ac <__aeabi_dcmplt>
  404ae4:	2800      	cmp	r0, #0
  404ae6:	f040 8530 	bne.w	40554a <_svfprintf_r+0x122e>
  404aea:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404aee:	4e4d      	ldr	r6, [pc, #308]	; (404c24 <_svfprintf_r+0x908>)
  404af0:	4b4d      	ldr	r3, [pc, #308]	; (404c28 <_svfprintf_r+0x90c>)
  404af2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404af6:	9007      	str	r0, [sp, #28]
  404af8:	9811      	ldr	r0, [sp, #68]	; 0x44
  404afa:	2203      	movs	r2, #3
  404afc:	2100      	movs	r1, #0
  404afe:	9208      	str	r2, [sp, #32]
  404b00:	910a      	str	r1, [sp, #40]	; 0x28
  404b02:	2847      	cmp	r0, #71	; 0x47
  404b04:	bfd8      	it	le
  404b06:	461e      	movle	r6, r3
  404b08:	920e      	str	r2, [sp, #56]	; 0x38
  404b0a:	9112      	str	r1, [sp, #72]	; 0x48
  404b0c:	e51e      	b.n	40454c <_svfprintf_r+0x230>
  404b0e:	f04b 0b08 	orr.w	fp, fp, #8
  404b12:	f89a 3000 	ldrb.w	r3, [sl]
  404b16:	e459      	b.n	4043cc <_svfprintf_r+0xb0>
  404b18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404b1c:	2300      	movs	r3, #0
  404b1e:	461c      	mov	r4, r3
  404b20:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404b24:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404b28:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404b2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404b30:	2809      	cmp	r0, #9
  404b32:	d9f5      	bls.n	404b20 <_svfprintf_r+0x804>
  404b34:	940d      	str	r4, [sp, #52]	; 0x34
  404b36:	e44b      	b.n	4043d0 <_svfprintf_r+0xb4>
  404b38:	f04b 0b10 	orr.w	fp, fp, #16
  404b3c:	9311      	str	r3, [sp, #68]	; 0x44
  404b3e:	f01b 0320 	ands.w	r3, fp, #32
  404b42:	f43f ae1d 	beq.w	404780 <_svfprintf_r+0x464>
  404b46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404b48:	3507      	adds	r5, #7
  404b4a:	f025 0307 	bic.w	r3, r5, #7
  404b4e:	f103 0208 	add.w	r2, r3, #8
  404b52:	e9d3 4500 	ldrd	r4, r5, [r3]
  404b56:	920f      	str	r2, [sp, #60]	; 0x3c
  404b58:	2300      	movs	r3, #0
  404b5a:	e4d2      	b.n	404502 <_svfprintf_r+0x1e6>
  404b5c:	9311      	str	r3, [sp, #68]	; 0x44
  404b5e:	2a00      	cmp	r2, #0
  404b60:	f040 85e7 	bne.w	405732 <_svfprintf_r+0x1416>
  404b64:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b66:	2a00      	cmp	r2, #0
  404b68:	f43f aca3 	beq.w	4044b2 <_svfprintf_r+0x196>
  404b6c:	2300      	movs	r3, #0
  404b6e:	2101      	movs	r1, #1
  404b70:	461f      	mov	r7, r3
  404b72:	9108      	str	r1, [sp, #32]
  404b74:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404b78:	f8cd b01c 	str.w	fp, [sp, #28]
  404b7c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404b80:	930a      	str	r3, [sp, #40]	; 0x28
  404b82:	9312      	str	r3, [sp, #72]	; 0x48
  404b84:	910e      	str	r1, [sp, #56]	; 0x38
  404b86:	ae28      	add	r6, sp, #160	; 0xa0
  404b88:	e4e4      	b.n	404554 <_svfprintf_r+0x238>
  404b8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b8c:	e534      	b.n	4045f8 <_svfprintf_r+0x2dc>
  404b8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404b90:	2b65      	cmp	r3, #101	; 0x65
  404b92:	f340 80a7 	ble.w	404ce4 <_svfprintf_r+0x9c8>
  404b96:	a815      	add	r0, sp, #84	; 0x54
  404b98:	c80d      	ldmia	r0, {r0, r2, r3}
  404b9a:	9914      	ldr	r1, [sp, #80]	; 0x50
  404b9c:	f004 fe7c 	bl	409898 <__aeabi_dcmpeq>
  404ba0:	2800      	cmp	r0, #0
  404ba2:	f000 8150 	beq.w	404e46 <_svfprintf_r+0xb2a>
  404ba6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ba8:	4a20      	ldr	r2, [pc, #128]	; (404c2c <_svfprintf_r+0x910>)
  404baa:	f8c8 2000 	str.w	r2, [r8]
  404bae:	3301      	adds	r3, #1
  404bb0:	3401      	adds	r4, #1
  404bb2:	2201      	movs	r2, #1
  404bb4:	2b07      	cmp	r3, #7
  404bb6:	9427      	str	r4, [sp, #156]	; 0x9c
  404bb8:	9326      	str	r3, [sp, #152]	; 0x98
  404bba:	f8c8 2004 	str.w	r2, [r8, #4]
  404bbe:	f300 836a 	bgt.w	405296 <_svfprintf_r+0xf7a>
  404bc2:	f108 0808 	add.w	r8, r8, #8
  404bc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404bc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404bca:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404bcc:	4293      	cmp	r3, r2
  404bce:	db03      	blt.n	404bd8 <_svfprintf_r+0x8bc>
  404bd0:	9b07      	ldr	r3, [sp, #28]
  404bd2:	07dd      	lsls	r5, r3, #31
  404bd4:	f57f ad82 	bpl.w	4046dc <_svfprintf_r+0x3c0>
  404bd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404bda:	9919      	ldr	r1, [sp, #100]	; 0x64
  404bdc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404bde:	f8c8 2000 	str.w	r2, [r8]
  404be2:	3301      	adds	r3, #1
  404be4:	440c      	add	r4, r1
  404be6:	2b07      	cmp	r3, #7
  404be8:	f8c8 1004 	str.w	r1, [r8, #4]
  404bec:	9427      	str	r4, [sp, #156]	; 0x9c
  404bee:	9326      	str	r3, [sp, #152]	; 0x98
  404bf0:	f300 839e 	bgt.w	405330 <_svfprintf_r+0x1014>
  404bf4:	f108 0808 	add.w	r8, r8, #8
  404bf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404bfa:	1e5e      	subs	r6, r3, #1
  404bfc:	2e00      	cmp	r6, #0
  404bfe:	f77f ad6d 	ble.w	4046dc <_svfprintf_r+0x3c0>
  404c02:	2e10      	cmp	r6, #16
  404c04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c06:	4d0a      	ldr	r5, [pc, #40]	; (404c30 <_svfprintf_r+0x914>)
  404c08:	f340 81f5 	ble.w	404ff6 <_svfprintf_r+0xcda>
  404c0c:	4622      	mov	r2, r4
  404c0e:	2710      	movs	r7, #16
  404c10:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404c14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404c16:	e013      	b.n	404c40 <_svfprintf_r+0x924>
  404c18:	0040a0a8 	.word	0x0040a0a8
  404c1c:	0040a094 	.word	0x0040a094
  404c20:	7fefffff 	.word	0x7fefffff
  404c24:	0040a088 	.word	0x0040a088
  404c28:	0040a084 	.word	0x0040a084
  404c2c:	0040a0c4 	.word	0x0040a0c4
  404c30:	0040a0d8 	.word	0x0040a0d8
  404c34:	f108 0808 	add.w	r8, r8, #8
  404c38:	3e10      	subs	r6, #16
  404c3a:	2e10      	cmp	r6, #16
  404c3c:	f340 81da 	ble.w	404ff4 <_svfprintf_r+0xcd8>
  404c40:	3301      	adds	r3, #1
  404c42:	3210      	adds	r2, #16
  404c44:	2b07      	cmp	r3, #7
  404c46:	9227      	str	r2, [sp, #156]	; 0x9c
  404c48:	9326      	str	r3, [sp, #152]	; 0x98
  404c4a:	e888 00a0 	stmia.w	r8, {r5, r7}
  404c4e:	ddf1      	ble.n	404c34 <_svfprintf_r+0x918>
  404c50:	aa25      	add	r2, sp, #148	; 0x94
  404c52:	4621      	mov	r1, r4
  404c54:	4658      	mov	r0, fp
  404c56:	f003 ff83 	bl	408b60 <__ssprint_r>
  404c5a:	2800      	cmp	r0, #0
  404c5c:	f47f ac30 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404c60:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404c62:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c64:	46c8      	mov	r8, r9
  404c66:	e7e7      	b.n	404c38 <_svfprintf_r+0x91c>
  404c68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404c6a:	9a08      	ldr	r2, [sp, #32]
  404c6c:	1a9f      	subs	r7, r3, r2
  404c6e:	2f00      	cmp	r7, #0
  404c70:	f77f ace5 	ble.w	40463e <_svfprintf_r+0x322>
  404c74:	2f10      	cmp	r7, #16
  404c76:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404c78:	4db6      	ldr	r5, [pc, #728]	; (404f54 <_svfprintf_r+0xc38>)
  404c7a:	dd27      	ble.n	404ccc <_svfprintf_r+0x9b0>
  404c7c:	4642      	mov	r2, r8
  404c7e:	4621      	mov	r1, r4
  404c80:	46b0      	mov	r8, r6
  404c82:	f04f 0b10 	mov.w	fp, #16
  404c86:	462e      	mov	r6, r5
  404c88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404c8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404c8c:	e004      	b.n	404c98 <_svfprintf_r+0x97c>
  404c8e:	3f10      	subs	r7, #16
  404c90:	2f10      	cmp	r7, #16
  404c92:	f102 0208 	add.w	r2, r2, #8
  404c96:	dd15      	ble.n	404cc4 <_svfprintf_r+0x9a8>
  404c98:	3301      	adds	r3, #1
  404c9a:	3110      	adds	r1, #16
  404c9c:	2b07      	cmp	r3, #7
  404c9e:	9127      	str	r1, [sp, #156]	; 0x9c
  404ca0:	9326      	str	r3, [sp, #152]	; 0x98
  404ca2:	e882 0840 	stmia.w	r2, {r6, fp}
  404ca6:	ddf2      	ble.n	404c8e <_svfprintf_r+0x972>
  404ca8:	aa25      	add	r2, sp, #148	; 0x94
  404caa:	4629      	mov	r1, r5
  404cac:	4620      	mov	r0, r4
  404cae:	f003 ff57 	bl	408b60 <__ssprint_r>
  404cb2:	2800      	cmp	r0, #0
  404cb4:	f47f ac04 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404cb8:	3f10      	subs	r7, #16
  404cba:	2f10      	cmp	r7, #16
  404cbc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404cbe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404cc0:	464a      	mov	r2, r9
  404cc2:	dce9      	bgt.n	404c98 <_svfprintf_r+0x97c>
  404cc4:	4635      	mov	r5, r6
  404cc6:	460c      	mov	r4, r1
  404cc8:	4646      	mov	r6, r8
  404cca:	4690      	mov	r8, r2
  404ccc:	3301      	adds	r3, #1
  404cce:	443c      	add	r4, r7
  404cd0:	2b07      	cmp	r3, #7
  404cd2:	9427      	str	r4, [sp, #156]	; 0x9c
  404cd4:	9326      	str	r3, [sp, #152]	; 0x98
  404cd6:	e888 00a0 	stmia.w	r8, {r5, r7}
  404cda:	f300 8232 	bgt.w	405142 <_svfprintf_r+0xe26>
  404cde:	f108 0808 	add.w	r8, r8, #8
  404ce2:	e4ac      	b.n	40463e <_svfprintf_r+0x322>
  404ce4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404ce6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404ce8:	2b01      	cmp	r3, #1
  404cea:	f340 81fe 	ble.w	4050ea <_svfprintf_r+0xdce>
  404cee:	3701      	adds	r7, #1
  404cf0:	3401      	adds	r4, #1
  404cf2:	2301      	movs	r3, #1
  404cf4:	2f07      	cmp	r7, #7
  404cf6:	9427      	str	r4, [sp, #156]	; 0x9c
  404cf8:	9726      	str	r7, [sp, #152]	; 0x98
  404cfa:	f8c8 6000 	str.w	r6, [r8]
  404cfe:	f8c8 3004 	str.w	r3, [r8, #4]
  404d02:	f300 8203 	bgt.w	40510c <_svfprintf_r+0xdf0>
  404d06:	f108 0808 	add.w	r8, r8, #8
  404d0a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404d0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  404d0e:	f8c8 3000 	str.w	r3, [r8]
  404d12:	3701      	adds	r7, #1
  404d14:	4414      	add	r4, r2
  404d16:	2f07      	cmp	r7, #7
  404d18:	9427      	str	r4, [sp, #156]	; 0x9c
  404d1a:	9726      	str	r7, [sp, #152]	; 0x98
  404d1c:	f8c8 2004 	str.w	r2, [r8, #4]
  404d20:	f300 8200 	bgt.w	405124 <_svfprintf_r+0xe08>
  404d24:	f108 0808 	add.w	r8, r8, #8
  404d28:	a815      	add	r0, sp, #84	; 0x54
  404d2a:	c80d      	ldmia	r0, {r0, r2, r3}
  404d2c:	9914      	ldr	r1, [sp, #80]	; 0x50
  404d2e:	f004 fdb3 	bl	409898 <__aeabi_dcmpeq>
  404d32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404d34:	2800      	cmp	r0, #0
  404d36:	f040 8101 	bne.w	404f3c <_svfprintf_r+0xc20>
  404d3a:	3b01      	subs	r3, #1
  404d3c:	3701      	adds	r7, #1
  404d3e:	3601      	adds	r6, #1
  404d40:	441c      	add	r4, r3
  404d42:	2f07      	cmp	r7, #7
  404d44:	9726      	str	r7, [sp, #152]	; 0x98
  404d46:	9427      	str	r4, [sp, #156]	; 0x9c
  404d48:	f8c8 6000 	str.w	r6, [r8]
  404d4c:	f8c8 3004 	str.w	r3, [r8, #4]
  404d50:	f300 8127 	bgt.w	404fa2 <_svfprintf_r+0xc86>
  404d54:	f108 0808 	add.w	r8, r8, #8
  404d58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404d5a:	f8c8 2004 	str.w	r2, [r8, #4]
  404d5e:	3701      	adds	r7, #1
  404d60:	4414      	add	r4, r2
  404d62:	ab21      	add	r3, sp, #132	; 0x84
  404d64:	2f07      	cmp	r7, #7
  404d66:	9427      	str	r4, [sp, #156]	; 0x9c
  404d68:	9726      	str	r7, [sp, #152]	; 0x98
  404d6a:	f8c8 3000 	str.w	r3, [r8]
  404d6e:	f77f acb3 	ble.w	4046d8 <_svfprintf_r+0x3bc>
  404d72:	aa25      	add	r2, sp, #148	; 0x94
  404d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d76:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d78:	f003 fef2 	bl	408b60 <__ssprint_r>
  404d7c:	2800      	cmp	r0, #0
  404d7e:	f47f ab9f 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404d82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404d84:	46c8      	mov	r8, r9
  404d86:	e4a9      	b.n	4046dc <_svfprintf_r+0x3c0>
  404d88:	aa25      	add	r2, sp, #148	; 0x94
  404d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404d8c:	980c      	ldr	r0, [sp, #48]	; 0x30
  404d8e:	f003 fee7 	bl	408b60 <__ssprint_r>
  404d92:	2800      	cmp	r0, #0
  404d94:	f43f aceb 	beq.w	40476e <_svfprintf_r+0x452>
  404d98:	f7ff bb92 	b.w	4044c0 <_svfprintf_r+0x1a4>
  404d9c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  404da0:	2b01      	cmp	r3, #1
  404da2:	f000 8134 	beq.w	40500e <_svfprintf_r+0xcf2>
  404da6:	2b02      	cmp	r3, #2
  404da8:	d125      	bne.n	404df6 <_svfprintf_r+0xada>
  404daa:	f8cd b01c 	str.w	fp, [sp, #28]
  404dae:	2400      	movs	r4, #0
  404db0:	2500      	movs	r5, #0
  404db2:	e61e      	b.n	4049f2 <_svfprintf_r+0x6d6>
  404db4:	aa25      	add	r2, sp, #148	; 0x94
  404db6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404db8:	980c      	ldr	r0, [sp, #48]	; 0x30
  404dba:	f003 fed1 	bl	408b60 <__ssprint_r>
  404dbe:	2800      	cmp	r0, #0
  404dc0:	f47f ab7e 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404dc4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404dc6:	46c8      	mov	r8, r9
  404dc8:	e475      	b.n	4046b6 <_svfprintf_r+0x39a>
  404dca:	aa25      	add	r2, sp, #148	; 0x94
  404dcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404dce:	980c      	ldr	r0, [sp, #48]	; 0x30
  404dd0:	f003 fec6 	bl	408b60 <__ssprint_r>
  404dd4:	2800      	cmp	r0, #0
  404dd6:	f47f ab73 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404dda:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404ddc:	46c8      	mov	r8, r9
  404dde:	e41b      	b.n	404618 <_svfprintf_r+0x2fc>
  404de0:	aa25      	add	r2, sp, #148	; 0x94
  404de2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404de4:	980c      	ldr	r0, [sp, #48]	; 0x30
  404de6:	f003 febb 	bl	408b60 <__ssprint_r>
  404dea:	2800      	cmp	r0, #0
  404dec:	f47f ab68 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404df0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404df2:	46c8      	mov	r8, r9
  404df4:	e420      	b.n	404638 <_svfprintf_r+0x31c>
  404df6:	f8cd b01c 	str.w	fp, [sp, #28]
  404dfa:	2400      	movs	r4, #0
  404dfc:	2500      	movs	r5, #0
  404dfe:	4649      	mov	r1, r9
  404e00:	e000      	b.n	404e04 <_svfprintf_r+0xae8>
  404e02:	4631      	mov	r1, r6
  404e04:	08e2      	lsrs	r2, r4, #3
  404e06:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404e0a:	08e8      	lsrs	r0, r5, #3
  404e0c:	f004 0307 	and.w	r3, r4, #7
  404e10:	4605      	mov	r5, r0
  404e12:	4614      	mov	r4, r2
  404e14:	3330      	adds	r3, #48	; 0x30
  404e16:	ea54 0205 	orrs.w	r2, r4, r5
  404e1a:	f801 3c01 	strb.w	r3, [r1, #-1]
  404e1e:	f101 36ff 	add.w	r6, r1, #4294967295
  404e22:	d1ee      	bne.n	404e02 <_svfprintf_r+0xae6>
  404e24:	9a07      	ldr	r2, [sp, #28]
  404e26:	07d2      	lsls	r2, r2, #31
  404e28:	f57f adf3 	bpl.w	404a12 <_svfprintf_r+0x6f6>
  404e2c:	2b30      	cmp	r3, #48	; 0x30
  404e2e:	f43f adf0 	beq.w	404a12 <_svfprintf_r+0x6f6>
  404e32:	3902      	subs	r1, #2
  404e34:	2330      	movs	r3, #48	; 0x30
  404e36:	f806 3c01 	strb.w	r3, [r6, #-1]
  404e3a:	eba9 0301 	sub.w	r3, r9, r1
  404e3e:	930e      	str	r3, [sp, #56]	; 0x38
  404e40:	460e      	mov	r6, r1
  404e42:	f7ff bb7b 	b.w	40453c <_svfprintf_r+0x220>
  404e46:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404e48:	2900      	cmp	r1, #0
  404e4a:	f340 822e 	ble.w	4052aa <_svfprintf_r+0xf8e>
  404e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404e52:	4293      	cmp	r3, r2
  404e54:	bfa8      	it	ge
  404e56:	4613      	movge	r3, r2
  404e58:	2b00      	cmp	r3, #0
  404e5a:	461f      	mov	r7, r3
  404e5c:	dd0d      	ble.n	404e7a <_svfprintf_r+0xb5e>
  404e5e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e60:	f8c8 6000 	str.w	r6, [r8]
  404e64:	3301      	adds	r3, #1
  404e66:	443c      	add	r4, r7
  404e68:	2b07      	cmp	r3, #7
  404e6a:	9427      	str	r4, [sp, #156]	; 0x9c
  404e6c:	f8c8 7004 	str.w	r7, [r8, #4]
  404e70:	9326      	str	r3, [sp, #152]	; 0x98
  404e72:	f300 831f 	bgt.w	4054b4 <_svfprintf_r+0x1198>
  404e76:	f108 0808 	add.w	r8, r8, #8
  404e7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404e7c:	2f00      	cmp	r7, #0
  404e7e:	bfa8      	it	ge
  404e80:	1bdb      	subge	r3, r3, r7
  404e82:	2b00      	cmp	r3, #0
  404e84:	461f      	mov	r7, r3
  404e86:	f340 80d6 	ble.w	405036 <_svfprintf_r+0xd1a>
  404e8a:	2f10      	cmp	r7, #16
  404e8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404e8e:	4d31      	ldr	r5, [pc, #196]	; (404f54 <_svfprintf_r+0xc38>)
  404e90:	f340 81ed 	ble.w	40526e <_svfprintf_r+0xf52>
  404e94:	4642      	mov	r2, r8
  404e96:	4621      	mov	r1, r4
  404e98:	46b0      	mov	r8, r6
  404e9a:	f04f 0b10 	mov.w	fp, #16
  404e9e:	462e      	mov	r6, r5
  404ea0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404ea2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404ea4:	e004      	b.n	404eb0 <_svfprintf_r+0xb94>
  404ea6:	3208      	adds	r2, #8
  404ea8:	3f10      	subs	r7, #16
  404eaa:	2f10      	cmp	r7, #16
  404eac:	f340 81db 	ble.w	405266 <_svfprintf_r+0xf4a>
  404eb0:	3301      	adds	r3, #1
  404eb2:	3110      	adds	r1, #16
  404eb4:	2b07      	cmp	r3, #7
  404eb6:	9127      	str	r1, [sp, #156]	; 0x9c
  404eb8:	9326      	str	r3, [sp, #152]	; 0x98
  404eba:	e882 0840 	stmia.w	r2, {r6, fp}
  404ebe:	ddf2      	ble.n	404ea6 <_svfprintf_r+0xb8a>
  404ec0:	aa25      	add	r2, sp, #148	; 0x94
  404ec2:	4629      	mov	r1, r5
  404ec4:	4620      	mov	r0, r4
  404ec6:	f003 fe4b 	bl	408b60 <__ssprint_r>
  404eca:	2800      	cmp	r0, #0
  404ecc:	f47f aaf8 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404ed0:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404ed2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ed4:	464a      	mov	r2, r9
  404ed6:	e7e7      	b.n	404ea8 <_svfprintf_r+0xb8c>
  404ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404eda:	930e      	str	r3, [sp, #56]	; 0x38
  404edc:	464e      	mov	r6, r9
  404ede:	f7ff bb2d 	b.w	40453c <_svfprintf_r+0x220>
  404ee2:	2d00      	cmp	r5, #0
  404ee4:	bf08      	it	eq
  404ee6:	2c0a      	cmpeq	r4, #10
  404ee8:	f0c0 808f 	bcc.w	40500a <_svfprintf_r+0xcee>
  404eec:	464e      	mov	r6, r9
  404eee:	4620      	mov	r0, r4
  404ef0:	4629      	mov	r1, r5
  404ef2:	220a      	movs	r2, #10
  404ef4:	2300      	movs	r3, #0
  404ef6:	f004 fd3f 	bl	409978 <__aeabi_uldivmod>
  404efa:	3230      	adds	r2, #48	; 0x30
  404efc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  404f00:	4620      	mov	r0, r4
  404f02:	4629      	mov	r1, r5
  404f04:	2300      	movs	r3, #0
  404f06:	220a      	movs	r2, #10
  404f08:	f004 fd36 	bl	409978 <__aeabi_uldivmod>
  404f0c:	4604      	mov	r4, r0
  404f0e:	460d      	mov	r5, r1
  404f10:	ea54 0305 	orrs.w	r3, r4, r5
  404f14:	d1eb      	bne.n	404eee <_svfprintf_r+0xbd2>
  404f16:	eba9 0306 	sub.w	r3, r9, r6
  404f1a:	930e      	str	r3, [sp, #56]	; 0x38
  404f1c:	f7ff bb0e 	b.w	40453c <_svfprintf_r+0x220>
  404f20:	aa25      	add	r2, sp, #148	; 0x94
  404f22:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f24:	980c      	ldr	r0, [sp, #48]	; 0x30
  404f26:	f003 fe1b 	bl	408b60 <__ssprint_r>
  404f2a:	2800      	cmp	r0, #0
  404f2c:	f47f aac8 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404f30:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404f34:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f36:	46c8      	mov	r8, r9
  404f38:	f7ff bb5e 	b.w	4045f8 <_svfprintf_r+0x2dc>
  404f3c:	1e5e      	subs	r6, r3, #1
  404f3e:	2e00      	cmp	r6, #0
  404f40:	f77f af0a 	ble.w	404d58 <_svfprintf_r+0xa3c>
  404f44:	2e10      	cmp	r6, #16
  404f46:	4d03      	ldr	r5, [pc, #12]	; (404f54 <_svfprintf_r+0xc38>)
  404f48:	dd22      	ble.n	404f90 <_svfprintf_r+0xc74>
  404f4a:	4622      	mov	r2, r4
  404f4c:	f04f 0b10 	mov.w	fp, #16
  404f50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404f52:	e006      	b.n	404f62 <_svfprintf_r+0xc46>
  404f54:	0040a0d8 	.word	0x0040a0d8
  404f58:	3e10      	subs	r6, #16
  404f5a:	2e10      	cmp	r6, #16
  404f5c:	f108 0808 	add.w	r8, r8, #8
  404f60:	dd15      	ble.n	404f8e <_svfprintf_r+0xc72>
  404f62:	3701      	adds	r7, #1
  404f64:	3210      	adds	r2, #16
  404f66:	2f07      	cmp	r7, #7
  404f68:	9227      	str	r2, [sp, #156]	; 0x9c
  404f6a:	9726      	str	r7, [sp, #152]	; 0x98
  404f6c:	e888 0820 	stmia.w	r8, {r5, fp}
  404f70:	ddf2      	ble.n	404f58 <_svfprintf_r+0xc3c>
  404f72:	aa25      	add	r2, sp, #148	; 0x94
  404f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404f76:	4620      	mov	r0, r4
  404f78:	f003 fdf2 	bl	408b60 <__ssprint_r>
  404f7c:	2800      	cmp	r0, #0
  404f7e:	f47f aa9f 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404f82:	3e10      	subs	r6, #16
  404f84:	2e10      	cmp	r6, #16
  404f86:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404f88:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404f8a:	46c8      	mov	r8, r9
  404f8c:	dce9      	bgt.n	404f62 <_svfprintf_r+0xc46>
  404f8e:	4614      	mov	r4, r2
  404f90:	3701      	adds	r7, #1
  404f92:	4434      	add	r4, r6
  404f94:	2f07      	cmp	r7, #7
  404f96:	9427      	str	r4, [sp, #156]	; 0x9c
  404f98:	9726      	str	r7, [sp, #152]	; 0x98
  404f9a:	e888 0060 	stmia.w	r8, {r5, r6}
  404f9e:	f77f aed9 	ble.w	404d54 <_svfprintf_r+0xa38>
  404fa2:	aa25      	add	r2, sp, #148	; 0x94
  404fa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
  404fa8:	f003 fdda 	bl	408b60 <__ssprint_r>
  404fac:	2800      	cmp	r0, #0
  404fae:	f47f aa87 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  404fb2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404fb4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404fb6:	46c8      	mov	r8, r9
  404fb8:	e6ce      	b.n	404d58 <_svfprintf_r+0xa3c>
  404fba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404fbc:	6814      	ldr	r4, [r2, #0]
  404fbe:	4613      	mov	r3, r2
  404fc0:	3304      	adds	r3, #4
  404fc2:	17e5      	asrs	r5, r4, #31
  404fc4:	930f      	str	r3, [sp, #60]	; 0x3c
  404fc6:	4622      	mov	r2, r4
  404fc8:	462b      	mov	r3, r5
  404fca:	e4fa      	b.n	4049c2 <_svfprintf_r+0x6a6>
  404fcc:	3204      	adds	r2, #4
  404fce:	681c      	ldr	r4, [r3, #0]
  404fd0:	920f      	str	r2, [sp, #60]	; 0x3c
  404fd2:	2301      	movs	r3, #1
  404fd4:	2500      	movs	r5, #0
  404fd6:	f7ff ba94 	b.w	404502 <_svfprintf_r+0x1e6>
  404fda:	681c      	ldr	r4, [r3, #0]
  404fdc:	3304      	adds	r3, #4
  404fde:	930f      	str	r3, [sp, #60]	; 0x3c
  404fe0:	2500      	movs	r5, #0
  404fe2:	e421      	b.n	404828 <_svfprintf_r+0x50c>
  404fe4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404fe6:	460a      	mov	r2, r1
  404fe8:	3204      	adds	r2, #4
  404fea:	680c      	ldr	r4, [r1, #0]
  404fec:	920f      	str	r2, [sp, #60]	; 0x3c
  404fee:	2500      	movs	r5, #0
  404ff0:	f7ff ba87 	b.w	404502 <_svfprintf_r+0x1e6>
  404ff4:	4614      	mov	r4, r2
  404ff6:	3301      	adds	r3, #1
  404ff8:	4434      	add	r4, r6
  404ffa:	2b07      	cmp	r3, #7
  404ffc:	9427      	str	r4, [sp, #156]	; 0x9c
  404ffe:	9326      	str	r3, [sp, #152]	; 0x98
  405000:	e888 0060 	stmia.w	r8, {r5, r6}
  405004:	f77f ab68 	ble.w	4046d8 <_svfprintf_r+0x3bc>
  405008:	e6b3      	b.n	404d72 <_svfprintf_r+0xa56>
  40500a:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40500e:	f8cd b01c 	str.w	fp, [sp, #28]
  405012:	ae42      	add	r6, sp, #264	; 0x108
  405014:	3430      	adds	r4, #48	; 0x30
  405016:	2301      	movs	r3, #1
  405018:	f806 4d41 	strb.w	r4, [r6, #-65]!
  40501c:	930e      	str	r3, [sp, #56]	; 0x38
  40501e:	f7ff ba8d 	b.w	40453c <_svfprintf_r+0x220>
  405022:	aa25      	add	r2, sp, #148	; 0x94
  405024:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405026:	980c      	ldr	r0, [sp, #48]	; 0x30
  405028:	f003 fd9a 	bl	408b60 <__ssprint_r>
  40502c:	2800      	cmp	r0, #0
  40502e:	f47f aa47 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  405032:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405034:	46c8      	mov	r8, r9
  405036:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  405038:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40503a:	429a      	cmp	r2, r3
  40503c:	db44      	blt.n	4050c8 <_svfprintf_r+0xdac>
  40503e:	9b07      	ldr	r3, [sp, #28]
  405040:	07d9      	lsls	r1, r3, #31
  405042:	d441      	bmi.n	4050c8 <_svfprintf_r+0xdac>
  405044:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405046:	9812      	ldr	r0, [sp, #72]	; 0x48
  405048:	1a9a      	subs	r2, r3, r2
  40504a:	1a1d      	subs	r5, r3, r0
  40504c:	4295      	cmp	r5, r2
  40504e:	bfa8      	it	ge
  405050:	4615      	movge	r5, r2
  405052:	2d00      	cmp	r5, #0
  405054:	dd0e      	ble.n	405074 <_svfprintf_r+0xd58>
  405056:	9926      	ldr	r1, [sp, #152]	; 0x98
  405058:	f8c8 5004 	str.w	r5, [r8, #4]
  40505c:	3101      	adds	r1, #1
  40505e:	4406      	add	r6, r0
  405060:	442c      	add	r4, r5
  405062:	2907      	cmp	r1, #7
  405064:	f8c8 6000 	str.w	r6, [r8]
  405068:	9427      	str	r4, [sp, #156]	; 0x9c
  40506a:	9126      	str	r1, [sp, #152]	; 0x98
  40506c:	f300 823b 	bgt.w	4054e6 <_svfprintf_r+0x11ca>
  405070:	f108 0808 	add.w	r8, r8, #8
  405074:	2d00      	cmp	r5, #0
  405076:	bfac      	ite	ge
  405078:	1b56      	subge	r6, r2, r5
  40507a:	4616      	movlt	r6, r2
  40507c:	2e00      	cmp	r6, #0
  40507e:	f77f ab2d 	ble.w	4046dc <_svfprintf_r+0x3c0>
  405082:	2e10      	cmp	r6, #16
  405084:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405086:	4db0      	ldr	r5, [pc, #704]	; (405348 <_svfprintf_r+0x102c>)
  405088:	ddb5      	ble.n	404ff6 <_svfprintf_r+0xcda>
  40508a:	4622      	mov	r2, r4
  40508c:	2710      	movs	r7, #16
  40508e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405092:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405094:	e004      	b.n	4050a0 <_svfprintf_r+0xd84>
  405096:	f108 0808 	add.w	r8, r8, #8
  40509a:	3e10      	subs	r6, #16
  40509c:	2e10      	cmp	r6, #16
  40509e:	dda9      	ble.n	404ff4 <_svfprintf_r+0xcd8>
  4050a0:	3301      	adds	r3, #1
  4050a2:	3210      	adds	r2, #16
  4050a4:	2b07      	cmp	r3, #7
  4050a6:	9227      	str	r2, [sp, #156]	; 0x9c
  4050a8:	9326      	str	r3, [sp, #152]	; 0x98
  4050aa:	e888 00a0 	stmia.w	r8, {r5, r7}
  4050ae:	ddf2      	ble.n	405096 <_svfprintf_r+0xd7a>
  4050b0:	aa25      	add	r2, sp, #148	; 0x94
  4050b2:	4621      	mov	r1, r4
  4050b4:	4658      	mov	r0, fp
  4050b6:	f003 fd53 	bl	408b60 <__ssprint_r>
  4050ba:	2800      	cmp	r0, #0
  4050bc:	f47f aa00 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  4050c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4050c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050c4:	46c8      	mov	r8, r9
  4050c6:	e7e8      	b.n	40509a <_svfprintf_r+0xd7e>
  4050c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4050ca:	9819      	ldr	r0, [sp, #100]	; 0x64
  4050cc:	991a      	ldr	r1, [sp, #104]	; 0x68
  4050ce:	f8c8 1000 	str.w	r1, [r8]
  4050d2:	3301      	adds	r3, #1
  4050d4:	4404      	add	r4, r0
  4050d6:	2b07      	cmp	r3, #7
  4050d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4050da:	f8c8 0004 	str.w	r0, [r8, #4]
  4050de:	9326      	str	r3, [sp, #152]	; 0x98
  4050e0:	f300 81f5 	bgt.w	4054ce <_svfprintf_r+0x11b2>
  4050e4:	f108 0808 	add.w	r8, r8, #8
  4050e8:	e7ac      	b.n	405044 <_svfprintf_r+0xd28>
  4050ea:	9b07      	ldr	r3, [sp, #28]
  4050ec:	07da      	lsls	r2, r3, #31
  4050ee:	f53f adfe 	bmi.w	404cee <_svfprintf_r+0x9d2>
  4050f2:	3701      	adds	r7, #1
  4050f4:	3401      	adds	r4, #1
  4050f6:	2301      	movs	r3, #1
  4050f8:	2f07      	cmp	r7, #7
  4050fa:	9427      	str	r4, [sp, #156]	; 0x9c
  4050fc:	9726      	str	r7, [sp, #152]	; 0x98
  4050fe:	f8c8 6000 	str.w	r6, [r8]
  405102:	f8c8 3004 	str.w	r3, [r8, #4]
  405106:	f77f ae25 	ble.w	404d54 <_svfprintf_r+0xa38>
  40510a:	e74a      	b.n	404fa2 <_svfprintf_r+0xc86>
  40510c:	aa25      	add	r2, sp, #148	; 0x94
  40510e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405110:	980c      	ldr	r0, [sp, #48]	; 0x30
  405112:	f003 fd25 	bl	408b60 <__ssprint_r>
  405116:	2800      	cmp	r0, #0
  405118:	f47f a9d2 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  40511c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40511e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405120:	46c8      	mov	r8, r9
  405122:	e5f2      	b.n	404d0a <_svfprintf_r+0x9ee>
  405124:	aa25      	add	r2, sp, #148	; 0x94
  405126:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405128:	980c      	ldr	r0, [sp, #48]	; 0x30
  40512a:	f003 fd19 	bl	408b60 <__ssprint_r>
  40512e:	2800      	cmp	r0, #0
  405130:	f47f a9c6 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  405134:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405136:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405138:	46c8      	mov	r8, r9
  40513a:	e5f5      	b.n	404d28 <_svfprintf_r+0xa0c>
  40513c:	464e      	mov	r6, r9
  40513e:	f7ff b9fd 	b.w	40453c <_svfprintf_r+0x220>
  405142:	aa25      	add	r2, sp, #148	; 0x94
  405144:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405146:	980c      	ldr	r0, [sp, #48]	; 0x30
  405148:	f003 fd0a 	bl	408b60 <__ssprint_r>
  40514c:	2800      	cmp	r0, #0
  40514e:	f47f a9b7 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  405152:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405154:	46c8      	mov	r8, r9
  405156:	f7ff ba72 	b.w	40463e <_svfprintf_r+0x322>
  40515a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40515c:	4622      	mov	r2, r4
  40515e:	4620      	mov	r0, r4
  405160:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405162:	4623      	mov	r3, r4
  405164:	4621      	mov	r1, r4
  405166:	f004 fbc9 	bl	4098fc <__aeabi_dcmpun>
  40516a:	2800      	cmp	r0, #0
  40516c:	f040 8286 	bne.w	40567c <_svfprintf_r+0x1360>
  405170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405172:	3301      	adds	r3, #1
  405174:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405176:	f023 0320 	bic.w	r3, r3, #32
  40517a:	930e      	str	r3, [sp, #56]	; 0x38
  40517c:	f000 81e2 	beq.w	405544 <_svfprintf_r+0x1228>
  405180:	2b47      	cmp	r3, #71	; 0x47
  405182:	f000 811e 	beq.w	4053c2 <_svfprintf_r+0x10a6>
  405186:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40518a:	9307      	str	r3, [sp, #28]
  40518c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40518e:	1e1f      	subs	r7, r3, #0
  405190:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405192:	9308      	str	r3, [sp, #32]
  405194:	bfbb      	ittet	lt
  405196:	463b      	movlt	r3, r7
  405198:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40519c:	2300      	movge	r3, #0
  40519e:	232d      	movlt	r3, #45	; 0x2d
  4051a0:	9310      	str	r3, [sp, #64]	; 0x40
  4051a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4051a4:	2b66      	cmp	r3, #102	; 0x66
  4051a6:	f000 81bb 	beq.w	405520 <_svfprintf_r+0x1204>
  4051aa:	2b46      	cmp	r3, #70	; 0x46
  4051ac:	f000 80df 	beq.w	40536e <_svfprintf_r+0x1052>
  4051b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4051b2:	9a08      	ldr	r2, [sp, #32]
  4051b4:	2b45      	cmp	r3, #69	; 0x45
  4051b6:	bf0c      	ite	eq
  4051b8:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4051ba:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4051bc:	a823      	add	r0, sp, #140	; 0x8c
  4051be:	a920      	add	r1, sp, #128	; 0x80
  4051c0:	bf08      	it	eq
  4051c2:	1c5d      	addeq	r5, r3, #1
  4051c4:	9004      	str	r0, [sp, #16]
  4051c6:	9103      	str	r1, [sp, #12]
  4051c8:	a81f      	add	r0, sp, #124	; 0x7c
  4051ca:	2102      	movs	r1, #2
  4051cc:	463b      	mov	r3, r7
  4051ce:	9002      	str	r0, [sp, #8]
  4051d0:	9501      	str	r5, [sp, #4]
  4051d2:	9100      	str	r1, [sp, #0]
  4051d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051d6:	f001 faa3 	bl	406720 <_dtoa_r>
  4051da:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4051dc:	2b67      	cmp	r3, #103	; 0x67
  4051de:	4606      	mov	r6, r0
  4051e0:	f040 81e0 	bne.w	4055a4 <_svfprintf_r+0x1288>
  4051e4:	f01b 0f01 	tst.w	fp, #1
  4051e8:	f000 8246 	beq.w	405678 <_svfprintf_r+0x135c>
  4051ec:	1974      	adds	r4, r6, r5
  4051ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4051f0:	9808      	ldr	r0, [sp, #32]
  4051f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4051f4:	4639      	mov	r1, r7
  4051f6:	f004 fb4f 	bl	409898 <__aeabi_dcmpeq>
  4051fa:	2800      	cmp	r0, #0
  4051fc:	f040 8165 	bne.w	4054ca <_svfprintf_r+0x11ae>
  405200:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405202:	42a3      	cmp	r3, r4
  405204:	d206      	bcs.n	405214 <_svfprintf_r+0xef8>
  405206:	2130      	movs	r1, #48	; 0x30
  405208:	1c5a      	adds	r2, r3, #1
  40520a:	9223      	str	r2, [sp, #140]	; 0x8c
  40520c:	7019      	strb	r1, [r3, #0]
  40520e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405210:	429c      	cmp	r4, r3
  405212:	d8f9      	bhi.n	405208 <_svfprintf_r+0xeec>
  405214:	1b9b      	subs	r3, r3, r6
  405216:	9313      	str	r3, [sp, #76]	; 0x4c
  405218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40521a:	2b47      	cmp	r3, #71	; 0x47
  40521c:	f000 80e9 	beq.w	4053f2 <_svfprintf_r+0x10d6>
  405220:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405222:	2b65      	cmp	r3, #101	; 0x65
  405224:	f340 81cd 	ble.w	4055c2 <_svfprintf_r+0x12a6>
  405228:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40522a:	2b66      	cmp	r3, #102	; 0x66
  40522c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40522e:	9312      	str	r3, [sp, #72]	; 0x48
  405230:	f000 819e 	beq.w	405570 <_svfprintf_r+0x1254>
  405234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405236:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405238:	4619      	mov	r1, r3
  40523a:	4291      	cmp	r1, r2
  40523c:	f300 818a 	bgt.w	405554 <_svfprintf_r+0x1238>
  405240:	f01b 0f01 	tst.w	fp, #1
  405244:	f040 8213 	bne.w	40566e <_svfprintf_r+0x1352>
  405248:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40524c:	9308      	str	r3, [sp, #32]
  40524e:	2367      	movs	r3, #103	; 0x67
  405250:	920e      	str	r2, [sp, #56]	; 0x38
  405252:	9311      	str	r3, [sp, #68]	; 0x44
  405254:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405256:	2b00      	cmp	r3, #0
  405258:	f040 80c4 	bne.w	4053e4 <_svfprintf_r+0x10c8>
  40525c:	930a      	str	r3, [sp, #40]	; 0x28
  40525e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405262:	f7ff b973 	b.w	40454c <_svfprintf_r+0x230>
  405266:	4635      	mov	r5, r6
  405268:	460c      	mov	r4, r1
  40526a:	4646      	mov	r6, r8
  40526c:	4690      	mov	r8, r2
  40526e:	3301      	adds	r3, #1
  405270:	443c      	add	r4, r7
  405272:	2b07      	cmp	r3, #7
  405274:	9427      	str	r4, [sp, #156]	; 0x9c
  405276:	9326      	str	r3, [sp, #152]	; 0x98
  405278:	e888 00a0 	stmia.w	r8, {r5, r7}
  40527c:	f73f aed1 	bgt.w	405022 <_svfprintf_r+0xd06>
  405280:	f108 0808 	add.w	r8, r8, #8
  405284:	e6d7      	b.n	405036 <_svfprintf_r+0xd1a>
  405286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405288:	6813      	ldr	r3, [r2, #0]
  40528a:	3204      	adds	r2, #4
  40528c:	920f      	str	r2, [sp, #60]	; 0x3c
  40528e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405290:	601a      	str	r2, [r3, #0]
  405292:	f7ff b86a 	b.w	40436a <_svfprintf_r+0x4e>
  405296:	aa25      	add	r2, sp, #148	; 0x94
  405298:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40529a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40529c:	f003 fc60 	bl	408b60 <__ssprint_r>
  4052a0:	2800      	cmp	r0, #0
  4052a2:	f47f a90d 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  4052a6:	46c8      	mov	r8, r9
  4052a8:	e48d      	b.n	404bc6 <_svfprintf_r+0x8aa>
  4052aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052ac:	4a27      	ldr	r2, [pc, #156]	; (40534c <_svfprintf_r+0x1030>)
  4052ae:	f8c8 2000 	str.w	r2, [r8]
  4052b2:	3301      	adds	r3, #1
  4052b4:	3401      	adds	r4, #1
  4052b6:	2201      	movs	r2, #1
  4052b8:	2b07      	cmp	r3, #7
  4052ba:	9427      	str	r4, [sp, #156]	; 0x9c
  4052bc:	9326      	str	r3, [sp, #152]	; 0x98
  4052be:	f8c8 2004 	str.w	r2, [r8, #4]
  4052c2:	dc72      	bgt.n	4053aa <_svfprintf_r+0x108e>
  4052c4:	f108 0808 	add.w	r8, r8, #8
  4052c8:	b929      	cbnz	r1, 4052d6 <_svfprintf_r+0xfba>
  4052ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4052cc:	b91b      	cbnz	r3, 4052d6 <_svfprintf_r+0xfba>
  4052ce:	9b07      	ldr	r3, [sp, #28]
  4052d0:	07d8      	lsls	r0, r3, #31
  4052d2:	f57f aa03 	bpl.w	4046dc <_svfprintf_r+0x3c0>
  4052d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4052d8:	9819      	ldr	r0, [sp, #100]	; 0x64
  4052da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  4052dc:	f8c8 2000 	str.w	r2, [r8]
  4052e0:	3301      	adds	r3, #1
  4052e2:	4602      	mov	r2, r0
  4052e4:	4422      	add	r2, r4
  4052e6:	2b07      	cmp	r3, #7
  4052e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4052ea:	f8c8 0004 	str.w	r0, [r8, #4]
  4052ee:	9326      	str	r3, [sp, #152]	; 0x98
  4052f0:	f300 818d 	bgt.w	40560e <_svfprintf_r+0x12f2>
  4052f4:	f108 0808 	add.w	r8, r8, #8
  4052f8:	2900      	cmp	r1, #0
  4052fa:	f2c0 8165 	blt.w	4055c8 <_svfprintf_r+0x12ac>
  4052fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
  405300:	f8c8 6000 	str.w	r6, [r8]
  405304:	3301      	adds	r3, #1
  405306:	188c      	adds	r4, r1, r2
  405308:	2b07      	cmp	r3, #7
  40530a:	9427      	str	r4, [sp, #156]	; 0x9c
  40530c:	9326      	str	r3, [sp, #152]	; 0x98
  40530e:	f8c8 1004 	str.w	r1, [r8, #4]
  405312:	f77f a9e1 	ble.w	4046d8 <_svfprintf_r+0x3bc>
  405316:	e52c      	b.n	404d72 <_svfprintf_r+0xa56>
  405318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40531a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40531c:	6813      	ldr	r3, [r2, #0]
  40531e:	17cd      	asrs	r5, r1, #31
  405320:	4608      	mov	r0, r1
  405322:	3204      	adds	r2, #4
  405324:	4629      	mov	r1, r5
  405326:	920f      	str	r2, [sp, #60]	; 0x3c
  405328:	e9c3 0100 	strd	r0, r1, [r3]
  40532c:	f7ff b81d 	b.w	40436a <_svfprintf_r+0x4e>
  405330:	aa25      	add	r2, sp, #148	; 0x94
  405332:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405334:	980c      	ldr	r0, [sp, #48]	; 0x30
  405336:	f003 fc13 	bl	408b60 <__ssprint_r>
  40533a:	2800      	cmp	r0, #0
  40533c:	f47f a8c0 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  405340:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405342:	46c8      	mov	r8, r9
  405344:	e458      	b.n	404bf8 <_svfprintf_r+0x8dc>
  405346:	bf00      	nop
  405348:	0040a0d8 	.word	0x0040a0d8
  40534c:	0040a0c4 	.word	0x0040a0c4
  405350:	2140      	movs	r1, #64	; 0x40
  405352:	980c      	ldr	r0, [sp, #48]	; 0x30
  405354:	f7fe fabe 	bl	4038d4 <_malloc_r>
  405358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40535a:	6010      	str	r0, [r2, #0]
  40535c:	6110      	str	r0, [r2, #16]
  40535e:	2800      	cmp	r0, #0
  405360:	f000 81f2 	beq.w	405748 <_svfprintf_r+0x142c>
  405364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405366:	2340      	movs	r3, #64	; 0x40
  405368:	6153      	str	r3, [r2, #20]
  40536a:	f7fe bfee 	b.w	40434a <_svfprintf_r+0x2e>
  40536e:	a823      	add	r0, sp, #140	; 0x8c
  405370:	a920      	add	r1, sp, #128	; 0x80
  405372:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405374:	9004      	str	r0, [sp, #16]
  405376:	9103      	str	r1, [sp, #12]
  405378:	a81f      	add	r0, sp, #124	; 0x7c
  40537a:	2103      	movs	r1, #3
  40537c:	9002      	str	r0, [sp, #8]
  40537e:	9a08      	ldr	r2, [sp, #32]
  405380:	9401      	str	r4, [sp, #4]
  405382:	463b      	mov	r3, r7
  405384:	9100      	str	r1, [sp, #0]
  405386:	980c      	ldr	r0, [sp, #48]	; 0x30
  405388:	f001 f9ca 	bl	406720 <_dtoa_r>
  40538c:	4625      	mov	r5, r4
  40538e:	4606      	mov	r6, r0
  405390:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405392:	2b46      	cmp	r3, #70	; 0x46
  405394:	eb06 0405 	add.w	r4, r6, r5
  405398:	f47f af29 	bne.w	4051ee <_svfprintf_r+0xed2>
  40539c:	7833      	ldrb	r3, [r6, #0]
  40539e:	2b30      	cmp	r3, #48	; 0x30
  4053a0:	f000 8178 	beq.w	405694 <_svfprintf_r+0x1378>
  4053a4:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4053a6:	442c      	add	r4, r5
  4053a8:	e721      	b.n	4051ee <_svfprintf_r+0xed2>
  4053aa:	aa25      	add	r2, sp, #148	; 0x94
  4053ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053ae:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053b0:	f003 fbd6 	bl	408b60 <__ssprint_r>
  4053b4:	2800      	cmp	r0, #0
  4053b6:	f47f a883 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  4053ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4053bc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053be:	46c8      	mov	r8, r9
  4053c0:	e782      	b.n	4052c8 <_svfprintf_r+0xfac>
  4053c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053c4:	2b00      	cmp	r3, #0
  4053c6:	bf08      	it	eq
  4053c8:	2301      	moveq	r3, #1
  4053ca:	930a      	str	r3, [sp, #40]	; 0x28
  4053cc:	e6db      	b.n	405186 <_svfprintf_r+0xe6a>
  4053ce:	4630      	mov	r0, r6
  4053d0:	940a      	str	r4, [sp, #40]	; 0x28
  4053d2:	f7fe ff35 	bl	404240 <strlen>
  4053d6:	950f      	str	r5, [sp, #60]	; 0x3c
  4053d8:	900e      	str	r0, [sp, #56]	; 0x38
  4053da:	f8cd b01c 	str.w	fp, [sp, #28]
  4053de:	4603      	mov	r3, r0
  4053e0:	f7ff b9f9 	b.w	4047d6 <_svfprintf_r+0x4ba>
  4053e4:	272d      	movs	r7, #45	; 0x2d
  4053e6:	2300      	movs	r3, #0
  4053e8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4053ec:	930a      	str	r3, [sp, #40]	; 0x28
  4053ee:	f7ff b8ae 	b.w	40454e <_svfprintf_r+0x232>
  4053f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4053f4:	9312      	str	r3, [sp, #72]	; 0x48
  4053f6:	461a      	mov	r2, r3
  4053f8:	3303      	adds	r3, #3
  4053fa:	db04      	blt.n	405406 <_svfprintf_r+0x10ea>
  4053fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4053fe:	4619      	mov	r1, r3
  405400:	4291      	cmp	r1, r2
  405402:	f6bf af17 	bge.w	405234 <_svfprintf_r+0xf18>
  405406:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405408:	3b02      	subs	r3, #2
  40540a:	9311      	str	r3, [sp, #68]	; 0x44
  40540c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  405410:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  405414:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405416:	3b01      	subs	r3, #1
  405418:	2b00      	cmp	r3, #0
  40541a:	931f      	str	r3, [sp, #124]	; 0x7c
  40541c:	bfbd      	ittte	lt
  40541e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  405420:	f1c3 0301 	rsblt	r3, r3, #1
  405424:	222d      	movlt	r2, #45	; 0x2d
  405426:	222b      	movge	r2, #43	; 0x2b
  405428:	2b09      	cmp	r3, #9
  40542a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40542e:	f340 8116 	ble.w	40565e <_svfprintf_r+0x1342>
  405432:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  405436:	4620      	mov	r0, r4
  405438:	4dab      	ldr	r5, [pc, #684]	; (4056e8 <_svfprintf_r+0x13cc>)
  40543a:	e000      	b.n	40543e <_svfprintf_r+0x1122>
  40543c:	4610      	mov	r0, r2
  40543e:	fb85 1203 	smull	r1, r2, r5, r3
  405442:	17d9      	asrs	r1, r3, #31
  405444:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405448:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40544c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405450:	3230      	adds	r2, #48	; 0x30
  405452:	2909      	cmp	r1, #9
  405454:	f800 2c01 	strb.w	r2, [r0, #-1]
  405458:	460b      	mov	r3, r1
  40545a:	f100 32ff 	add.w	r2, r0, #4294967295
  40545e:	dced      	bgt.n	40543c <_svfprintf_r+0x1120>
  405460:	3330      	adds	r3, #48	; 0x30
  405462:	3802      	subs	r0, #2
  405464:	b2d9      	uxtb	r1, r3
  405466:	4284      	cmp	r4, r0
  405468:	f802 1c01 	strb.w	r1, [r2, #-1]
  40546c:	f240 8165 	bls.w	40573a <_svfprintf_r+0x141e>
  405470:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405474:	4613      	mov	r3, r2
  405476:	e001      	b.n	40547c <_svfprintf_r+0x1160>
  405478:	f813 1b01 	ldrb.w	r1, [r3], #1
  40547c:	f800 1b01 	strb.w	r1, [r0], #1
  405480:	42a3      	cmp	r3, r4
  405482:	d1f9      	bne.n	405478 <_svfprintf_r+0x115c>
  405484:	3301      	adds	r3, #1
  405486:	1a9b      	subs	r3, r3, r2
  405488:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40548c:	4413      	add	r3, r2
  40548e:	aa21      	add	r2, sp, #132	; 0x84
  405490:	1a9b      	subs	r3, r3, r2
  405492:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405494:	931b      	str	r3, [sp, #108]	; 0x6c
  405496:	2a01      	cmp	r2, #1
  405498:	4413      	add	r3, r2
  40549a:	930e      	str	r3, [sp, #56]	; 0x38
  40549c:	f340 8119 	ble.w	4056d2 <_svfprintf_r+0x13b6>
  4054a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4054a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4054a4:	4413      	add	r3, r2
  4054a6:	930e      	str	r3, [sp, #56]	; 0x38
  4054a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4054ac:	9308      	str	r3, [sp, #32]
  4054ae:	2300      	movs	r3, #0
  4054b0:	9312      	str	r3, [sp, #72]	; 0x48
  4054b2:	e6cf      	b.n	405254 <_svfprintf_r+0xf38>
  4054b4:	aa25      	add	r2, sp, #148	; 0x94
  4054b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054ba:	f003 fb51 	bl	408b60 <__ssprint_r>
  4054be:	2800      	cmp	r0, #0
  4054c0:	f47e affe 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  4054c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054c6:	46c8      	mov	r8, r9
  4054c8:	e4d7      	b.n	404e7a <_svfprintf_r+0xb5e>
  4054ca:	4623      	mov	r3, r4
  4054cc:	e6a2      	b.n	405214 <_svfprintf_r+0xef8>
  4054ce:	aa25      	add	r2, sp, #148	; 0x94
  4054d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054d4:	f003 fb44 	bl	408b60 <__ssprint_r>
  4054d8:	2800      	cmp	r0, #0
  4054da:	f47e aff1 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  4054de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4054e0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054e2:	46c8      	mov	r8, r9
  4054e4:	e5ae      	b.n	405044 <_svfprintf_r+0xd28>
  4054e6:	aa25      	add	r2, sp, #148	; 0x94
  4054e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054ea:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054ec:	f003 fb38 	bl	408b60 <__ssprint_r>
  4054f0:	2800      	cmp	r0, #0
  4054f2:	f47e afe5 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  4054f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4054f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4054fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054fc:	1a9a      	subs	r2, r3, r2
  4054fe:	46c8      	mov	r8, r9
  405500:	e5b8      	b.n	405074 <_svfprintf_r+0xd58>
  405502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405504:	9612      	str	r6, [sp, #72]	; 0x48
  405506:	2b06      	cmp	r3, #6
  405508:	bf28      	it	cs
  40550a:	2306      	movcs	r3, #6
  40550c:	960a      	str	r6, [sp, #40]	; 0x28
  40550e:	4637      	mov	r7, r6
  405510:	9308      	str	r3, [sp, #32]
  405512:	950f      	str	r5, [sp, #60]	; 0x3c
  405514:	f8cd b01c 	str.w	fp, [sp, #28]
  405518:	930e      	str	r3, [sp, #56]	; 0x38
  40551a:	4e74      	ldr	r6, [pc, #464]	; (4056ec <_svfprintf_r+0x13d0>)
  40551c:	f7ff b816 	b.w	40454c <_svfprintf_r+0x230>
  405520:	a823      	add	r0, sp, #140	; 0x8c
  405522:	a920      	add	r1, sp, #128	; 0x80
  405524:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  405526:	9004      	str	r0, [sp, #16]
  405528:	9103      	str	r1, [sp, #12]
  40552a:	a81f      	add	r0, sp, #124	; 0x7c
  40552c:	2103      	movs	r1, #3
  40552e:	9002      	str	r0, [sp, #8]
  405530:	9a08      	ldr	r2, [sp, #32]
  405532:	9501      	str	r5, [sp, #4]
  405534:	463b      	mov	r3, r7
  405536:	9100      	str	r1, [sp, #0]
  405538:	980c      	ldr	r0, [sp, #48]	; 0x30
  40553a:	f001 f8f1 	bl	406720 <_dtoa_r>
  40553e:	4606      	mov	r6, r0
  405540:	1944      	adds	r4, r0, r5
  405542:	e72b      	b.n	40539c <_svfprintf_r+0x1080>
  405544:	2306      	movs	r3, #6
  405546:	930a      	str	r3, [sp, #40]	; 0x28
  405548:	e61d      	b.n	405186 <_svfprintf_r+0xe6a>
  40554a:	272d      	movs	r7, #45	; 0x2d
  40554c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405550:	f7ff bacd 	b.w	404aee <_svfprintf_r+0x7d2>
  405554:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405556:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405558:	4413      	add	r3, r2
  40555a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40555c:	930e      	str	r3, [sp, #56]	; 0x38
  40555e:	2a00      	cmp	r2, #0
  405560:	f340 80b0 	ble.w	4056c4 <_svfprintf_r+0x13a8>
  405564:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405568:	9308      	str	r3, [sp, #32]
  40556a:	2367      	movs	r3, #103	; 0x67
  40556c:	9311      	str	r3, [sp, #68]	; 0x44
  40556e:	e671      	b.n	405254 <_svfprintf_r+0xf38>
  405570:	2b00      	cmp	r3, #0
  405572:	f340 80c3 	ble.w	4056fc <_svfprintf_r+0x13e0>
  405576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405578:	2a00      	cmp	r2, #0
  40557a:	f040 8099 	bne.w	4056b0 <_svfprintf_r+0x1394>
  40557e:	f01b 0f01 	tst.w	fp, #1
  405582:	f040 8095 	bne.w	4056b0 <_svfprintf_r+0x1394>
  405586:	9308      	str	r3, [sp, #32]
  405588:	930e      	str	r3, [sp, #56]	; 0x38
  40558a:	e663      	b.n	405254 <_svfprintf_r+0xf38>
  40558c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40558e:	9308      	str	r3, [sp, #32]
  405590:	930e      	str	r3, [sp, #56]	; 0x38
  405592:	900a      	str	r0, [sp, #40]	; 0x28
  405594:	950f      	str	r5, [sp, #60]	; 0x3c
  405596:	f8cd b01c 	str.w	fp, [sp, #28]
  40559a:	9012      	str	r0, [sp, #72]	; 0x48
  40559c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4055a0:	f7fe bfd4 	b.w	40454c <_svfprintf_r+0x230>
  4055a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055a6:	2b47      	cmp	r3, #71	; 0x47
  4055a8:	f47f ae20 	bne.w	4051ec <_svfprintf_r+0xed0>
  4055ac:	f01b 0f01 	tst.w	fp, #1
  4055b0:	f47f aeee 	bne.w	405390 <_svfprintf_r+0x1074>
  4055b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4055b6:	1b9b      	subs	r3, r3, r6
  4055b8:	9313      	str	r3, [sp, #76]	; 0x4c
  4055ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4055bc:	2b47      	cmp	r3, #71	; 0x47
  4055be:	f43f af18 	beq.w	4053f2 <_svfprintf_r+0x10d6>
  4055c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4055c4:	9312      	str	r3, [sp, #72]	; 0x48
  4055c6:	e721      	b.n	40540c <_svfprintf_r+0x10f0>
  4055c8:	424f      	negs	r7, r1
  4055ca:	3110      	adds	r1, #16
  4055cc:	4d48      	ldr	r5, [pc, #288]	; (4056f0 <_svfprintf_r+0x13d4>)
  4055ce:	da2f      	bge.n	405630 <_svfprintf_r+0x1314>
  4055d0:	2410      	movs	r4, #16
  4055d2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4055d6:	e004      	b.n	4055e2 <_svfprintf_r+0x12c6>
  4055d8:	f108 0808 	add.w	r8, r8, #8
  4055dc:	3f10      	subs	r7, #16
  4055de:	2f10      	cmp	r7, #16
  4055e0:	dd26      	ble.n	405630 <_svfprintf_r+0x1314>
  4055e2:	3301      	adds	r3, #1
  4055e4:	3210      	adds	r2, #16
  4055e6:	2b07      	cmp	r3, #7
  4055e8:	9227      	str	r2, [sp, #156]	; 0x9c
  4055ea:	9326      	str	r3, [sp, #152]	; 0x98
  4055ec:	f8c8 5000 	str.w	r5, [r8]
  4055f0:	f8c8 4004 	str.w	r4, [r8, #4]
  4055f4:	ddf0      	ble.n	4055d8 <_svfprintf_r+0x12bc>
  4055f6:	aa25      	add	r2, sp, #148	; 0x94
  4055f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4055fa:	4658      	mov	r0, fp
  4055fc:	f003 fab0 	bl	408b60 <__ssprint_r>
  405600:	2800      	cmp	r0, #0
  405602:	f47e af5d 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  405606:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405608:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40560a:	46c8      	mov	r8, r9
  40560c:	e7e6      	b.n	4055dc <_svfprintf_r+0x12c0>
  40560e:	aa25      	add	r2, sp, #148	; 0x94
  405610:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405612:	980c      	ldr	r0, [sp, #48]	; 0x30
  405614:	f003 faa4 	bl	408b60 <__ssprint_r>
  405618:	2800      	cmp	r0, #0
  40561a:	f47e af51 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  40561e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405620:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405622:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405624:	46c8      	mov	r8, r9
  405626:	e667      	b.n	4052f8 <_svfprintf_r+0xfdc>
  405628:	2000      	movs	r0, #0
  40562a:	900a      	str	r0, [sp, #40]	; 0x28
  40562c:	f7fe bed0 	b.w	4043d0 <_svfprintf_r+0xb4>
  405630:	3301      	adds	r3, #1
  405632:	443a      	add	r2, r7
  405634:	2b07      	cmp	r3, #7
  405636:	e888 00a0 	stmia.w	r8, {r5, r7}
  40563a:	9227      	str	r2, [sp, #156]	; 0x9c
  40563c:	9326      	str	r3, [sp, #152]	; 0x98
  40563e:	f108 0808 	add.w	r8, r8, #8
  405642:	f77f ae5c 	ble.w	4052fe <_svfprintf_r+0xfe2>
  405646:	aa25      	add	r2, sp, #148	; 0x94
  405648:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40564a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40564c:	f003 fa88 	bl	408b60 <__ssprint_r>
  405650:	2800      	cmp	r0, #0
  405652:	f47e af35 	bne.w	4044c0 <_svfprintf_r+0x1a4>
  405656:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405658:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40565a:	46c8      	mov	r8, r9
  40565c:	e64f      	b.n	4052fe <_svfprintf_r+0xfe2>
  40565e:	3330      	adds	r3, #48	; 0x30
  405660:	2230      	movs	r2, #48	; 0x30
  405662:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405666:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  40566a:	ab22      	add	r3, sp, #136	; 0x88
  40566c:	e70f      	b.n	40548e <_svfprintf_r+0x1172>
  40566e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405670:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405672:	4413      	add	r3, r2
  405674:	930e      	str	r3, [sp, #56]	; 0x38
  405676:	e775      	b.n	405564 <_svfprintf_r+0x1248>
  405678:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40567a:	e5cb      	b.n	405214 <_svfprintf_r+0xef8>
  40567c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40567e:	4e1d      	ldr	r6, [pc, #116]	; (4056f4 <_svfprintf_r+0x13d8>)
  405680:	2b00      	cmp	r3, #0
  405682:	bfb6      	itet	lt
  405684:	272d      	movlt	r7, #45	; 0x2d
  405686:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  40568a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  40568e:	4b1a      	ldr	r3, [pc, #104]	; (4056f8 <_svfprintf_r+0x13dc>)
  405690:	f7ff ba2f 	b.w	404af2 <_svfprintf_r+0x7d6>
  405694:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405696:	9808      	ldr	r0, [sp, #32]
  405698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40569a:	4639      	mov	r1, r7
  40569c:	f004 f8fc 	bl	409898 <__aeabi_dcmpeq>
  4056a0:	2800      	cmp	r0, #0
  4056a2:	f47f ae7f 	bne.w	4053a4 <_svfprintf_r+0x1088>
  4056a6:	f1c5 0501 	rsb	r5, r5, #1
  4056aa:	951f      	str	r5, [sp, #124]	; 0x7c
  4056ac:	442c      	add	r4, r5
  4056ae:	e59e      	b.n	4051ee <_svfprintf_r+0xed2>
  4056b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4056b2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4056b4:	4413      	add	r3, r2
  4056b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4056b8:	441a      	add	r2, r3
  4056ba:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4056be:	920e      	str	r2, [sp, #56]	; 0x38
  4056c0:	9308      	str	r3, [sp, #32]
  4056c2:	e5c7      	b.n	405254 <_svfprintf_r+0xf38>
  4056c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4056c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4056c8:	f1c3 0301 	rsb	r3, r3, #1
  4056cc:	441a      	add	r2, r3
  4056ce:	4613      	mov	r3, r2
  4056d0:	e7d0      	b.n	405674 <_svfprintf_r+0x1358>
  4056d2:	f01b 0301 	ands.w	r3, fp, #1
  4056d6:	9312      	str	r3, [sp, #72]	; 0x48
  4056d8:	f47f aee2 	bne.w	4054a0 <_svfprintf_r+0x1184>
  4056dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4056de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4056e2:	9308      	str	r3, [sp, #32]
  4056e4:	e5b6      	b.n	405254 <_svfprintf_r+0xf38>
  4056e6:	bf00      	nop
  4056e8:	66666667 	.word	0x66666667
  4056ec:	0040a0bc 	.word	0x0040a0bc
  4056f0:	0040a0d8 	.word	0x0040a0d8
  4056f4:	0040a090 	.word	0x0040a090
  4056f8:	0040a08c 	.word	0x0040a08c
  4056fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4056fe:	b913      	cbnz	r3, 405706 <_svfprintf_r+0x13ea>
  405700:	f01b 0f01 	tst.w	fp, #1
  405704:	d002      	beq.n	40570c <_svfprintf_r+0x13f0>
  405706:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405708:	3301      	adds	r3, #1
  40570a:	e7d4      	b.n	4056b6 <_svfprintf_r+0x139a>
  40570c:	2301      	movs	r3, #1
  40570e:	e73a      	b.n	405586 <_svfprintf_r+0x126a>
  405710:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405712:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405716:	6828      	ldr	r0, [r5, #0]
  405718:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  40571c:	900a      	str	r0, [sp, #40]	; 0x28
  40571e:	4628      	mov	r0, r5
  405720:	3004      	adds	r0, #4
  405722:	46a2      	mov	sl, r4
  405724:	900f      	str	r0, [sp, #60]	; 0x3c
  405726:	f7fe be51 	b.w	4043cc <_svfprintf_r+0xb0>
  40572a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40572e:	f7ff b867 	b.w	404800 <_svfprintf_r+0x4e4>
  405732:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405736:	f7ff ba15 	b.w	404b64 <_svfprintf_r+0x848>
  40573a:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  40573e:	e6a6      	b.n	40548e <_svfprintf_r+0x1172>
  405740:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405744:	f7ff b8eb 	b.w	40491e <_svfprintf_r+0x602>
  405748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40574a:	230c      	movs	r3, #12
  40574c:	6013      	str	r3, [r2, #0]
  40574e:	f04f 33ff 	mov.w	r3, #4294967295
  405752:	9309      	str	r3, [sp, #36]	; 0x24
  405754:	f7fe bebd 	b.w	4044d2 <_svfprintf_r+0x1b6>
  405758:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40575c:	f7ff b99a 	b.w	404a94 <_svfprintf_r+0x778>
  405760:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405764:	f7ff b976 	b.w	404a54 <_svfprintf_r+0x738>
  405768:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40576c:	f7ff b959 	b.w	404a22 <_svfprintf_r+0x706>
  405770:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405774:	f7ff b912 	b.w	40499c <_svfprintf_r+0x680>

00405778 <__sprint_r.part.0>:
  405778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40577c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40577e:	049c      	lsls	r4, r3, #18
  405780:	4693      	mov	fp, r2
  405782:	d52f      	bpl.n	4057e4 <__sprint_r.part.0+0x6c>
  405784:	6893      	ldr	r3, [r2, #8]
  405786:	6812      	ldr	r2, [r2, #0]
  405788:	b353      	cbz	r3, 4057e0 <__sprint_r.part.0+0x68>
  40578a:	460e      	mov	r6, r1
  40578c:	4607      	mov	r7, r0
  40578e:	f102 0908 	add.w	r9, r2, #8
  405792:	e919 0420 	ldmdb	r9, {r5, sl}
  405796:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40579a:	d017      	beq.n	4057cc <__sprint_r.part.0+0x54>
  40579c:	3d04      	subs	r5, #4
  40579e:	2400      	movs	r4, #0
  4057a0:	e001      	b.n	4057a6 <__sprint_r.part.0+0x2e>
  4057a2:	45a0      	cmp	r8, r4
  4057a4:	d010      	beq.n	4057c8 <__sprint_r.part.0+0x50>
  4057a6:	4632      	mov	r2, r6
  4057a8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  4057ac:	4638      	mov	r0, r7
  4057ae:	f002 f87b 	bl	4078a8 <_fputwc_r>
  4057b2:	1c43      	adds	r3, r0, #1
  4057b4:	f104 0401 	add.w	r4, r4, #1
  4057b8:	d1f3      	bne.n	4057a2 <__sprint_r.part.0+0x2a>
  4057ba:	2300      	movs	r3, #0
  4057bc:	f8cb 3008 	str.w	r3, [fp, #8]
  4057c0:	f8cb 3004 	str.w	r3, [fp, #4]
  4057c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057c8:	f8db 3008 	ldr.w	r3, [fp, #8]
  4057cc:	f02a 0a03 	bic.w	sl, sl, #3
  4057d0:	eba3 030a 	sub.w	r3, r3, sl
  4057d4:	f8cb 3008 	str.w	r3, [fp, #8]
  4057d8:	f109 0908 	add.w	r9, r9, #8
  4057dc:	2b00      	cmp	r3, #0
  4057de:	d1d8      	bne.n	405792 <__sprint_r.part.0+0x1a>
  4057e0:	2000      	movs	r0, #0
  4057e2:	e7ea      	b.n	4057ba <__sprint_r.part.0+0x42>
  4057e4:	f002 f9ca 	bl	407b7c <__sfvwrite_r>
  4057e8:	2300      	movs	r3, #0
  4057ea:	f8cb 3008 	str.w	r3, [fp, #8]
  4057ee:	f8cb 3004 	str.w	r3, [fp, #4]
  4057f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057f6:	bf00      	nop

004057f8 <_vfiprintf_r>:
  4057f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057fc:	b0ad      	sub	sp, #180	; 0xb4
  4057fe:	461d      	mov	r5, r3
  405800:	468b      	mov	fp, r1
  405802:	4690      	mov	r8, r2
  405804:	9307      	str	r3, [sp, #28]
  405806:	9006      	str	r0, [sp, #24]
  405808:	b118      	cbz	r0, 405812 <_vfiprintf_r+0x1a>
  40580a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40580c:	2b00      	cmp	r3, #0
  40580e:	f000 80f3 	beq.w	4059f8 <_vfiprintf_r+0x200>
  405812:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405816:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40581a:	07df      	lsls	r7, r3, #31
  40581c:	b281      	uxth	r1, r0
  40581e:	d402      	bmi.n	405826 <_vfiprintf_r+0x2e>
  405820:	058e      	lsls	r6, r1, #22
  405822:	f140 80fc 	bpl.w	405a1e <_vfiprintf_r+0x226>
  405826:	048c      	lsls	r4, r1, #18
  405828:	d40a      	bmi.n	405840 <_vfiprintf_r+0x48>
  40582a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40582e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405836:	f8ab 100c 	strh.w	r1, [fp, #12]
  40583a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40583e:	b289      	uxth	r1, r1
  405840:	0708      	lsls	r0, r1, #28
  405842:	f140 80b3 	bpl.w	4059ac <_vfiprintf_r+0x1b4>
  405846:	f8db 3010 	ldr.w	r3, [fp, #16]
  40584a:	2b00      	cmp	r3, #0
  40584c:	f000 80ae 	beq.w	4059ac <_vfiprintf_r+0x1b4>
  405850:	f001 031a 	and.w	r3, r1, #26
  405854:	2b0a      	cmp	r3, #10
  405856:	f000 80b5 	beq.w	4059c4 <_vfiprintf_r+0x1cc>
  40585a:	2300      	movs	r3, #0
  40585c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405860:	930b      	str	r3, [sp, #44]	; 0x2c
  405862:	9311      	str	r3, [sp, #68]	; 0x44
  405864:	9310      	str	r3, [sp, #64]	; 0x40
  405866:	9303      	str	r3, [sp, #12]
  405868:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40586c:	46ca      	mov	sl, r9
  40586e:	f8cd b010 	str.w	fp, [sp, #16]
  405872:	f898 3000 	ldrb.w	r3, [r8]
  405876:	4644      	mov	r4, r8
  405878:	b1fb      	cbz	r3, 4058ba <_vfiprintf_r+0xc2>
  40587a:	2b25      	cmp	r3, #37	; 0x25
  40587c:	d102      	bne.n	405884 <_vfiprintf_r+0x8c>
  40587e:	e01c      	b.n	4058ba <_vfiprintf_r+0xc2>
  405880:	2b25      	cmp	r3, #37	; 0x25
  405882:	d003      	beq.n	40588c <_vfiprintf_r+0x94>
  405884:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405888:	2b00      	cmp	r3, #0
  40588a:	d1f9      	bne.n	405880 <_vfiprintf_r+0x88>
  40588c:	eba4 0508 	sub.w	r5, r4, r8
  405890:	b19d      	cbz	r5, 4058ba <_vfiprintf_r+0xc2>
  405892:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405894:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405896:	f8ca 8000 	str.w	r8, [sl]
  40589a:	3301      	adds	r3, #1
  40589c:	442a      	add	r2, r5
  40589e:	2b07      	cmp	r3, #7
  4058a0:	f8ca 5004 	str.w	r5, [sl, #4]
  4058a4:	9211      	str	r2, [sp, #68]	; 0x44
  4058a6:	9310      	str	r3, [sp, #64]	; 0x40
  4058a8:	dd7a      	ble.n	4059a0 <_vfiprintf_r+0x1a8>
  4058aa:	2a00      	cmp	r2, #0
  4058ac:	f040 84b0 	bne.w	406210 <_vfiprintf_r+0xa18>
  4058b0:	9b03      	ldr	r3, [sp, #12]
  4058b2:	9210      	str	r2, [sp, #64]	; 0x40
  4058b4:	442b      	add	r3, r5
  4058b6:	46ca      	mov	sl, r9
  4058b8:	9303      	str	r3, [sp, #12]
  4058ba:	7823      	ldrb	r3, [r4, #0]
  4058bc:	2b00      	cmp	r3, #0
  4058be:	f000 83e0 	beq.w	406082 <_vfiprintf_r+0x88a>
  4058c2:	2000      	movs	r0, #0
  4058c4:	f04f 0300 	mov.w	r3, #0
  4058c8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4058cc:	f104 0801 	add.w	r8, r4, #1
  4058d0:	7862      	ldrb	r2, [r4, #1]
  4058d2:	4605      	mov	r5, r0
  4058d4:	4606      	mov	r6, r0
  4058d6:	4603      	mov	r3, r0
  4058d8:	f04f 34ff 	mov.w	r4, #4294967295
  4058dc:	f108 0801 	add.w	r8, r8, #1
  4058e0:	f1a2 0120 	sub.w	r1, r2, #32
  4058e4:	2958      	cmp	r1, #88	; 0x58
  4058e6:	f200 82de 	bhi.w	405ea6 <_vfiprintf_r+0x6ae>
  4058ea:	e8df f011 	tbh	[pc, r1, lsl #1]
  4058ee:	0221      	.short	0x0221
  4058f0:	02dc02dc 	.word	0x02dc02dc
  4058f4:	02dc0229 	.word	0x02dc0229
  4058f8:	02dc02dc 	.word	0x02dc02dc
  4058fc:	02dc02dc 	.word	0x02dc02dc
  405900:	028902dc 	.word	0x028902dc
  405904:	02dc0295 	.word	0x02dc0295
  405908:	02bd00a2 	.word	0x02bd00a2
  40590c:	019f02dc 	.word	0x019f02dc
  405910:	01a401a4 	.word	0x01a401a4
  405914:	01a401a4 	.word	0x01a401a4
  405918:	01a401a4 	.word	0x01a401a4
  40591c:	01a401a4 	.word	0x01a401a4
  405920:	02dc01a4 	.word	0x02dc01a4
  405924:	02dc02dc 	.word	0x02dc02dc
  405928:	02dc02dc 	.word	0x02dc02dc
  40592c:	02dc02dc 	.word	0x02dc02dc
  405930:	02dc02dc 	.word	0x02dc02dc
  405934:	01b202dc 	.word	0x01b202dc
  405938:	02dc02dc 	.word	0x02dc02dc
  40593c:	02dc02dc 	.word	0x02dc02dc
  405940:	02dc02dc 	.word	0x02dc02dc
  405944:	02dc02dc 	.word	0x02dc02dc
  405948:	02dc02dc 	.word	0x02dc02dc
  40594c:	02dc0197 	.word	0x02dc0197
  405950:	02dc02dc 	.word	0x02dc02dc
  405954:	02dc02dc 	.word	0x02dc02dc
  405958:	02dc019b 	.word	0x02dc019b
  40595c:	025302dc 	.word	0x025302dc
  405960:	02dc02dc 	.word	0x02dc02dc
  405964:	02dc02dc 	.word	0x02dc02dc
  405968:	02dc02dc 	.word	0x02dc02dc
  40596c:	02dc02dc 	.word	0x02dc02dc
  405970:	02dc02dc 	.word	0x02dc02dc
  405974:	021b025a 	.word	0x021b025a
  405978:	02dc02dc 	.word	0x02dc02dc
  40597c:	026e02dc 	.word	0x026e02dc
  405980:	02dc021b 	.word	0x02dc021b
  405984:	027302dc 	.word	0x027302dc
  405988:	01f502dc 	.word	0x01f502dc
  40598c:	02090182 	.word	0x02090182
  405990:	02dc02d7 	.word	0x02dc02d7
  405994:	02dc029a 	.word	0x02dc029a
  405998:	02dc00a7 	.word	0x02dc00a7
  40599c:	022e02dc 	.word	0x022e02dc
  4059a0:	f10a 0a08 	add.w	sl, sl, #8
  4059a4:	9b03      	ldr	r3, [sp, #12]
  4059a6:	442b      	add	r3, r5
  4059a8:	9303      	str	r3, [sp, #12]
  4059aa:	e786      	b.n	4058ba <_vfiprintf_r+0xc2>
  4059ac:	4659      	mov	r1, fp
  4059ae:	9806      	ldr	r0, [sp, #24]
  4059b0:	f000 fdac 	bl	40650c <__swsetup_r>
  4059b4:	bb18      	cbnz	r0, 4059fe <_vfiprintf_r+0x206>
  4059b6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  4059ba:	f001 031a 	and.w	r3, r1, #26
  4059be:	2b0a      	cmp	r3, #10
  4059c0:	f47f af4b 	bne.w	40585a <_vfiprintf_r+0x62>
  4059c4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  4059c8:	2b00      	cmp	r3, #0
  4059ca:	f6ff af46 	blt.w	40585a <_vfiprintf_r+0x62>
  4059ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4059d2:	07db      	lsls	r3, r3, #31
  4059d4:	d405      	bmi.n	4059e2 <_vfiprintf_r+0x1ea>
  4059d6:	058f      	lsls	r7, r1, #22
  4059d8:	d403      	bmi.n	4059e2 <_vfiprintf_r+0x1ea>
  4059da:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4059de:	f002 fa91 	bl	407f04 <__retarget_lock_release_recursive>
  4059e2:	462b      	mov	r3, r5
  4059e4:	4642      	mov	r2, r8
  4059e6:	4659      	mov	r1, fp
  4059e8:	9806      	ldr	r0, [sp, #24]
  4059ea:	f000 fd4d 	bl	406488 <__sbprintf>
  4059ee:	9003      	str	r0, [sp, #12]
  4059f0:	9803      	ldr	r0, [sp, #12]
  4059f2:	b02d      	add	sp, #180	; 0xb4
  4059f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059f8:	f001 feb4 	bl	407764 <__sinit>
  4059fc:	e709      	b.n	405812 <_vfiprintf_r+0x1a>
  4059fe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405a02:	07d9      	lsls	r1, r3, #31
  405a04:	d404      	bmi.n	405a10 <_vfiprintf_r+0x218>
  405a06:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405a0a:	059a      	lsls	r2, r3, #22
  405a0c:	f140 84aa 	bpl.w	406364 <_vfiprintf_r+0xb6c>
  405a10:	f04f 33ff 	mov.w	r3, #4294967295
  405a14:	9303      	str	r3, [sp, #12]
  405a16:	9803      	ldr	r0, [sp, #12]
  405a18:	b02d      	add	sp, #180	; 0xb4
  405a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405a1e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405a22:	f002 fa6d 	bl	407f00 <__retarget_lock_acquire_recursive>
  405a26:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405a2a:	b281      	uxth	r1, r0
  405a2c:	e6fb      	b.n	405826 <_vfiprintf_r+0x2e>
  405a2e:	4276      	negs	r6, r6
  405a30:	9207      	str	r2, [sp, #28]
  405a32:	f043 0304 	orr.w	r3, r3, #4
  405a36:	f898 2000 	ldrb.w	r2, [r8]
  405a3a:	e74f      	b.n	4058dc <_vfiprintf_r+0xe4>
  405a3c:	9608      	str	r6, [sp, #32]
  405a3e:	069e      	lsls	r6, r3, #26
  405a40:	f100 8450 	bmi.w	4062e4 <_vfiprintf_r+0xaec>
  405a44:	9907      	ldr	r1, [sp, #28]
  405a46:	06dd      	lsls	r5, r3, #27
  405a48:	460a      	mov	r2, r1
  405a4a:	f100 83ef 	bmi.w	40622c <_vfiprintf_r+0xa34>
  405a4e:	0658      	lsls	r0, r3, #25
  405a50:	f140 83ec 	bpl.w	40622c <_vfiprintf_r+0xa34>
  405a54:	880e      	ldrh	r6, [r1, #0]
  405a56:	3104      	adds	r1, #4
  405a58:	2700      	movs	r7, #0
  405a5a:	2201      	movs	r2, #1
  405a5c:	9107      	str	r1, [sp, #28]
  405a5e:	f04f 0100 	mov.w	r1, #0
  405a62:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405a66:	2500      	movs	r5, #0
  405a68:	1c61      	adds	r1, r4, #1
  405a6a:	f000 8116 	beq.w	405c9a <_vfiprintf_r+0x4a2>
  405a6e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405a72:	9102      	str	r1, [sp, #8]
  405a74:	ea56 0107 	orrs.w	r1, r6, r7
  405a78:	f040 8114 	bne.w	405ca4 <_vfiprintf_r+0x4ac>
  405a7c:	2c00      	cmp	r4, #0
  405a7e:	f040 835c 	bne.w	40613a <_vfiprintf_r+0x942>
  405a82:	2a00      	cmp	r2, #0
  405a84:	f040 83b7 	bne.w	4061f6 <_vfiprintf_r+0x9fe>
  405a88:	f013 0301 	ands.w	r3, r3, #1
  405a8c:	9305      	str	r3, [sp, #20]
  405a8e:	f000 8457 	beq.w	406340 <_vfiprintf_r+0xb48>
  405a92:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405a96:	2330      	movs	r3, #48	; 0x30
  405a98:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405a9c:	9b05      	ldr	r3, [sp, #20]
  405a9e:	42a3      	cmp	r3, r4
  405aa0:	bfb8      	it	lt
  405aa2:	4623      	movlt	r3, r4
  405aa4:	9301      	str	r3, [sp, #4]
  405aa6:	b10d      	cbz	r5, 405aac <_vfiprintf_r+0x2b4>
  405aa8:	3301      	adds	r3, #1
  405aaa:	9301      	str	r3, [sp, #4]
  405aac:	9b02      	ldr	r3, [sp, #8]
  405aae:	f013 0302 	ands.w	r3, r3, #2
  405ab2:	9309      	str	r3, [sp, #36]	; 0x24
  405ab4:	d002      	beq.n	405abc <_vfiprintf_r+0x2c4>
  405ab6:	9b01      	ldr	r3, [sp, #4]
  405ab8:	3302      	adds	r3, #2
  405aba:	9301      	str	r3, [sp, #4]
  405abc:	9b02      	ldr	r3, [sp, #8]
  405abe:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405ac2:	930a      	str	r3, [sp, #40]	; 0x28
  405ac4:	f040 8217 	bne.w	405ef6 <_vfiprintf_r+0x6fe>
  405ac8:	9b08      	ldr	r3, [sp, #32]
  405aca:	9a01      	ldr	r2, [sp, #4]
  405acc:	1a9d      	subs	r5, r3, r2
  405ace:	2d00      	cmp	r5, #0
  405ad0:	f340 8211 	ble.w	405ef6 <_vfiprintf_r+0x6fe>
  405ad4:	2d10      	cmp	r5, #16
  405ad6:	f340 8490 	ble.w	4063fa <_vfiprintf_r+0xc02>
  405ada:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405adc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405ade:	4ec4      	ldr	r6, [pc, #784]	; (405df0 <_vfiprintf_r+0x5f8>)
  405ae0:	46d6      	mov	lr, sl
  405ae2:	2710      	movs	r7, #16
  405ae4:	46a2      	mov	sl, r4
  405ae6:	4619      	mov	r1, r3
  405ae8:	9c06      	ldr	r4, [sp, #24]
  405aea:	e007      	b.n	405afc <_vfiprintf_r+0x304>
  405aec:	f101 0c02 	add.w	ip, r1, #2
  405af0:	f10e 0e08 	add.w	lr, lr, #8
  405af4:	4601      	mov	r1, r0
  405af6:	3d10      	subs	r5, #16
  405af8:	2d10      	cmp	r5, #16
  405afa:	dd11      	ble.n	405b20 <_vfiprintf_r+0x328>
  405afc:	1c48      	adds	r0, r1, #1
  405afe:	3210      	adds	r2, #16
  405b00:	2807      	cmp	r0, #7
  405b02:	9211      	str	r2, [sp, #68]	; 0x44
  405b04:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405b08:	9010      	str	r0, [sp, #64]	; 0x40
  405b0a:	ddef      	ble.n	405aec <_vfiprintf_r+0x2f4>
  405b0c:	2a00      	cmp	r2, #0
  405b0e:	f040 81e4 	bne.w	405eda <_vfiprintf_r+0x6e2>
  405b12:	3d10      	subs	r5, #16
  405b14:	2d10      	cmp	r5, #16
  405b16:	4611      	mov	r1, r2
  405b18:	f04f 0c01 	mov.w	ip, #1
  405b1c:	46ce      	mov	lr, r9
  405b1e:	dced      	bgt.n	405afc <_vfiprintf_r+0x304>
  405b20:	4654      	mov	r4, sl
  405b22:	4661      	mov	r1, ip
  405b24:	46f2      	mov	sl, lr
  405b26:	442a      	add	r2, r5
  405b28:	2907      	cmp	r1, #7
  405b2a:	9211      	str	r2, [sp, #68]	; 0x44
  405b2c:	f8ca 6000 	str.w	r6, [sl]
  405b30:	f8ca 5004 	str.w	r5, [sl, #4]
  405b34:	9110      	str	r1, [sp, #64]	; 0x40
  405b36:	f300 82ec 	bgt.w	406112 <_vfiprintf_r+0x91a>
  405b3a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405b3e:	f10a 0a08 	add.w	sl, sl, #8
  405b42:	1c48      	adds	r0, r1, #1
  405b44:	2d00      	cmp	r5, #0
  405b46:	f040 81de 	bne.w	405f06 <_vfiprintf_r+0x70e>
  405b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405b4c:	2b00      	cmp	r3, #0
  405b4e:	f000 81f8 	beq.w	405f42 <_vfiprintf_r+0x74a>
  405b52:	3202      	adds	r2, #2
  405b54:	a90e      	add	r1, sp, #56	; 0x38
  405b56:	2302      	movs	r3, #2
  405b58:	2807      	cmp	r0, #7
  405b5a:	9211      	str	r2, [sp, #68]	; 0x44
  405b5c:	9010      	str	r0, [sp, #64]	; 0x40
  405b5e:	e88a 000a 	stmia.w	sl, {r1, r3}
  405b62:	f340 81ea 	ble.w	405f3a <_vfiprintf_r+0x742>
  405b66:	2a00      	cmp	r2, #0
  405b68:	f040 838c 	bne.w	406284 <_vfiprintf_r+0xa8c>
  405b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405b6e:	2b80      	cmp	r3, #128	; 0x80
  405b70:	f04f 0001 	mov.w	r0, #1
  405b74:	4611      	mov	r1, r2
  405b76:	46ca      	mov	sl, r9
  405b78:	f040 81e7 	bne.w	405f4a <_vfiprintf_r+0x752>
  405b7c:	9b08      	ldr	r3, [sp, #32]
  405b7e:	9d01      	ldr	r5, [sp, #4]
  405b80:	1b5e      	subs	r6, r3, r5
  405b82:	2e00      	cmp	r6, #0
  405b84:	f340 81e1 	ble.w	405f4a <_vfiprintf_r+0x752>
  405b88:	2e10      	cmp	r6, #16
  405b8a:	4d9a      	ldr	r5, [pc, #616]	; (405df4 <_vfiprintf_r+0x5fc>)
  405b8c:	f340 8450 	ble.w	406430 <_vfiprintf_r+0xc38>
  405b90:	46d4      	mov	ip, sl
  405b92:	2710      	movs	r7, #16
  405b94:	46a2      	mov	sl, r4
  405b96:	9c06      	ldr	r4, [sp, #24]
  405b98:	e007      	b.n	405baa <_vfiprintf_r+0x3b2>
  405b9a:	f101 0e02 	add.w	lr, r1, #2
  405b9e:	f10c 0c08 	add.w	ip, ip, #8
  405ba2:	4601      	mov	r1, r0
  405ba4:	3e10      	subs	r6, #16
  405ba6:	2e10      	cmp	r6, #16
  405ba8:	dd11      	ble.n	405bce <_vfiprintf_r+0x3d6>
  405baa:	1c48      	adds	r0, r1, #1
  405bac:	3210      	adds	r2, #16
  405bae:	2807      	cmp	r0, #7
  405bb0:	9211      	str	r2, [sp, #68]	; 0x44
  405bb2:	e88c 00a0 	stmia.w	ip, {r5, r7}
  405bb6:	9010      	str	r0, [sp, #64]	; 0x40
  405bb8:	ddef      	ble.n	405b9a <_vfiprintf_r+0x3a2>
  405bba:	2a00      	cmp	r2, #0
  405bbc:	f040 829d 	bne.w	4060fa <_vfiprintf_r+0x902>
  405bc0:	3e10      	subs	r6, #16
  405bc2:	2e10      	cmp	r6, #16
  405bc4:	f04f 0e01 	mov.w	lr, #1
  405bc8:	4611      	mov	r1, r2
  405bca:	46cc      	mov	ip, r9
  405bcc:	dced      	bgt.n	405baa <_vfiprintf_r+0x3b2>
  405bce:	4654      	mov	r4, sl
  405bd0:	46e2      	mov	sl, ip
  405bd2:	4432      	add	r2, r6
  405bd4:	f1be 0f07 	cmp.w	lr, #7
  405bd8:	9211      	str	r2, [sp, #68]	; 0x44
  405bda:	e88a 0060 	stmia.w	sl, {r5, r6}
  405bde:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405be2:	f300 8369 	bgt.w	4062b8 <_vfiprintf_r+0xac0>
  405be6:	f10a 0a08 	add.w	sl, sl, #8
  405bea:	f10e 0001 	add.w	r0, lr, #1
  405bee:	4671      	mov	r1, lr
  405bf0:	e1ab      	b.n	405f4a <_vfiprintf_r+0x752>
  405bf2:	9608      	str	r6, [sp, #32]
  405bf4:	f013 0220 	ands.w	r2, r3, #32
  405bf8:	f040 838c 	bne.w	406314 <_vfiprintf_r+0xb1c>
  405bfc:	f013 0110 	ands.w	r1, r3, #16
  405c00:	f040 831a 	bne.w	406238 <_vfiprintf_r+0xa40>
  405c04:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405c08:	f000 8316 	beq.w	406238 <_vfiprintf_r+0xa40>
  405c0c:	9807      	ldr	r0, [sp, #28]
  405c0e:	460a      	mov	r2, r1
  405c10:	4601      	mov	r1, r0
  405c12:	3104      	adds	r1, #4
  405c14:	8806      	ldrh	r6, [r0, #0]
  405c16:	9107      	str	r1, [sp, #28]
  405c18:	2700      	movs	r7, #0
  405c1a:	e720      	b.n	405a5e <_vfiprintf_r+0x266>
  405c1c:	9608      	str	r6, [sp, #32]
  405c1e:	f043 0310 	orr.w	r3, r3, #16
  405c22:	e7e7      	b.n	405bf4 <_vfiprintf_r+0x3fc>
  405c24:	9608      	str	r6, [sp, #32]
  405c26:	f043 0310 	orr.w	r3, r3, #16
  405c2a:	e708      	b.n	405a3e <_vfiprintf_r+0x246>
  405c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405c30:	f898 2000 	ldrb.w	r2, [r8]
  405c34:	e652      	b.n	4058dc <_vfiprintf_r+0xe4>
  405c36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405c3a:	2600      	movs	r6, #0
  405c3c:	f818 2b01 	ldrb.w	r2, [r8], #1
  405c40:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405c44:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  405c48:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405c4c:	2909      	cmp	r1, #9
  405c4e:	d9f5      	bls.n	405c3c <_vfiprintf_r+0x444>
  405c50:	e646      	b.n	4058e0 <_vfiprintf_r+0xe8>
  405c52:	9608      	str	r6, [sp, #32]
  405c54:	2800      	cmp	r0, #0
  405c56:	f040 8408 	bne.w	40646a <_vfiprintf_r+0xc72>
  405c5a:	f043 0310 	orr.w	r3, r3, #16
  405c5e:	069e      	lsls	r6, r3, #26
  405c60:	f100 834c 	bmi.w	4062fc <_vfiprintf_r+0xb04>
  405c64:	06dd      	lsls	r5, r3, #27
  405c66:	f100 82f3 	bmi.w	406250 <_vfiprintf_r+0xa58>
  405c6a:	0658      	lsls	r0, r3, #25
  405c6c:	f140 82f0 	bpl.w	406250 <_vfiprintf_r+0xa58>
  405c70:	9d07      	ldr	r5, [sp, #28]
  405c72:	f9b5 6000 	ldrsh.w	r6, [r5]
  405c76:	462a      	mov	r2, r5
  405c78:	17f7      	asrs	r7, r6, #31
  405c7a:	3204      	adds	r2, #4
  405c7c:	4630      	mov	r0, r6
  405c7e:	4639      	mov	r1, r7
  405c80:	9207      	str	r2, [sp, #28]
  405c82:	2800      	cmp	r0, #0
  405c84:	f171 0200 	sbcs.w	r2, r1, #0
  405c88:	f2c0 835d 	blt.w	406346 <_vfiprintf_r+0xb4e>
  405c8c:	1c61      	adds	r1, r4, #1
  405c8e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405c92:	f04f 0201 	mov.w	r2, #1
  405c96:	f47f aeea 	bne.w	405a6e <_vfiprintf_r+0x276>
  405c9a:	ea56 0107 	orrs.w	r1, r6, r7
  405c9e:	f000 824d 	beq.w	40613c <_vfiprintf_r+0x944>
  405ca2:	9302      	str	r3, [sp, #8]
  405ca4:	2a01      	cmp	r2, #1
  405ca6:	f000 828c 	beq.w	4061c2 <_vfiprintf_r+0x9ca>
  405caa:	2a02      	cmp	r2, #2
  405cac:	f040 825c 	bne.w	406168 <_vfiprintf_r+0x970>
  405cb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405cb2:	46cb      	mov	fp, r9
  405cb4:	0933      	lsrs	r3, r6, #4
  405cb6:	f006 010f 	and.w	r1, r6, #15
  405cba:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  405cbe:	093a      	lsrs	r2, r7, #4
  405cc0:	461e      	mov	r6, r3
  405cc2:	4617      	mov	r7, r2
  405cc4:	5c43      	ldrb	r3, [r0, r1]
  405cc6:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  405cca:	ea56 0307 	orrs.w	r3, r6, r7
  405cce:	d1f1      	bne.n	405cb4 <_vfiprintf_r+0x4bc>
  405cd0:	eba9 030b 	sub.w	r3, r9, fp
  405cd4:	9305      	str	r3, [sp, #20]
  405cd6:	e6e1      	b.n	405a9c <_vfiprintf_r+0x2a4>
  405cd8:	2800      	cmp	r0, #0
  405cda:	f040 83c0 	bne.w	40645e <_vfiprintf_r+0xc66>
  405cde:	0699      	lsls	r1, r3, #26
  405ce0:	f100 8367 	bmi.w	4063b2 <_vfiprintf_r+0xbba>
  405ce4:	06da      	lsls	r2, r3, #27
  405ce6:	f100 80f1 	bmi.w	405ecc <_vfiprintf_r+0x6d4>
  405cea:	065b      	lsls	r3, r3, #25
  405cec:	f140 80ee 	bpl.w	405ecc <_vfiprintf_r+0x6d4>
  405cf0:	9a07      	ldr	r2, [sp, #28]
  405cf2:	6813      	ldr	r3, [r2, #0]
  405cf4:	3204      	adds	r2, #4
  405cf6:	9207      	str	r2, [sp, #28]
  405cf8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  405cfc:	801a      	strh	r2, [r3, #0]
  405cfe:	e5b8      	b.n	405872 <_vfiprintf_r+0x7a>
  405d00:	9807      	ldr	r0, [sp, #28]
  405d02:	4a3d      	ldr	r2, [pc, #244]	; (405df8 <_vfiprintf_r+0x600>)
  405d04:	9608      	str	r6, [sp, #32]
  405d06:	920b      	str	r2, [sp, #44]	; 0x2c
  405d08:	6806      	ldr	r6, [r0, #0]
  405d0a:	2278      	movs	r2, #120	; 0x78
  405d0c:	2130      	movs	r1, #48	; 0x30
  405d0e:	3004      	adds	r0, #4
  405d10:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405d14:	f043 0302 	orr.w	r3, r3, #2
  405d18:	9007      	str	r0, [sp, #28]
  405d1a:	2700      	movs	r7, #0
  405d1c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405d20:	2202      	movs	r2, #2
  405d22:	e69c      	b.n	405a5e <_vfiprintf_r+0x266>
  405d24:	9608      	str	r6, [sp, #32]
  405d26:	2800      	cmp	r0, #0
  405d28:	d099      	beq.n	405c5e <_vfiprintf_r+0x466>
  405d2a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405d2e:	e796      	b.n	405c5e <_vfiprintf_r+0x466>
  405d30:	f898 2000 	ldrb.w	r2, [r8]
  405d34:	2d00      	cmp	r5, #0
  405d36:	f47f add1 	bne.w	4058dc <_vfiprintf_r+0xe4>
  405d3a:	2001      	movs	r0, #1
  405d3c:	2520      	movs	r5, #32
  405d3e:	e5cd      	b.n	4058dc <_vfiprintf_r+0xe4>
  405d40:	f043 0301 	orr.w	r3, r3, #1
  405d44:	f898 2000 	ldrb.w	r2, [r8]
  405d48:	e5c8      	b.n	4058dc <_vfiprintf_r+0xe4>
  405d4a:	9608      	str	r6, [sp, #32]
  405d4c:	2800      	cmp	r0, #0
  405d4e:	f040 8393 	bne.w	406478 <_vfiprintf_r+0xc80>
  405d52:	4929      	ldr	r1, [pc, #164]	; (405df8 <_vfiprintf_r+0x600>)
  405d54:	910b      	str	r1, [sp, #44]	; 0x2c
  405d56:	069f      	lsls	r7, r3, #26
  405d58:	f100 82e8 	bmi.w	40632c <_vfiprintf_r+0xb34>
  405d5c:	9807      	ldr	r0, [sp, #28]
  405d5e:	06de      	lsls	r6, r3, #27
  405d60:	4601      	mov	r1, r0
  405d62:	f100 8270 	bmi.w	406246 <_vfiprintf_r+0xa4e>
  405d66:	065d      	lsls	r5, r3, #25
  405d68:	f140 826d 	bpl.w	406246 <_vfiprintf_r+0xa4e>
  405d6c:	3104      	adds	r1, #4
  405d6e:	8806      	ldrh	r6, [r0, #0]
  405d70:	9107      	str	r1, [sp, #28]
  405d72:	2700      	movs	r7, #0
  405d74:	07d8      	lsls	r0, r3, #31
  405d76:	f140 8222 	bpl.w	4061be <_vfiprintf_r+0x9c6>
  405d7a:	ea56 0107 	orrs.w	r1, r6, r7
  405d7e:	f000 821e 	beq.w	4061be <_vfiprintf_r+0x9c6>
  405d82:	2130      	movs	r1, #48	; 0x30
  405d84:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  405d88:	f043 0302 	orr.w	r3, r3, #2
  405d8c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405d90:	2202      	movs	r2, #2
  405d92:	e664      	b.n	405a5e <_vfiprintf_r+0x266>
  405d94:	9608      	str	r6, [sp, #32]
  405d96:	2800      	cmp	r0, #0
  405d98:	f040 836b 	bne.w	406472 <_vfiprintf_r+0xc7a>
  405d9c:	4917      	ldr	r1, [pc, #92]	; (405dfc <_vfiprintf_r+0x604>)
  405d9e:	910b      	str	r1, [sp, #44]	; 0x2c
  405da0:	e7d9      	b.n	405d56 <_vfiprintf_r+0x55e>
  405da2:	9907      	ldr	r1, [sp, #28]
  405da4:	9608      	str	r6, [sp, #32]
  405da6:	680a      	ldr	r2, [r1, #0]
  405da8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405dac:	f04f 0000 	mov.w	r0, #0
  405db0:	460a      	mov	r2, r1
  405db2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  405db6:	3204      	adds	r2, #4
  405db8:	2001      	movs	r0, #1
  405dba:	9001      	str	r0, [sp, #4]
  405dbc:	9207      	str	r2, [sp, #28]
  405dbe:	9005      	str	r0, [sp, #20]
  405dc0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405dc4:	9302      	str	r3, [sp, #8]
  405dc6:	2400      	movs	r4, #0
  405dc8:	e670      	b.n	405aac <_vfiprintf_r+0x2b4>
  405dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405dce:	f898 2000 	ldrb.w	r2, [r8]
  405dd2:	e583      	b.n	4058dc <_vfiprintf_r+0xe4>
  405dd4:	f898 2000 	ldrb.w	r2, [r8]
  405dd8:	2a6c      	cmp	r2, #108	; 0x6c
  405dda:	bf03      	ittte	eq
  405ddc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  405de0:	f043 0320 	orreq.w	r3, r3, #32
  405de4:	f108 0801 	addeq.w	r8, r8, #1
  405de8:	f043 0310 	orrne.w	r3, r3, #16
  405dec:	e576      	b.n	4058dc <_vfiprintf_r+0xe4>
  405dee:	bf00      	nop
  405df0:	0040a0e8 	.word	0x0040a0e8
  405df4:	0040a0f8 	.word	0x0040a0f8
  405df8:	0040a0a8 	.word	0x0040a0a8
  405dfc:	0040a094 	.word	0x0040a094
  405e00:	9907      	ldr	r1, [sp, #28]
  405e02:	680e      	ldr	r6, [r1, #0]
  405e04:	460a      	mov	r2, r1
  405e06:	2e00      	cmp	r6, #0
  405e08:	f102 0204 	add.w	r2, r2, #4
  405e0c:	f6ff ae0f 	blt.w	405a2e <_vfiprintf_r+0x236>
  405e10:	9207      	str	r2, [sp, #28]
  405e12:	f898 2000 	ldrb.w	r2, [r8]
  405e16:	e561      	b.n	4058dc <_vfiprintf_r+0xe4>
  405e18:	f898 2000 	ldrb.w	r2, [r8]
  405e1c:	2001      	movs	r0, #1
  405e1e:	252b      	movs	r5, #43	; 0x2b
  405e20:	e55c      	b.n	4058dc <_vfiprintf_r+0xe4>
  405e22:	9907      	ldr	r1, [sp, #28]
  405e24:	9608      	str	r6, [sp, #32]
  405e26:	f8d1 b000 	ldr.w	fp, [r1]
  405e2a:	f04f 0200 	mov.w	r2, #0
  405e2e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405e32:	1d0e      	adds	r6, r1, #4
  405e34:	f1bb 0f00 	cmp.w	fp, #0
  405e38:	f000 82e5 	beq.w	406406 <_vfiprintf_r+0xc0e>
  405e3c:	1c67      	adds	r7, r4, #1
  405e3e:	f000 82c4 	beq.w	4063ca <_vfiprintf_r+0xbd2>
  405e42:	4622      	mov	r2, r4
  405e44:	2100      	movs	r1, #0
  405e46:	4658      	mov	r0, fp
  405e48:	9301      	str	r3, [sp, #4]
  405e4a:	f002 f8f1 	bl	408030 <memchr>
  405e4e:	9b01      	ldr	r3, [sp, #4]
  405e50:	2800      	cmp	r0, #0
  405e52:	f000 82e5 	beq.w	406420 <_vfiprintf_r+0xc28>
  405e56:	eba0 020b 	sub.w	r2, r0, fp
  405e5a:	9205      	str	r2, [sp, #20]
  405e5c:	9607      	str	r6, [sp, #28]
  405e5e:	9302      	str	r3, [sp, #8]
  405e60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405e64:	2400      	movs	r4, #0
  405e66:	e619      	b.n	405a9c <_vfiprintf_r+0x2a4>
  405e68:	f898 2000 	ldrb.w	r2, [r8]
  405e6c:	2a2a      	cmp	r2, #42	; 0x2a
  405e6e:	f108 0701 	add.w	r7, r8, #1
  405e72:	f000 82e9 	beq.w	406448 <_vfiprintf_r+0xc50>
  405e76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405e7a:	2909      	cmp	r1, #9
  405e7c:	46b8      	mov	r8, r7
  405e7e:	f04f 0400 	mov.w	r4, #0
  405e82:	f63f ad2d 	bhi.w	4058e0 <_vfiprintf_r+0xe8>
  405e86:	f818 2b01 	ldrb.w	r2, [r8], #1
  405e8a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405e8e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405e92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405e96:	2909      	cmp	r1, #9
  405e98:	d9f5      	bls.n	405e86 <_vfiprintf_r+0x68e>
  405e9a:	e521      	b.n	4058e0 <_vfiprintf_r+0xe8>
  405e9c:	f043 0320 	orr.w	r3, r3, #32
  405ea0:	f898 2000 	ldrb.w	r2, [r8]
  405ea4:	e51a      	b.n	4058dc <_vfiprintf_r+0xe4>
  405ea6:	9608      	str	r6, [sp, #32]
  405ea8:	2800      	cmp	r0, #0
  405eaa:	f040 82db 	bne.w	406464 <_vfiprintf_r+0xc6c>
  405eae:	2a00      	cmp	r2, #0
  405eb0:	f000 80e7 	beq.w	406082 <_vfiprintf_r+0x88a>
  405eb4:	2101      	movs	r1, #1
  405eb6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405eba:	f04f 0200 	mov.w	r2, #0
  405ebe:	9101      	str	r1, [sp, #4]
  405ec0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405ec4:	9105      	str	r1, [sp, #20]
  405ec6:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  405eca:	e77b      	b.n	405dc4 <_vfiprintf_r+0x5cc>
  405ecc:	9a07      	ldr	r2, [sp, #28]
  405ece:	6813      	ldr	r3, [r2, #0]
  405ed0:	3204      	adds	r2, #4
  405ed2:	9207      	str	r2, [sp, #28]
  405ed4:	9a03      	ldr	r2, [sp, #12]
  405ed6:	601a      	str	r2, [r3, #0]
  405ed8:	e4cb      	b.n	405872 <_vfiprintf_r+0x7a>
  405eda:	aa0f      	add	r2, sp, #60	; 0x3c
  405edc:	9904      	ldr	r1, [sp, #16]
  405ede:	4620      	mov	r0, r4
  405ee0:	f7ff fc4a 	bl	405778 <__sprint_r.part.0>
  405ee4:	2800      	cmp	r0, #0
  405ee6:	f040 8139 	bne.w	40615c <_vfiprintf_r+0x964>
  405eea:	9910      	ldr	r1, [sp, #64]	; 0x40
  405eec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405eee:	f101 0c01 	add.w	ip, r1, #1
  405ef2:	46ce      	mov	lr, r9
  405ef4:	e5ff      	b.n	405af6 <_vfiprintf_r+0x2fe>
  405ef6:	9910      	ldr	r1, [sp, #64]	; 0x40
  405ef8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405efa:	1c48      	adds	r0, r1, #1
  405efc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405f00:	2d00      	cmp	r5, #0
  405f02:	f43f ae22 	beq.w	405b4a <_vfiprintf_r+0x352>
  405f06:	3201      	adds	r2, #1
  405f08:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405f0c:	2101      	movs	r1, #1
  405f0e:	2807      	cmp	r0, #7
  405f10:	9211      	str	r2, [sp, #68]	; 0x44
  405f12:	9010      	str	r0, [sp, #64]	; 0x40
  405f14:	f8ca 5000 	str.w	r5, [sl]
  405f18:	f8ca 1004 	str.w	r1, [sl, #4]
  405f1c:	f340 8108 	ble.w	406130 <_vfiprintf_r+0x938>
  405f20:	2a00      	cmp	r2, #0
  405f22:	f040 81bc 	bne.w	40629e <_vfiprintf_r+0xaa6>
  405f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f28:	2b00      	cmp	r3, #0
  405f2a:	f43f ae1f 	beq.w	405b6c <_vfiprintf_r+0x374>
  405f2e:	ab0e      	add	r3, sp, #56	; 0x38
  405f30:	2202      	movs	r2, #2
  405f32:	4608      	mov	r0, r1
  405f34:	931c      	str	r3, [sp, #112]	; 0x70
  405f36:	921d      	str	r2, [sp, #116]	; 0x74
  405f38:	46ca      	mov	sl, r9
  405f3a:	4601      	mov	r1, r0
  405f3c:	f10a 0a08 	add.w	sl, sl, #8
  405f40:	3001      	adds	r0, #1
  405f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f44:	2b80      	cmp	r3, #128	; 0x80
  405f46:	f43f ae19 	beq.w	405b7c <_vfiprintf_r+0x384>
  405f4a:	9b05      	ldr	r3, [sp, #20]
  405f4c:	1ae4      	subs	r4, r4, r3
  405f4e:	2c00      	cmp	r4, #0
  405f50:	dd2e      	ble.n	405fb0 <_vfiprintf_r+0x7b8>
  405f52:	2c10      	cmp	r4, #16
  405f54:	4db3      	ldr	r5, [pc, #716]	; (406224 <_vfiprintf_r+0xa2c>)
  405f56:	dd1e      	ble.n	405f96 <_vfiprintf_r+0x79e>
  405f58:	46d6      	mov	lr, sl
  405f5a:	2610      	movs	r6, #16
  405f5c:	9f06      	ldr	r7, [sp, #24]
  405f5e:	f8dd a010 	ldr.w	sl, [sp, #16]
  405f62:	e006      	b.n	405f72 <_vfiprintf_r+0x77a>
  405f64:	1c88      	adds	r0, r1, #2
  405f66:	f10e 0e08 	add.w	lr, lr, #8
  405f6a:	4619      	mov	r1, r3
  405f6c:	3c10      	subs	r4, #16
  405f6e:	2c10      	cmp	r4, #16
  405f70:	dd10      	ble.n	405f94 <_vfiprintf_r+0x79c>
  405f72:	1c4b      	adds	r3, r1, #1
  405f74:	3210      	adds	r2, #16
  405f76:	2b07      	cmp	r3, #7
  405f78:	9211      	str	r2, [sp, #68]	; 0x44
  405f7a:	e88e 0060 	stmia.w	lr, {r5, r6}
  405f7e:	9310      	str	r3, [sp, #64]	; 0x40
  405f80:	ddf0      	ble.n	405f64 <_vfiprintf_r+0x76c>
  405f82:	2a00      	cmp	r2, #0
  405f84:	d165      	bne.n	406052 <_vfiprintf_r+0x85a>
  405f86:	3c10      	subs	r4, #16
  405f88:	2c10      	cmp	r4, #16
  405f8a:	f04f 0001 	mov.w	r0, #1
  405f8e:	4611      	mov	r1, r2
  405f90:	46ce      	mov	lr, r9
  405f92:	dcee      	bgt.n	405f72 <_vfiprintf_r+0x77a>
  405f94:	46f2      	mov	sl, lr
  405f96:	4422      	add	r2, r4
  405f98:	2807      	cmp	r0, #7
  405f9a:	9211      	str	r2, [sp, #68]	; 0x44
  405f9c:	f8ca 5000 	str.w	r5, [sl]
  405fa0:	f8ca 4004 	str.w	r4, [sl, #4]
  405fa4:	9010      	str	r0, [sp, #64]	; 0x40
  405fa6:	f300 8085 	bgt.w	4060b4 <_vfiprintf_r+0x8bc>
  405faa:	f10a 0a08 	add.w	sl, sl, #8
  405fae:	3001      	adds	r0, #1
  405fb0:	9905      	ldr	r1, [sp, #20]
  405fb2:	f8ca b000 	str.w	fp, [sl]
  405fb6:	440a      	add	r2, r1
  405fb8:	2807      	cmp	r0, #7
  405fba:	9211      	str	r2, [sp, #68]	; 0x44
  405fbc:	f8ca 1004 	str.w	r1, [sl, #4]
  405fc0:	9010      	str	r0, [sp, #64]	; 0x40
  405fc2:	f340 8082 	ble.w	4060ca <_vfiprintf_r+0x8d2>
  405fc6:	2a00      	cmp	r2, #0
  405fc8:	f040 8118 	bne.w	4061fc <_vfiprintf_r+0xa04>
  405fcc:	9b02      	ldr	r3, [sp, #8]
  405fce:	9210      	str	r2, [sp, #64]	; 0x40
  405fd0:	0758      	lsls	r0, r3, #29
  405fd2:	d535      	bpl.n	406040 <_vfiprintf_r+0x848>
  405fd4:	9b08      	ldr	r3, [sp, #32]
  405fd6:	9901      	ldr	r1, [sp, #4]
  405fd8:	1a5c      	subs	r4, r3, r1
  405fda:	2c00      	cmp	r4, #0
  405fdc:	f340 80e7 	ble.w	4061ae <_vfiprintf_r+0x9b6>
  405fe0:	46ca      	mov	sl, r9
  405fe2:	2c10      	cmp	r4, #16
  405fe4:	f340 8218 	ble.w	406418 <_vfiprintf_r+0xc20>
  405fe8:	9910      	ldr	r1, [sp, #64]	; 0x40
  405fea:	4e8f      	ldr	r6, [pc, #572]	; (406228 <_vfiprintf_r+0xa30>)
  405fec:	9f06      	ldr	r7, [sp, #24]
  405fee:	f8dd b010 	ldr.w	fp, [sp, #16]
  405ff2:	2510      	movs	r5, #16
  405ff4:	e006      	b.n	406004 <_vfiprintf_r+0x80c>
  405ff6:	1c88      	adds	r0, r1, #2
  405ff8:	f10a 0a08 	add.w	sl, sl, #8
  405ffc:	4619      	mov	r1, r3
  405ffe:	3c10      	subs	r4, #16
  406000:	2c10      	cmp	r4, #16
  406002:	dd11      	ble.n	406028 <_vfiprintf_r+0x830>
  406004:	1c4b      	adds	r3, r1, #1
  406006:	3210      	adds	r2, #16
  406008:	2b07      	cmp	r3, #7
  40600a:	9211      	str	r2, [sp, #68]	; 0x44
  40600c:	f8ca 6000 	str.w	r6, [sl]
  406010:	f8ca 5004 	str.w	r5, [sl, #4]
  406014:	9310      	str	r3, [sp, #64]	; 0x40
  406016:	ddee      	ble.n	405ff6 <_vfiprintf_r+0x7fe>
  406018:	bb42      	cbnz	r2, 40606c <_vfiprintf_r+0x874>
  40601a:	3c10      	subs	r4, #16
  40601c:	2c10      	cmp	r4, #16
  40601e:	f04f 0001 	mov.w	r0, #1
  406022:	4611      	mov	r1, r2
  406024:	46ca      	mov	sl, r9
  406026:	dced      	bgt.n	406004 <_vfiprintf_r+0x80c>
  406028:	4422      	add	r2, r4
  40602a:	2807      	cmp	r0, #7
  40602c:	9211      	str	r2, [sp, #68]	; 0x44
  40602e:	f8ca 6000 	str.w	r6, [sl]
  406032:	f8ca 4004 	str.w	r4, [sl, #4]
  406036:	9010      	str	r0, [sp, #64]	; 0x40
  406038:	dd51      	ble.n	4060de <_vfiprintf_r+0x8e6>
  40603a:	2a00      	cmp	r2, #0
  40603c:	f040 819b 	bne.w	406376 <_vfiprintf_r+0xb7e>
  406040:	9b03      	ldr	r3, [sp, #12]
  406042:	9a08      	ldr	r2, [sp, #32]
  406044:	9901      	ldr	r1, [sp, #4]
  406046:	428a      	cmp	r2, r1
  406048:	bfac      	ite	ge
  40604a:	189b      	addge	r3, r3, r2
  40604c:	185b      	addlt	r3, r3, r1
  40604e:	9303      	str	r3, [sp, #12]
  406050:	e04e      	b.n	4060f0 <_vfiprintf_r+0x8f8>
  406052:	aa0f      	add	r2, sp, #60	; 0x3c
  406054:	4651      	mov	r1, sl
  406056:	4638      	mov	r0, r7
  406058:	f7ff fb8e 	bl	405778 <__sprint_r.part.0>
  40605c:	2800      	cmp	r0, #0
  40605e:	f040 813f 	bne.w	4062e0 <_vfiprintf_r+0xae8>
  406062:	9910      	ldr	r1, [sp, #64]	; 0x40
  406064:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406066:	1c48      	adds	r0, r1, #1
  406068:	46ce      	mov	lr, r9
  40606a:	e77f      	b.n	405f6c <_vfiprintf_r+0x774>
  40606c:	aa0f      	add	r2, sp, #60	; 0x3c
  40606e:	4659      	mov	r1, fp
  406070:	4638      	mov	r0, r7
  406072:	f7ff fb81 	bl	405778 <__sprint_r.part.0>
  406076:	b960      	cbnz	r0, 406092 <_vfiprintf_r+0x89a>
  406078:	9910      	ldr	r1, [sp, #64]	; 0x40
  40607a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40607c:	1c48      	adds	r0, r1, #1
  40607e:	46ca      	mov	sl, r9
  406080:	e7bd      	b.n	405ffe <_vfiprintf_r+0x806>
  406082:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406084:	f8dd b010 	ldr.w	fp, [sp, #16]
  406088:	2b00      	cmp	r3, #0
  40608a:	f040 81d4 	bne.w	406436 <_vfiprintf_r+0xc3e>
  40608e:	2300      	movs	r3, #0
  406090:	9310      	str	r3, [sp, #64]	; 0x40
  406092:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406096:	f013 0f01 	tst.w	r3, #1
  40609a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40609e:	d102      	bne.n	4060a6 <_vfiprintf_r+0x8ae>
  4060a0:	059a      	lsls	r2, r3, #22
  4060a2:	f140 80de 	bpl.w	406262 <_vfiprintf_r+0xa6a>
  4060a6:	065b      	lsls	r3, r3, #25
  4060a8:	f53f acb2 	bmi.w	405a10 <_vfiprintf_r+0x218>
  4060ac:	9803      	ldr	r0, [sp, #12]
  4060ae:	b02d      	add	sp, #180	; 0xb4
  4060b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060b4:	2a00      	cmp	r2, #0
  4060b6:	f040 8106 	bne.w	4062c6 <_vfiprintf_r+0xace>
  4060ba:	9a05      	ldr	r2, [sp, #20]
  4060bc:	921d      	str	r2, [sp, #116]	; 0x74
  4060be:	2301      	movs	r3, #1
  4060c0:	9211      	str	r2, [sp, #68]	; 0x44
  4060c2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4060c6:	9310      	str	r3, [sp, #64]	; 0x40
  4060c8:	46ca      	mov	sl, r9
  4060ca:	f10a 0a08 	add.w	sl, sl, #8
  4060ce:	9b02      	ldr	r3, [sp, #8]
  4060d0:	0759      	lsls	r1, r3, #29
  4060d2:	d504      	bpl.n	4060de <_vfiprintf_r+0x8e6>
  4060d4:	9b08      	ldr	r3, [sp, #32]
  4060d6:	9901      	ldr	r1, [sp, #4]
  4060d8:	1a5c      	subs	r4, r3, r1
  4060da:	2c00      	cmp	r4, #0
  4060dc:	dc81      	bgt.n	405fe2 <_vfiprintf_r+0x7ea>
  4060de:	9b03      	ldr	r3, [sp, #12]
  4060e0:	9908      	ldr	r1, [sp, #32]
  4060e2:	9801      	ldr	r0, [sp, #4]
  4060e4:	4281      	cmp	r1, r0
  4060e6:	bfac      	ite	ge
  4060e8:	185b      	addge	r3, r3, r1
  4060ea:	181b      	addlt	r3, r3, r0
  4060ec:	9303      	str	r3, [sp, #12]
  4060ee:	bb72      	cbnz	r2, 40614e <_vfiprintf_r+0x956>
  4060f0:	2300      	movs	r3, #0
  4060f2:	9310      	str	r3, [sp, #64]	; 0x40
  4060f4:	46ca      	mov	sl, r9
  4060f6:	f7ff bbbc 	b.w	405872 <_vfiprintf_r+0x7a>
  4060fa:	aa0f      	add	r2, sp, #60	; 0x3c
  4060fc:	9904      	ldr	r1, [sp, #16]
  4060fe:	4620      	mov	r0, r4
  406100:	f7ff fb3a 	bl	405778 <__sprint_r.part.0>
  406104:	bb50      	cbnz	r0, 40615c <_vfiprintf_r+0x964>
  406106:	9910      	ldr	r1, [sp, #64]	; 0x40
  406108:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40610a:	f101 0e01 	add.w	lr, r1, #1
  40610e:	46cc      	mov	ip, r9
  406110:	e548      	b.n	405ba4 <_vfiprintf_r+0x3ac>
  406112:	2a00      	cmp	r2, #0
  406114:	f040 8140 	bne.w	406398 <_vfiprintf_r+0xba0>
  406118:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40611c:	2900      	cmp	r1, #0
  40611e:	f000 811b 	beq.w	406358 <_vfiprintf_r+0xb60>
  406122:	2201      	movs	r2, #1
  406124:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  406128:	4610      	mov	r0, r2
  40612a:	921d      	str	r2, [sp, #116]	; 0x74
  40612c:	911c      	str	r1, [sp, #112]	; 0x70
  40612e:	46ca      	mov	sl, r9
  406130:	4601      	mov	r1, r0
  406132:	f10a 0a08 	add.w	sl, sl, #8
  406136:	3001      	adds	r0, #1
  406138:	e507      	b.n	405b4a <_vfiprintf_r+0x352>
  40613a:	9b02      	ldr	r3, [sp, #8]
  40613c:	2a01      	cmp	r2, #1
  40613e:	f000 8098 	beq.w	406272 <_vfiprintf_r+0xa7a>
  406142:	2a02      	cmp	r2, #2
  406144:	d10d      	bne.n	406162 <_vfiprintf_r+0x96a>
  406146:	9302      	str	r3, [sp, #8]
  406148:	2600      	movs	r6, #0
  40614a:	2700      	movs	r7, #0
  40614c:	e5b0      	b.n	405cb0 <_vfiprintf_r+0x4b8>
  40614e:	aa0f      	add	r2, sp, #60	; 0x3c
  406150:	9904      	ldr	r1, [sp, #16]
  406152:	9806      	ldr	r0, [sp, #24]
  406154:	f7ff fb10 	bl	405778 <__sprint_r.part.0>
  406158:	2800      	cmp	r0, #0
  40615a:	d0c9      	beq.n	4060f0 <_vfiprintf_r+0x8f8>
  40615c:	f8dd b010 	ldr.w	fp, [sp, #16]
  406160:	e797      	b.n	406092 <_vfiprintf_r+0x89a>
  406162:	9302      	str	r3, [sp, #8]
  406164:	2600      	movs	r6, #0
  406166:	2700      	movs	r7, #0
  406168:	4649      	mov	r1, r9
  40616a:	e000      	b.n	40616e <_vfiprintf_r+0x976>
  40616c:	4659      	mov	r1, fp
  40616e:	08f2      	lsrs	r2, r6, #3
  406170:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406174:	08f8      	lsrs	r0, r7, #3
  406176:	f006 0307 	and.w	r3, r6, #7
  40617a:	4607      	mov	r7, r0
  40617c:	4616      	mov	r6, r2
  40617e:	3330      	adds	r3, #48	; 0x30
  406180:	ea56 0207 	orrs.w	r2, r6, r7
  406184:	f801 3c01 	strb.w	r3, [r1, #-1]
  406188:	f101 3bff 	add.w	fp, r1, #4294967295
  40618c:	d1ee      	bne.n	40616c <_vfiprintf_r+0x974>
  40618e:	9a02      	ldr	r2, [sp, #8]
  406190:	07d6      	lsls	r6, r2, #31
  406192:	f57f ad9d 	bpl.w	405cd0 <_vfiprintf_r+0x4d8>
  406196:	2b30      	cmp	r3, #48	; 0x30
  406198:	f43f ad9a 	beq.w	405cd0 <_vfiprintf_r+0x4d8>
  40619c:	3902      	subs	r1, #2
  40619e:	2330      	movs	r3, #48	; 0x30
  4061a0:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4061a4:	eba9 0301 	sub.w	r3, r9, r1
  4061a8:	9305      	str	r3, [sp, #20]
  4061aa:	468b      	mov	fp, r1
  4061ac:	e476      	b.n	405a9c <_vfiprintf_r+0x2a4>
  4061ae:	9b03      	ldr	r3, [sp, #12]
  4061b0:	9a08      	ldr	r2, [sp, #32]
  4061b2:	428a      	cmp	r2, r1
  4061b4:	bfac      	ite	ge
  4061b6:	189b      	addge	r3, r3, r2
  4061b8:	185b      	addlt	r3, r3, r1
  4061ba:	9303      	str	r3, [sp, #12]
  4061bc:	e798      	b.n	4060f0 <_vfiprintf_r+0x8f8>
  4061be:	2202      	movs	r2, #2
  4061c0:	e44d      	b.n	405a5e <_vfiprintf_r+0x266>
  4061c2:	2f00      	cmp	r7, #0
  4061c4:	bf08      	it	eq
  4061c6:	2e0a      	cmpeq	r6, #10
  4061c8:	d352      	bcc.n	406270 <_vfiprintf_r+0xa78>
  4061ca:	46cb      	mov	fp, r9
  4061cc:	4630      	mov	r0, r6
  4061ce:	4639      	mov	r1, r7
  4061d0:	220a      	movs	r2, #10
  4061d2:	2300      	movs	r3, #0
  4061d4:	f003 fbd0 	bl	409978 <__aeabi_uldivmod>
  4061d8:	3230      	adds	r2, #48	; 0x30
  4061da:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4061de:	4630      	mov	r0, r6
  4061e0:	4639      	mov	r1, r7
  4061e2:	2300      	movs	r3, #0
  4061e4:	220a      	movs	r2, #10
  4061e6:	f003 fbc7 	bl	409978 <__aeabi_uldivmod>
  4061ea:	4606      	mov	r6, r0
  4061ec:	460f      	mov	r7, r1
  4061ee:	ea56 0307 	orrs.w	r3, r6, r7
  4061f2:	d1eb      	bne.n	4061cc <_vfiprintf_r+0x9d4>
  4061f4:	e56c      	b.n	405cd0 <_vfiprintf_r+0x4d8>
  4061f6:	9405      	str	r4, [sp, #20]
  4061f8:	46cb      	mov	fp, r9
  4061fa:	e44f      	b.n	405a9c <_vfiprintf_r+0x2a4>
  4061fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4061fe:	9904      	ldr	r1, [sp, #16]
  406200:	9806      	ldr	r0, [sp, #24]
  406202:	f7ff fab9 	bl	405778 <__sprint_r.part.0>
  406206:	2800      	cmp	r0, #0
  406208:	d1a8      	bne.n	40615c <_vfiprintf_r+0x964>
  40620a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40620c:	46ca      	mov	sl, r9
  40620e:	e75e      	b.n	4060ce <_vfiprintf_r+0x8d6>
  406210:	aa0f      	add	r2, sp, #60	; 0x3c
  406212:	9904      	ldr	r1, [sp, #16]
  406214:	9806      	ldr	r0, [sp, #24]
  406216:	f7ff faaf 	bl	405778 <__sprint_r.part.0>
  40621a:	2800      	cmp	r0, #0
  40621c:	d19e      	bne.n	40615c <_vfiprintf_r+0x964>
  40621e:	46ca      	mov	sl, r9
  406220:	f7ff bbc0 	b.w	4059a4 <_vfiprintf_r+0x1ac>
  406224:	0040a0f8 	.word	0x0040a0f8
  406228:	0040a0e8 	.word	0x0040a0e8
  40622c:	3104      	adds	r1, #4
  40622e:	6816      	ldr	r6, [r2, #0]
  406230:	9107      	str	r1, [sp, #28]
  406232:	2201      	movs	r2, #1
  406234:	2700      	movs	r7, #0
  406236:	e412      	b.n	405a5e <_vfiprintf_r+0x266>
  406238:	9807      	ldr	r0, [sp, #28]
  40623a:	4601      	mov	r1, r0
  40623c:	3104      	adds	r1, #4
  40623e:	6806      	ldr	r6, [r0, #0]
  406240:	9107      	str	r1, [sp, #28]
  406242:	2700      	movs	r7, #0
  406244:	e40b      	b.n	405a5e <_vfiprintf_r+0x266>
  406246:	680e      	ldr	r6, [r1, #0]
  406248:	3104      	adds	r1, #4
  40624a:	9107      	str	r1, [sp, #28]
  40624c:	2700      	movs	r7, #0
  40624e:	e591      	b.n	405d74 <_vfiprintf_r+0x57c>
  406250:	9907      	ldr	r1, [sp, #28]
  406252:	680e      	ldr	r6, [r1, #0]
  406254:	460a      	mov	r2, r1
  406256:	17f7      	asrs	r7, r6, #31
  406258:	3204      	adds	r2, #4
  40625a:	9207      	str	r2, [sp, #28]
  40625c:	4630      	mov	r0, r6
  40625e:	4639      	mov	r1, r7
  406260:	e50f      	b.n	405c82 <_vfiprintf_r+0x48a>
  406262:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406266:	f001 fe4d 	bl	407f04 <__retarget_lock_release_recursive>
  40626a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40626e:	e71a      	b.n	4060a6 <_vfiprintf_r+0x8ae>
  406270:	9b02      	ldr	r3, [sp, #8]
  406272:	9302      	str	r3, [sp, #8]
  406274:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406278:	3630      	adds	r6, #48	; 0x30
  40627a:	2301      	movs	r3, #1
  40627c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406280:	9305      	str	r3, [sp, #20]
  406282:	e40b      	b.n	405a9c <_vfiprintf_r+0x2a4>
  406284:	aa0f      	add	r2, sp, #60	; 0x3c
  406286:	9904      	ldr	r1, [sp, #16]
  406288:	9806      	ldr	r0, [sp, #24]
  40628a:	f7ff fa75 	bl	405778 <__sprint_r.part.0>
  40628e:	2800      	cmp	r0, #0
  406290:	f47f af64 	bne.w	40615c <_vfiprintf_r+0x964>
  406294:	9910      	ldr	r1, [sp, #64]	; 0x40
  406296:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406298:	1c48      	adds	r0, r1, #1
  40629a:	46ca      	mov	sl, r9
  40629c:	e651      	b.n	405f42 <_vfiprintf_r+0x74a>
  40629e:	aa0f      	add	r2, sp, #60	; 0x3c
  4062a0:	9904      	ldr	r1, [sp, #16]
  4062a2:	9806      	ldr	r0, [sp, #24]
  4062a4:	f7ff fa68 	bl	405778 <__sprint_r.part.0>
  4062a8:	2800      	cmp	r0, #0
  4062aa:	f47f af57 	bne.w	40615c <_vfiprintf_r+0x964>
  4062ae:	9910      	ldr	r1, [sp, #64]	; 0x40
  4062b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062b2:	1c48      	adds	r0, r1, #1
  4062b4:	46ca      	mov	sl, r9
  4062b6:	e448      	b.n	405b4a <_vfiprintf_r+0x352>
  4062b8:	2a00      	cmp	r2, #0
  4062ba:	f040 8091 	bne.w	4063e0 <_vfiprintf_r+0xbe8>
  4062be:	2001      	movs	r0, #1
  4062c0:	4611      	mov	r1, r2
  4062c2:	46ca      	mov	sl, r9
  4062c4:	e641      	b.n	405f4a <_vfiprintf_r+0x752>
  4062c6:	aa0f      	add	r2, sp, #60	; 0x3c
  4062c8:	9904      	ldr	r1, [sp, #16]
  4062ca:	9806      	ldr	r0, [sp, #24]
  4062cc:	f7ff fa54 	bl	405778 <__sprint_r.part.0>
  4062d0:	2800      	cmp	r0, #0
  4062d2:	f47f af43 	bne.w	40615c <_vfiprintf_r+0x964>
  4062d6:	9810      	ldr	r0, [sp, #64]	; 0x40
  4062d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062da:	3001      	adds	r0, #1
  4062dc:	46ca      	mov	sl, r9
  4062de:	e667      	b.n	405fb0 <_vfiprintf_r+0x7b8>
  4062e0:	46d3      	mov	fp, sl
  4062e2:	e6d6      	b.n	406092 <_vfiprintf_r+0x89a>
  4062e4:	9e07      	ldr	r6, [sp, #28]
  4062e6:	3607      	adds	r6, #7
  4062e8:	f026 0207 	bic.w	r2, r6, #7
  4062ec:	f102 0108 	add.w	r1, r2, #8
  4062f0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4062f4:	9107      	str	r1, [sp, #28]
  4062f6:	2201      	movs	r2, #1
  4062f8:	f7ff bbb1 	b.w	405a5e <_vfiprintf_r+0x266>
  4062fc:	9e07      	ldr	r6, [sp, #28]
  4062fe:	3607      	adds	r6, #7
  406300:	f026 0607 	bic.w	r6, r6, #7
  406304:	e9d6 0100 	ldrd	r0, r1, [r6]
  406308:	f106 0208 	add.w	r2, r6, #8
  40630c:	9207      	str	r2, [sp, #28]
  40630e:	4606      	mov	r6, r0
  406310:	460f      	mov	r7, r1
  406312:	e4b6      	b.n	405c82 <_vfiprintf_r+0x48a>
  406314:	9e07      	ldr	r6, [sp, #28]
  406316:	3607      	adds	r6, #7
  406318:	f026 0207 	bic.w	r2, r6, #7
  40631c:	f102 0108 	add.w	r1, r2, #8
  406320:	e9d2 6700 	ldrd	r6, r7, [r2]
  406324:	9107      	str	r1, [sp, #28]
  406326:	2200      	movs	r2, #0
  406328:	f7ff bb99 	b.w	405a5e <_vfiprintf_r+0x266>
  40632c:	9e07      	ldr	r6, [sp, #28]
  40632e:	3607      	adds	r6, #7
  406330:	f026 0107 	bic.w	r1, r6, #7
  406334:	f101 0008 	add.w	r0, r1, #8
  406338:	9007      	str	r0, [sp, #28]
  40633a:	e9d1 6700 	ldrd	r6, r7, [r1]
  40633e:	e519      	b.n	405d74 <_vfiprintf_r+0x57c>
  406340:	46cb      	mov	fp, r9
  406342:	f7ff bbab 	b.w	405a9c <_vfiprintf_r+0x2a4>
  406346:	252d      	movs	r5, #45	; 0x2d
  406348:	4276      	negs	r6, r6
  40634a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40634e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406352:	2201      	movs	r2, #1
  406354:	f7ff bb88 	b.w	405a68 <_vfiprintf_r+0x270>
  406358:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40635a:	b9b3      	cbnz	r3, 40638a <_vfiprintf_r+0xb92>
  40635c:	4611      	mov	r1, r2
  40635e:	2001      	movs	r0, #1
  406360:	46ca      	mov	sl, r9
  406362:	e5f2      	b.n	405f4a <_vfiprintf_r+0x752>
  406364:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406368:	f001 fdcc 	bl	407f04 <__retarget_lock_release_recursive>
  40636c:	f04f 33ff 	mov.w	r3, #4294967295
  406370:	9303      	str	r3, [sp, #12]
  406372:	f7ff bb50 	b.w	405a16 <_vfiprintf_r+0x21e>
  406376:	aa0f      	add	r2, sp, #60	; 0x3c
  406378:	9904      	ldr	r1, [sp, #16]
  40637a:	9806      	ldr	r0, [sp, #24]
  40637c:	f7ff f9fc 	bl	405778 <__sprint_r.part.0>
  406380:	2800      	cmp	r0, #0
  406382:	f47f aeeb 	bne.w	40615c <_vfiprintf_r+0x964>
  406386:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406388:	e6a9      	b.n	4060de <_vfiprintf_r+0x8e6>
  40638a:	ab0e      	add	r3, sp, #56	; 0x38
  40638c:	2202      	movs	r2, #2
  40638e:	931c      	str	r3, [sp, #112]	; 0x70
  406390:	921d      	str	r2, [sp, #116]	; 0x74
  406392:	2001      	movs	r0, #1
  406394:	46ca      	mov	sl, r9
  406396:	e5d0      	b.n	405f3a <_vfiprintf_r+0x742>
  406398:	aa0f      	add	r2, sp, #60	; 0x3c
  40639a:	9904      	ldr	r1, [sp, #16]
  40639c:	9806      	ldr	r0, [sp, #24]
  40639e:	f7ff f9eb 	bl	405778 <__sprint_r.part.0>
  4063a2:	2800      	cmp	r0, #0
  4063a4:	f47f aeda 	bne.w	40615c <_vfiprintf_r+0x964>
  4063a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4063aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4063ac:	1c48      	adds	r0, r1, #1
  4063ae:	46ca      	mov	sl, r9
  4063b0:	e5a4      	b.n	405efc <_vfiprintf_r+0x704>
  4063b2:	9a07      	ldr	r2, [sp, #28]
  4063b4:	9903      	ldr	r1, [sp, #12]
  4063b6:	6813      	ldr	r3, [r2, #0]
  4063b8:	17cd      	asrs	r5, r1, #31
  4063ba:	4608      	mov	r0, r1
  4063bc:	3204      	adds	r2, #4
  4063be:	4629      	mov	r1, r5
  4063c0:	9207      	str	r2, [sp, #28]
  4063c2:	e9c3 0100 	strd	r0, r1, [r3]
  4063c6:	f7ff ba54 	b.w	405872 <_vfiprintf_r+0x7a>
  4063ca:	4658      	mov	r0, fp
  4063cc:	9607      	str	r6, [sp, #28]
  4063ce:	9302      	str	r3, [sp, #8]
  4063d0:	f7fd ff36 	bl	404240 <strlen>
  4063d4:	2400      	movs	r4, #0
  4063d6:	9005      	str	r0, [sp, #20]
  4063d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4063dc:	f7ff bb5e 	b.w	405a9c <_vfiprintf_r+0x2a4>
  4063e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4063e2:	9904      	ldr	r1, [sp, #16]
  4063e4:	9806      	ldr	r0, [sp, #24]
  4063e6:	f7ff f9c7 	bl	405778 <__sprint_r.part.0>
  4063ea:	2800      	cmp	r0, #0
  4063ec:	f47f aeb6 	bne.w	40615c <_vfiprintf_r+0x964>
  4063f0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4063f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4063f4:	1c48      	adds	r0, r1, #1
  4063f6:	46ca      	mov	sl, r9
  4063f8:	e5a7      	b.n	405f4a <_vfiprintf_r+0x752>
  4063fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4063fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4063fe:	4e20      	ldr	r6, [pc, #128]	; (406480 <_vfiprintf_r+0xc88>)
  406400:	3101      	adds	r1, #1
  406402:	f7ff bb90 	b.w	405b26 <_vfiprintf_r+0x32e>
  406406:	2c06      	cmp	r4, #6
  406408:	bf28      	it	cs
  40640a:	2406      	movcs	r4, #6
  40640c:	9405      	str	r4, [sp, #20]
  40640e:	9607      	str	r6, [sp, #28]
  406410:	9401      	str	r4, [sp, #4]
  406412:	f8df b070 	ldr.w	fp, [pc, #112]	; 406484 <_vfiprintf_r+0xc8c>
  406416:	e4d5      	b.n	405dc4 <_vfiprintf_r+0x5cc>
  406418:	9810      	ldr	r0, [sp, #64]	; 0x40
  40641a:	4e19      	ldr	r6, [pc, #100]	; (406480 <_vfiprintf_r+0xc88>)
  40641c:	3001      	adds	r0, #1
  40641e:	e603      	b.n	406028 <_vfiprintf_r+0x830>
  406420:	9405      	str	r4, [sp, #20]
  406422:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406426:	9607      	str	r6, [sp, #28]
  406428:	9302      	str	r3, [sp, #8]
  40642a:	4604      	mov	r4, r0
  40642c:	f7ff bb36 	b.w	405a9c <_vfiprintf_r+0x2a4>
  406430:	4686      	mov	lr, r0
  406432:	f7ff bbce 	b.w	405bd2 <_vfiprintf_r+0x3da>
  406436:	9806      	ldr	r0, [sp, #24]
  406438:	aa0f      	add	r2, sp, #60	; 0x3c
  40643a:	4659      	mov	r1, fp
  40643c:	f7ff f99c 	bl	405778 <__sprint_r.part.0>
  406440:	2800      	cmp	r0, #0
  406442:	f43f ae24 	beq.w	40608e <_vfiprintf_r+0x896>
  406446:	e624      	b.n	406092 <_vfiprintf_r+0x89a>
  406448:	9907      	ldr	r1, [sp, #28]
  40644a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40644e:	680c      	ldr	r4, [r1, #0]
  406450:	3104      	adds	r1, #4
  406452:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406456:	46b8      	mov	r8, r7
  406458:	9107      	str	r1, [sp, #28]
  40645a:	f7ff ba3f 	b.w	4058dc <_vfiprintf_r+0xe4>
  40645e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406462:	e43c      	b.n	405cde <_vfiprintf_r+0x4e6>
  406464:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406468:	e521      	b.n	405eae <_vfiprintf_r+0x6b6>
  40646a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40646e:	f7ff bbf4 	b.w	405c5a <_vfiprintf_r+0x462>
  406472:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406476:	e491      	b.n	405d9c <_vfiprintf_r+0x5a4>
  406478:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40647c:	e469      	b.n	405d52 <_vfiprintf_r+0x55a>
  40647e:	bf00      	nop
  406480:	0040a0e8 	.word	0x0040a0e8
  406484:	0040a0bc 	.word	0x0040a0bc

00406488 <__sbprintf>:
  406488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40648c:	460c      	mov	r4, r1
  40648e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406492:	8989      	ldrh	r1, [r1, #12]
  406494:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406496:	89e5      	ldrh	r5, [r4, #14]
  406498:	9619      	str	r6, [sp, #100]	; 0x64
  40649a:	f021 0102 	bic.w	r1, r1, #2
  40649e:	4606      	mov	r6, r0
  4064a0:	69e0      	ldr	r0, [r4, #28]
  4064a2:	f8ad 100c 	strh.w	r1, [sp, #12]
  4064a6:	4617      	mov	r7, r2
  4064a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4064ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4064ae:	f8ad 500e 	strh.w	r5, [sp, #14]
  4064b2:	4698      	mov	r8, r3
  4064b4:	ad1a      	add	r5, sp, #104	; 0x68
  4064b6:	2300      	movs	r3, #0
  4064b8:	9007      	str	r0, [sp, #28]
  4064ba:	a816      	add	r0, sp, #88	; 0x58
  4064bc:	9209      	str	r2, [sp, #36]	; 0x24
  4064be:	9306      	str	r3, [sp, #24]
  4064c0:	9500      	str	r5, [sp, #0]
  4064c2:	9504      	str	r5, [sp, #16]
  4064c4:	9102      	str	r1, [sp, #8]
  4064c6:	9105      	str	r1, [sp, #20]
  4064c8:	f001 fd16 	bl	407ef8 <__retarget_lock_init_recursive>
  4064cc:	4643      	mov	r3, r8
  4064ce:	463a      	mov	r2, r7
  4064d0:	4669      	mov	r1, sp
  4064d2:	4630      	mov	r0, r6
  4064d4:	f7ff f990 	bl	4057f8 <_vfiprintf_r>
  4064d8:	1e05      	subs	r5, r0, #0
  4064da:	db07      	blt.n	4064ec <__sbprintf+0x64>
  4064dc:	4630      	mov	r0, r6
  4064de:	4669      	mov	r1, sp
  4064e0:	f001 f8e8 	bl	4076b4 <_fflush_r>
  4064e4:	2800      	cmp	r0, #0
  4064e6:	bf18      	it	ne
  4064e8:	f04f 35ff 	movne.w	r5, #4294967295
  4064ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4064f0:	065b      	lsls	r3, r3, #25
  4064f2:	d503      	bpl.n	4064fc <__sbprintf+0x74>
  4064f4:	89a3      	ldrh	r3, [r4, #12]
  4064f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4064fa:	81a3      	strh	r3, [r4, #12]
  4064fc:	9816      	ldr	r0, [sp, #88]	; 0x58
  4064fe:	f001 fcfd 	bl	407efc <__retarget_lock_close_recursive>
  406502:	4628      	mov	r0, r5
  406504:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  406508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040650c <__swsetup_r>:
  40650c:	b538      	push	{r3, r4, r5, lr}
  40650e:	4b30      	ldr	r3, [pc, #192]	; (4065d0 <__swsetup_r+0xc4>)
  406510:	681b      	ldr	r3, [r3, #0]
  406512:	4605      	mov	r5, r0
  406514:	460c      	mov	r4, r1
  406516:	b113      	cbz	r3, 40651e <__swsetup_r+0x12>
  406518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40651a:	2a00      	cmp	r2, #0
  40651c:	d038      	beq.n	406590 <__swsetup_r+0x84>
  40651e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406522:	b293      	uxth	r3, r2
  406524:	0718      	lsls	r0, r3, #28
  406526:	d50c      	bpl.n	406542 <__swsetup_r+0x36>
  406528:	6920      	ldr	r0, [r4, #16]
  40652a:	b1a8      	cbz	r0, 406558 <__swsetup_r+0x4c>
  40652c:	f013 0201 	ands.w	r2, r3, #1
  406530:	d01e      	beq.n	406570 <__swsetup_r+0x64>
  406532:	6963      	ldr	r3, [r4, #20]
  406534:	2200      	movs	r2, #0
  406536:	425b      	negs	r3, r3
  406538:	61a3      	str	r3, [r4, #24]
  40653a:	60a2      	str	r2, [r4, #8]
  40653c:	b1f0      	cbz	r0, 40657c <__swsetup_r+0x70>
  40653e:	2000      	movs	r0, #0
  406540:	bd38      	pop	{r3, r4, r5, pc}
  406542:	06d9      	lsls	r1, r3, #27
  406544:	d53c      	bpl.n	4065c0 <__swsetup_r+0xb4>
  406546:	0758      	lsls	r0, r3, #29
  406548:	d426      	bmi.n	406598 <__swsetup_r+0x8c>
  40654a:	6920      	ldr	r0, [r4, #16]
  40654c:	f042 0308 	orr.w	r3, r2, #8
  406550:	81a3      	strh	r3, [r4, #12]
  406552:	b29b      	uxth	r3, r3
  406554:	2800      	cmp	r0, #0
  406556:	d1e9      	bne.n	40652c <__swsetup_r+0x20>
  406558:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40655c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406560:	d0e4      	beq.n	40652c <__swsetup_r+0x20>
  406562:	4628      	mov	r0, r5
  406564:	4621      	mov	r1, r4
  406566:	f001 fcfd 	bl	407f64 <__smakebuf_r>
  40656a:	89a3      	ldrh	r3, [r4, #12]
  40656c:	6920      	ldr	r0, [r4, #16]
  40656e:	e7dd      	b.n	40652c <__swsetup_r+0x20>
  406570:	0799      	lsls	r1, r3, #30
  406572:	bf58      	it	pl
  406574:	6962      	ldrpl	r2, [r4, #20]
  406576:	60a2      	str	r2, [r4, #8]
  406578:	2800      	cmp	r0, #0
  40657a:	d1e0      	bne.n	40653e <__swsetup_r+0x32>
  40657c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406580:	061a      	lsls	r2, r3, #24
  406582:	d5dd      	bpl.n	406540 <__swsetup_r+0x34>
  406584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406588:	81a3      	strh	r3, [r4, #12]
  40658a:	f04f 30ff 	mov.w	r0, #4294967295
  40658e:	bd38      	pop	{r3, r4, r5, pc}
  406590:	4618      	mov	r0, r3
  406592:	f001 f8e7 	bl	407764 <__sinit>
  406596:	e7c2      	b.n	40651e <__swsetup_r+0x12>
  406598:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40659a:	b151      	cbz	r1, 4065b2 <__swsetup_r+0xa6>
  40659c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4065a0:	4299      	cmp	r1, r3
  4065a2:	d004      	beq.n	4065ae <__swsetup_r+0xa2>
  4065a4:	4628      	mov	r0, r5
  4065a6:	f001 fa03 	bl	4079b0 <_free_r>
  4065aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4065ae:	2300      	movs	r3, #0
  4065b0:	6323      	str	r3, [r4, #48]	; 0x30
  4065b2:	2300      	movs	r3, #0
  4065b4:	6920      	ldr	r0, [r4, #16]
  4065b6:	6063      	str	r3, [r4, #4]
  4065b8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4065bc:	6020      	str	r0, [r4, #0]
  4065be:	e7c5      	b.n	40654c <__swsetup_r+0x40>
  4065c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4065c4:	2309      	movs	r3, #9
  4065c6:	602b      	str	r3, [r5, #0]
  4065c8:	f04f 30ff 	mov.w	r0, #4294967295
  4065cc:	81a2      	strh	r2, [r4, #12]
  4065ce:	bd38      	pop	{r3, r4, r5, pc}
  4065d0:	20400024 	.word	0x20400024

004065d4 <register_fini>:
  4065d4:	4b02      	ldr	r3, [pc, #8]	; (4065e0 <register_fini+0xc>)
  4065d6:	b113      	cbz	r3, 4065de <register_fini+0xa>
  4065d8:	4802      	ldr	r0, [pc, #8]	; (4065e4 <register_fini+0x10>)
  4065da:	f000 b805 	b.w	4065e8 <atexit>
  4065de:	4770      	bx	lr
  4065e0:	00000000 	.word	0x00000000
  4065e4:	004077d5 	.word	0x004077d5

004065e8 <atexit>:
  4065e8:	2300      	movs	r3, #0
  4065ea:	4601      	mov	r1, r0
  4065ec:	461a      	mov	r2, r3
  4065ee:	4618      	mov	r0, r3
  4065f0:	f002 bbda 	b.w	408da8 <__register_exitproc>

004065f4 <quorem>:
  4065f4:	6902      	ldr	r2, [r0, #16]
  4065f6:	690b      	ldr	r3, [r1, #16]
  4065f8:	4293      	cmp	r3, r2
  4065fa:	f300 808d 	bgt.w	406718 <quorem+0x124>
  4065fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406602:	f103 38ff 	add.w	r8, r3, #4294967295
  406606:	f101 0714 	add.w	r7, r1, #20
  40660a:	f100 0b14 	add.w	fp, r0, #20
  40660e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  406612:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  406616:	ea4f 0488 	mov.w	r4, r8, lsl #2
  40661a:	b083      	sub	sp, #12
  40661c:	3201      	adds	r2, #1
  40661e:	fbb3 f9f2 	udiv	r9, r3, r2
  406622:	eb0b 0304 	add.w	r3, fp, r4
  406626:	9400      	str	r4, [sp, #0]
  406628:	eb07 0a04 	add.w	sl, r7, r4
  40662c:	9301      	str	r3, [sp, #4]
  40662e:	f1b9 0f00 	cmp.w	r9, #0
  406632:	d039      	beq.n	4066a8 <quorem+0xb4>
  406634:	2500      	movs	r5, #0
  406636:	462e      	mov	r6, r5
  406638:	46bc      	mov	ip, r7
  40663a:	46de      	mov	lr, fp
  40663c:	f85c 4b04 	ldr.w	r4, [ip], #4
  406640:	f8de 3000 	ldr.w	r3, [lr]
  406644:	b2a2      	uxth	r2, r4
  406646:	fb09 5502 	mla	r5, r9, r2, r5
  40664a:	0c22      	lsrs	r2, r4, #16
  40664c:	0c2c      	lsrs	r4, r5, #16
  40664e:	fb09 4202 	mla	r2, r9, r2, r4
  406652:	b2ad      	uxth	r5, r5
  406654:	1b75      	subs	r5, r6, r5
  406656:	b296      	uxth	r6, r2
  406658:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  40665c:	fa15 f383 	uxtah	r3, r5, r3
  406660:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406664:	b29b      	uxth	r3, r3
  406666:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40666a:	45e2      	cmp	sl, ip
  40666c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  406670:	f84e 3b04 	str.w	r3, [lr], #4
  406674:	ea4f 4626 	mov.w	r6, r6, asr #16
  406678:	d2e0      	bcs.n	40663c <quorem+0x48>
  40667a:	9b00      	ldr	r3, [sp, #0]
  40667c:	f85b 3003 	ldr.w	r3, [fp, r3]
  406680:	b993      	cbnz	r3, 4066a8 <quorem+0xb4>
  406682:	9c01      	ldr	r4, [sp, #4]
  406684:	1f23      	subs	r3, r4, #4
  406686:	459b      	cmp	fp, r3
  406688:	d20c      	bcs.n	4066a4 <quorem+0xb0>
  40668a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40668e:	b94b      	cbnz	r3, 4066a4 <quorem+0xb0>
  406690:	f1a4 0308 	sub.w	r3, r4, #8
  406694:	e002      	b.n	40669c <quorem+0xa8>
  406696:	681a      	ldr	r2, [r3, #0]
  406698:	3b04      	subs	r3, #4
  40669a:	b91a      	cbnz	r2, 4066a4 <quorem+0xb0>
  40669c:	459b      	cmp	fp, r3
  40669e:	f108 38ff 	add.w	r8, r8, #4294967295
  4066a2:	d3f8      	bcc.n	406696 <quorem+0xa2>
  4066a4:	f8c0 8010 	str.w	r8, [r0, #16]
  4066a8:	4604      	mov	r4, r0
  4066aa:	f001 ff73 	bl	408594 <__mcmp>
  4066ae:	2800      	cmp	r0, #0
  4066b0:	db2e      	blt.n	406710 <quorem+0x11c>
  4066b2:	f109 0901 	add.w	r9, r9, #1
  4066b6:	465d      	mov	r5, fp
  4066b8:	2300      	movs	r3, #0
  4066ba:	f857 1b04 	ldr.w	r1, [r7], #4
  4066be:	6828      	ldr	r0, [r5, #0]
  4066c0:	b28a      	uxth	r2, r1
  4066c2:	1a9a      	subs	r2, r3, r2
  4066c4:	0c0b      	lsrs	r3, r1, #16
  4066c6:	fa12 f280 	uxtah	r2, r2, r0
  4066ca:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4066ce:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4066d2:	b292      	uxth	r2, r2
  4066d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4066d8:	45ba      	cmp	sl, r7
  4066da:	f845 2b04 	str.w	r2, [r5], #4
  4066de:	ea4f 4323 	mov.w	r3, r3, asr #16
  4066e2:	d2ea      	bcs.n	4066ba <quorem+0xc6>
  4066e4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4066e8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4066ec:	b982      	cbnz	r2, 406710 <quorem+0x11c>
  4066ee:	1f1a      	subs	r2, r3, #4
  4066f0:	4593      	cmp	fp, r2
  4066f2:	d20b      	bcs.n	40670c <quorem+0x118>
  4066f4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4066f8:	b942      	cbnz	r2, 40670c <quorem+0x118>
  4066fa:	3b08      	subs	r3, #8
  4066fc:	e002      	b.n	406704 <quorem+0x110>
  4066fe:	681a      	ldr	r2, [r3, #0]
  406700:	3b04      	subs	r3, #4
  406702:	b91a      	cbnz	r2, 40670c <quorem+0x118>
  406704:	459b      	cmp	fp, r3
  406706:	f108 38ff 	add.w	r8, r8, #4294967295
  40670a:	d3f8      	bcc.n	4066fe <quorem+0x10a>
  40670c:	f8c4 8010 	str.w	r8, [r4, #16]
  406710:	4648      	mov	r0, r9
  406712:	b003      	add	sp, #12
  406714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406718:	2000      	movs	r0, #0
  40671a:	4770      	bx	lr
  40671c:	0000      	movs	r0, r0
	...

00406720 <_dtoa_r>:
  406720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406724:	6c01      	ldr	r1, [r0, #64]	; 0x40
  406726:	b09b      	sub	sp, #108	; 0x6c
  406728:	4604      	mov	r4, r0
  40672a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  40672c:	4692      	mov	sl, r2
  40672e:	469b      	mov	fp, r3
  406730:	b141      	cbz	r1, 406744 <_dtoa_r+0x24>
  406732:	6c42      	ldr	r2, [r0, #68]	; 0x44
  406734:	604a      	str	r2, [r1, #4]
  406736:	2301      	movs	r3, #1
  406738:	4093      	lsls	r3, r2
  40673a:	608b      	str	r3, [r1, #8]
  40673c:	f001 fd52 	bl	4081e4 <_Bfree>
  406740:	2300      	movs	r3, #0
  406742:	6423      	str	r3, [r4, #64]	; 0x40
  406744:	f1bb 0f00 	cmp.w	fp, #0
  406748:	465d      	mov	r5, fp
  40674a:	db35      	blt.n	4067b8 <_dtoa_r+0x98>
  40674c:	2300      	movs	r3, #0
  40674e:	6033      	str	r3, [r6, #0]
  406750:	4b9d      	ldr	r3, [pc, #628]	; (4069c8 <_dtoa_r+0x2a8>)
  406752:	43ab      	bics	r3, r5
  406754:	d015      	beq.n	406782 <_dtoa_r+0x62>
  406756:	4650      	mov	r0, sl
  406758:	4659      	mov	r1, fp
  40675a:	2200      	movs	r2, #0
  40675c:	2300      	movs	r3, #0
  40675e:	f003 f89b 	bl	409898 <__aeabi_dcmpeq>
  406762:	4680      	mov	r8, r0
  406764:	2800      	cmp	r0, #0
  406766:	d02d      	beq.n	4067c4 <_dtoa_r+0xa4>
  406768:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40676a:	2301      	movs	r3, #1
  40676c:	6013      	str	r3, [r2, #0]
  40676e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406770:	2b00      	cmp	r3, #0
  406772:	f000 80bd 	beq.w	4068f0 <_dtoa_r+0x1d0>
  406776:	4895      	ldr	r0, [pc, #596]	; (4069cc <_dtoa_r+0x2ac>)
  406778:	6018      	str	r0, [r3, #0]
  40677a:	3801      	subs	r0, #1
  40677c:	b01b      	add	sp, #108	; 0x6c
  40677e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406782:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406784:	f242 730f 	movw	r3, #9999	; 0x270f
  406788:	6013      	str	r3, [r2, #0]
  40678a:	f1ba 0f00 	cmp.w	sl, #0
  40678e:	d10d      	bne.n	4067ac <_dtoa_r+0x8c>
  406790:	f3c5 0513 	ubfx	r5, r5, #0, #20
  406794:	b955      	cbnz	r5, 4067ac <_dtoa_r+0x8c>
  406796:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406798:	488d      	ldr	r0, [pc, #564]	; (4069d0 <_dtoa_r+0x2b0>)
  40679a:	2b00      	cmp	r3, #0
  40679c:	d0ee      	beq.n	40677c <_dtoa_r+0x5c>
  40679e:	f100 0308 	add.w	r3, r0, #8
  4067a2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  4067a4:	6013      	str	r3, [r2, #0]
  4067a6:	b01b      	add	sp, #108	; 0x6c
  4067a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4067ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4067ae:	4889      	ldr	r0, [pc, #548]	; (4069d4 <_dtoa_r+0x2b4>)
  4067b0:	2b00      	cmp	r3, #0
  4067b2:	d0e3      	beq.n	40677c <_dtoa_r+0x5c>
  4067b4:	1cc3      	adds	r3, r0, #3
  4067b6:	e7f4      	b.n	4067a2 <_dtoa_r+0x82>
  4067b8:	2301      	movs	r3, #1
  4067ba:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4067be:	6033      	str	r3, [r6, #0]
  4067c0:	46ab      	mov	fp, r5
  4067c2:	e7c5      	b.n	406750 <_dtoa_r+0x30>
  4067c4:	aa18      	add	r2, sp, #96	; 0x60
  4067c6:	ab19      	add	r3, sp, #100	; 0x64
  4067c8:	9201      	str	r2, [sp, #4]
  4067ca:	9300      	str	r3, [sp, #0]
  4067cc:	4652      	mov	r2, sl
  4067ce:	465b      	mov	r3, fp
  4067d0:	4620      	mov	r0, r4
  4067d2:	f001 ff7f 	bl	4086d4 <__d2b>
  4067d6:	0d2b      	lsrs	r3, r5, #20
  4067d8:	4681      	mov	r9, r0
  4067da:	d071      	beq.n	4068c0 <_dtoa_r+0x1a0>
  4067dc:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4067e0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4067e4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4067e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4067ea:	4650      	mov	r0, sl
  4067ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4067f0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4067f4:	2200      	movs	r2, #0
  4067f6:	4b78      	ldr	r3, [pc, #480]	; (4069d8 <_dtoa_r+0x2b8>)
  4067f8:	f002 fc32 	bl	409060 <__aeabi_dsub>
  4067fc:	a36c      	add	r3, pc, #432	; (adr r3, 4069b0 <_dtoa_r+0x290>)
  4067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
  406802:	f002 fde1 	bl	4093c8 <__aeabi_dmul>
  406806:	a36c      	add	r3, pc, #432	; (adr r3, 4069b8 <_dtoa_r+0x298>)
  406808:	e9d3 2300 	ldrd	r2, r3, [r3]
  40680c:	f002 fc2a 	bl	409064 <__adddf3>
  406810:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406814:	4630      	mov	r0, r6
  406816:	f002 fd71 	bl	4092fc <__aeabi_i2d>
  40681a:	a369      	add	r3, pc, #420	; (adr r3, 4069c0 <_dtoa_r+0x2a0>)
  40681c:	e9d3 2300 	ldrd	r2, r3, [r3]
  406820:	f002 fdd2 	bl	4093c8 <__aeabi_dmul>
  406824:	4602      	mov	r2, r0
  406826:	460b      	mov	r3, r1
  406828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40682c:	f002 fc1a 	bl	409064 <__adddf3>
  406830:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406834:	f003 f878 	bl	409928 <__aeabi_d2iz>
  406838:	2200      	movs	r2, #0
  40683a:	9002      	str	r0, [sp, #8]
  40683c:	2300      	movs	r3, #0
  40683e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406842:	f003 f833 	bl	4098ac <__aeabi_dcmplt>
  406846:	2800      	cmp	r0, #0
  406848:	f040 8173 	bne.w	406b32 <_dtoa_r+0x412>
  40684c:	9d02      	ldr	r5, [sp, #8]
  40684e:	2d16      	cmp	r5, #22
  406850:	f200 815d 	bhi.w	406b0e <_dtoa_r+0x3ee>
  406854:	4b61      	ldr	r3, [pc, #388]	; (4069dc <_dtoa_r+0x2bc>)
  406856:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  40685a:	e9d3 0100 	ldrd	r0, r1, [r3]
  40685e:	4652      	mov	r2, sl
  406860:	465b      	mov	r3, fp
  406862:	f003 f841 	bl	4098e8 <__aeabi_dcmpgt>
  406866:	2800      	cmp	r0, #0
  406868:	f000 81c5 	beq.w	406bf6 <_dtoa_r+0x4d6>
  40686c:	1e6b      	subs	r3, r5, #1
  40686e:	9302      	str	r3, [sp, #8]
  406870:	2300      	movs	r3, #0
  406872:	930e      	str	r3, [sp, #56]	; 0x38
  406874:	1bbf      	subs	r7, r7, r6
  406876:	1e7b      	subs	r3, r7, #1
  406878:	9306      	str	r3, [sp, #24]
  40687a:	f100 8154 	bmi.w	406b26 <_dtoa_r+0x406>
  40687e:	2300      	movs	r3, #0
  406880:	9308      	str	r3, [sp, #32]
  406882:	9b02      	ldr	r3, [sp, #8]
  406884:	2b00      	cmp	r3, #0
  406886:	f2c0 8145 	blt.w	406b14 <_dtoa_r+0x3f4>
  40688a:	9a06      	ldr	r2, [sp, #24]
  40688c:	930d      	str	r3, [sp, #52]	; 0x34
  40688e:	4611      	mov	r1, r2
  406890:	4419      	add	r1, r3
  406892:	2300      	movs	r3, #0
  406894:	9106      	str	r1, [sp, #24]
  406896:	930c      	str	r3, [sp, #48]	; 0x30
  406898:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40689a:	2b09      	cmp	r3, #9
  40689c:	d82a      	bhi.n	4068f4 <_dtoa_r+0x1d4>
  40689e:	2b05      	cmp	r3, #5
  4068a0:	f340 865b 	ble.w	40755a <_dtoa_r+0xe3a>
  4068a4:	3b04      	subs	r3, #4
  4068a6:	9324      	str	r3, [sp, #144]	; 0x90
  4068a8:	2500      	movs	r5, #0
  4068aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4068ac:	3b02      	subs	r3, #2
  4068ae:	2b03      	cmp	r3, #3
  4068b0:	f200 8642 	bhi.w	407538 <_dtoa_r+0xe18>
  4068b4:	e8df f013 	tbh	[pc, r3, lsl #1]
  4068b8:	02c903d4 	.word	0x02c903d4
  4068bc:	046103df 	.word	0x046103df
  4068c0:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4068c2:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4068c4:	443e      	add	r6, r7
  4068c6:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4068ca:	2b20      	cmp	r3, #32
  4068cc:	f340 818e 	ble.w	406bec <_dtoa_r+0x4cc>
  4068d0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4068d4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4068d8:	409d      	lsls	r5, r3
  4068da:	fa2a f000 	lsr.w	r0, sl, r0
  4068de:	4328      	orrs	r0, r5
  4068e0:	f002 fcfc 	bl	4092dc <__aeabi_ui2d>
  4068e4:	2301      	movs	r3, #1
  4068e6:	3e01      	subs	r6, #1
  4068e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4068ec:	9314      	str	r3, [sp, #80]	; 0x50
  4068ee:	e781      	b.n	4067f4 <_dtoa_r+0xd4>
  4068f0:	483b      	ldr	r0, [pc, #236]	; (4069e0 <_dtoa_r+0x2c0>)
  4068f2:	e743      	b.n	40677c <_dtoa_r+0x5c>
  4068f4:	2100      	movs	r1, #0
  4068f6:	6461      	str	r1, [r4, #68]	; 0x44
  4068f8:	4620      	mov	r0, r4
  4068fa:	9125      	str	r1, [sp, #148]	; 0x94
  4068fc:	f001 fc4c 	bl	408198 <_Balloc>
  406900:	f04f 33ff 	mov.w	r3, #4294967295
  406904:	930a      	str	r3, [sp, #40]	; 0x28
  406906:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406908:	930f      	str	r3, [sp, #60]	; 0x3c
  40690a:	2301      	movs	r3, #1
  40690c:	9004      	str	r0, [sp, #16]
  40690e:	6420      	str	r0, [r4, #64]	; 0x40
  406910:	9224      	str	r2, [sp, #144]	; 0x90
  406912:	930b      	str	r3, [sp, #44]	; 0x2c
  406914:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406916:	2b00      	cmp	r3, #0
  406918:	f2c0 80d9 	blt.w	406ace <_dtoa_r+0x3ae>
  40691c:	9a02      	ldr	r2, [sp, #8]
  40691e:	2a0e      	cmp	r2, #14
  406920:	f300 80d5 	bgt.w	406ace <_dtoa_r+0x3ae>
  406924:	4b2d      	ldr	r3, [pc, #180]	; (4069dc <_dtoa_r+0x2bc>)
  406926:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40692a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40692e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406932:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406934:	2b00      	cmp	r3, #0
  406936:	f2c0 83ba 	blt.w	4070ae <_dtoa_r+0x98e>
  40693a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  40693e:	4650      	mov	r0, sl
  406940:	462a      	mov	r2, r5
  406942:	4633      	mov	r3, r6
  406944:	4659      	mov	r1, fp
  406946:	f002 fe69 	bl	40961c <__aeabi_ddiv>
  40694a:	f002 ffed 	bl	409928 <__aeabi_d2iz>
  40694e:	4680      	mov	r8, r0
  406950:	f002 fcd4 	bl	4092fc <__aeabi_i2d>
  406954:	462a      	mov	r2, r5
  406956:	4633      	mov	r3, r6
  406958:	f002 fd36 	bl	4093c8 <__aeabi_dmul>
  40695c:	460b      	mov	r3, r1
  40695e:	4602      	mov	r2, r0
  406960:	4659      	mov	r1, fp
  406962:	4650      	mov	r0, sl
  406964:	f002 fb7c 	bl	409060 <__aeabi_dsub>
  406968:	9d04      	ldr	r5, [sp, #16]
  40696a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  40696e:	702b      	strb	r3, [r5, #0]
  406970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406972:	2b01      	cmp	r3, #1
  406974:	4606      	mov	r6, r0
  406976:	460f      	mov	r7, r1
  406978:	f105 0501 	add.w	r5, r5, #1
  40697c:	d068      	beq.n	406a50 <_dtoa_r+0x330>
  40697e:	2200      	movs	r2, #0
  406980:	4b18      	ldr	r3, [pc, #96]	; (4069e4 <_dtoa_r+0x2c4>)
  406982:	f002 fd21 	bl	4093c8 <__aeabi_dmul>
  406986:	2200      	movs	r2, #0
  406988:	2300      	movs	r3, #0
  40698a:	4606      	mov	r6, r0
  40698c:	460f      	mov	r7, r1
  40698e:	f002 ff83 	bl	409898 <__aeabi_dcmpeq>
  406992:	2800      	cmp	r0, #0
  406994:	f040 8088 	bne.w	406aa8 <_dtoa_r+0x388>
  406998:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  40699c:	f04f 0a00 	mov.w	sl, #0
  4069a0:	f8df b040 	ldr.w	fp, [pc, #64]	; 4069e4 <_dtoa_r+0x2c4>
  4069a4:	940c      	str	r4, [sp, #48]	; 0x30
  4069a6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4069aa:	e028      	b.n	4069fe <_dtoa_r+0x2de>
  4069ac:	f3af 8000 	nop.w
  4069b0:	636f4361 	.word	0x636f4361
  4069b4:	3fd287a7 	.word	0x3fd287a7
  4069b8:	8b60c8b3 	.word	0x8b60c8b3
  4069bc:	3fc68a28 	.word	0x3fc68a28
  4069c0:	509f79fb 	.word	0x509f79fb
  4069c4:	3fd34413 	.word	0x3fd34413
  4069c8:	7ff00000 	.word	0x7ff00000
  4069cc:	0040a0c5 	.word	0x0040a0c5
  4069d0:	0040a108 	.word	0x0040a108
  4069d4:	0040a114 	.word	0x0040a114
  4069d8:	3ff80000 	.word	0x3ff80000
  4069dc:	0040a150 	.word	0x0040a150
  4069e0:	0040a0c4 	.word	0x0040a0c4
  4069e4:	40240000 	.word	0x40240000
  4069e8:	f002 fcee 	bl	4093c8 <__aeabi_dmul>
  4069ec:	2200      	movs	r2, #0
  4069ee:	2300      	movs	r3, #0
  4069f0:	4606      	mov	r6, r0
  4069f2:	460f      	mov	r7, r1
  4069f4:	f002 ff50 	bl	409898 <__aeabi_dcmpeq>
  4069f8:	2800      	cmp	r0, #0
  4069fa:	f040 83c1 	bne.w	407180 <_dtoa_r+0xa60>
  4069fe:	4642      	mov	r2, r8
  406a00:	464b      	mov	r3, r9
  406a02:	4630      	mov	r0, r6
  406a04:	4639      	mov	r1, r7
  406a06:	f002 fe09 	bl	40961c <__aeabi_ddiv>
  406a0a:	f002 ff8d 	bl	409928 <__aeabi_d2iz>
  406a0e:	4604      	mov	r4, r0
  406a10:	f002 fc74 	bl	4092fc <__aeabi_i2d>
  406a14:	4642      	mov	r2, r8
  406a16:	464b      	mov	r3, r9
  406a18:	f002 fcd6 	bl	4093c8 <__aeabi_dmul>
  406a1c:	4602      	mov	r2, r0
  406a1e:	460b      	mov	r3, r1
  406a20:	4630      	mov	r0, r6
  406a22:	4639      	mov	r1, r7
  406a24:	f002 fb1c 	bl	409060 <__aeabi_dsub>
  406a28:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406a2c:	9e04      	ldr	r6, [sp, #16]
  406a2e:	f805 eb01 	strb.w	lr, [r5], #1
  406a32:	eba5 0e06 	sub.w	lr, r5, r6
  406a36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406a38:	45b6      	cmp	lr, r6
  406a3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406a3e:	4652      	mov	r2, sl
  406a40:	465b      	mov	r3, fp
  406a42:	d1d1      	bne.n	4069e8 <_dtoa_r+0x2c8>
  406a44:	46a0      	mov	r8, r4
  406a46:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406a4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406a4c:	4606      	mov	r6, r0
  406a4e:	460f      	mov	r7, r1
  406a50:	4632      	mov	r2, r6
  406a52:	463b      	mov	r3, r7
  406a54:	4630      	mov	r0, r6
  406a56:	4639      	mov	r1, r7
  406a58:	f002 fb04 	bl	409064 <__adddf3>
  406a5c:	4606      	mov	r6, r0
  406a5e:	460f      	mov	r7, r1
  406a60:	4602      	mov	r2, r0
  406a62:	460b      	mov	r3, r1
  406a64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406a68:	f002 ff20 	bl	4098ac <__aeabi_dcmplt>
  406a6c:	b948      	cbnz	r0, 406a82 <_dtoa_r+0x362>
  406a6e:	4632      	mov	r2, r6
  406a70:	463b      	mov	r3, r7
  406a72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406a76:	f002 ff0f 	bl	409898 <__aeabi_dcmpeq>
  406a7a:	b1a8      	cbz	r0, 406aa8 <_dtoa_r+0x388>
  406a7c:	f018 0f01 	tst.w	r8, #1
  406a80:	d012      	beq.n	406aa8 <_dtoa_r+0x388>
  406a82:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406a86:	9a04      	ldr	r2, [sp, #16]
  406a88:	1e6b      	subs	r3, r5, #1
  406a8a:	e004      	b.n	406a96 <_dtoa_r+0x376>
  406a8c:	429a      	cmp	r2, r3
  406a8e:	f000 8401 	beq.w	407294 <_dtoa_r+0xb74>
  406a92:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  406a96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406a9a:	f103 0501 	add.w	r5, r3, #1
  406a9e:	d0f5      	beq.n	406a8c <_dtoa_r+0x36c>
  406aa0:	f108 0801 	add.w	r8, r8, #1
  406aa4:	f883 8000 	strb.w	r8, [r3]
  406aa8:	4649      	mov	r1, r9
  406aaa:	4620      	mov	r0, r4
  406aac:	f001 fb9a 	bl	4081e4 <_Bfree>
  406ab0:	2200      	movs	r2, #0
  406ab2:	9b02      	ldr	r3, [sp, #8]
  406ab4:	702a      	strb	r2, [r5, #0]
  406ab6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406ab8:	3301      	adds	r3, #1
  406aba:	6013      	str	r3, [r2, #0]
  406abc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406abe:	2b00      	cmp	r3, #0
  406ac0:	f000 839e 	beq.w	407200 <_dtoa_r+0xae0>
  406ac4:	9804      	ldr	r0, [sp, #16]
  406ac6:	601d      	str	r5, [r3, #0]
  406ac8:	b01b      	add	sp, #108	; 0x6c
  406aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406ad0:	2a00      	cmp	r2, #0
  406ad2:	d03e      	beq.n	406b52 <_dtoa_r+0x432>
  406ad4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406ad6:	2a01      	cmp	r2, #1
  406ad8:	f340 8311 	ble.w	4070fe <_dtoa_r+0x9de>
  406adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406ae0:	1e5f      	subs	r7, r3, #1
  406ae2:	42ba      	cmp	r2, r7
  406ae4:	f2c0 838f 	blt.w	407206 <_dtoa_r+0xae6>
  406ae8:	1bd7      	subs	r7, r2, r7
  406aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406aec:	2b00      	cmp	r3, #0
  406aee:	f2c0 848b 	blt.w	407408 <_dtoa_r+0xce8>
  406af2:	9d08      	ldr	r5, [sp, #32]
  406af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406af6:	9a08      	ldr	r2, [sp, #32]
  406af8:	441a      	add	r2, r3
  406afa:	9208      	str	r2, [sp, #32]
  406afc:	9a06      	ldr	r2, [sp, #24]
  406afe:	2101      	movs	r1, #1
  406b00:	441a      	add	r2, r3
  406b02:	4620      	mov	r0, r4
  406b04:	9206      	str	r2, [sp, #24]
  406b06:	f001 fc07 	bl	408318 <__i2b>
  406b0a:	4606      	mov	r6, r0
  406b0c:	e024      	b.n	406b58 <_dtoa_r+0x438>
  406b0e:	2301      	movs	r3, #1
  406b10:	930e      	str	r3, [sp, #56]	; 0x38
  406b12:	e6af      	b.n	406874 <_dtoa_r+0x154>
  406b14:	9a08      	ldr	r2, [sp, #32]
  406b16:	9b02      	ldr	r3, [sp, #8]
  406b18:	1ad2      	subs	r2, r2, r3
  406b1a:	425b      	negs	r3, r3
  406b1c:	930c      	str	r3, [sp, #48]	; 0x30
  406b1e:	2300      	movs	r3, #0
  406b20:	9208      	str	r2, [sp, #32]
  406b22:	930d      	str	r3, [sp, #52]	; 0x34
  406b24:	e6b8      	b.n	406898 <_dtoa_r+0x178>
  406b26:	f1c7 0301 	rsb	r3, r7, #1
  406b2a:	9308      	str	r3, [sp, #32]
  406b2c:	2300      	movs	r3, #0
  406b2e:	9306      	str	r3, [sp, #24]
  406b30:	e6a7      	b.n	406882 <_dtoa_r+0x162>
  406b32:	9d02      	ldr	r5, [sp, #8]
  406b34:	4628      	mov	r0, r5
  406b36:	f002 fbe1 	bl	4092fc <__aeabi_i2d>
  406b3a:	4602      	mov	r2, r0
  406b3c:	460b      	mov	r3, r1
  406b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406b42:	f002 fea9 	bl	409898 <__aeabi_dcmpeq>
  406b46:	2800      	cmp	r0, #0
  406b48:	f47f ae80 	bne.w	40684c <_dtoa_r+0x12c>
  406b4c:	1e6b      	subs	r3, r5, #1
  406b4e:	9302      	str	r3, [sp, #8]
  406b50:	e67c      	b.n	40684c <_dtoa_r+0x12c>
  406b52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406b54:	9d08      	ldr	r5, [sp, #32]
  406b56:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406b58:	2d00      	cmp	r5, #0
  406b5a:	dd0c      	ble.n	406b76 <_dtoa_r+0x456>
  406b5c:	9906      	ldr	r1, [sp, #24]
  406b5e:	2900      	cmp	r1, #0
  406b60:	460b      	mov	r3, r1
  406b62:	dd08      	ble.n	406b76 <_dtoa_r+0x456>
  406b64:	42a9      	cmp	r1, r5
  406b66:	9a08      	ldr	r2, [sp, #32]
  406b68:	bfa8      	it	ge
  406b6a:	462b      	movge	r3, r5
  406b6c:	1ad2      	subs	r2, r2, r3
  406b6e:	1aed      	subs	r5, r5, r3
  406b70:	1acb      	subs	r3, r1, r3
  406b72:	9208      	str	r2, [sp, #32]
  406b74:	9306      	str	r3, [sp, #24]
  406b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406b78:	b1d3      	cbz	r3, 406bb0 <_dtoa_r+0x490>
  406b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406b7c:	2b00      	cmp	r3, #0
  406b7e:	f000 82b7 	beq.w	4070f0 <_dtoa_r+0x9d0>
  406b82:	2f00      	cmp	r7, #0
  406b84:	dd10      	ble.n	406ba8 <_dtoa_r+0x488>
  406b86:	4631      	mov	r1, r6
  406b88:	463a      	mov	r2, r7
  406b8a:	4620      	mov	r0, r4
  406b8c:	f001 fc60 	bl	408450 <__pow5mult>
  406b90:	464a      	mov	r2, r9
  406b92:	4601      	mov	r1, r0
  406b94:	4606      	mov	r6, r0
  406b96:	4620      	mov	r0, r4
  406b98:	f001 fbc8 	bl	40832c <__multiply>
  406b9c:	4649      	mov	r1, r9
  406b9e:	4680      	mov	r8, r0
  406ba0:	4620      	mov	r0, r4
  406ba2:	f001 fb1f 	bl	4081e4 <_Bfree>
  406ba6:	46c1      	mov	r9, r8
  406ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406baa:	1bda      	subs	r2, r3, r7
  406bac:	f040 82a1 	bne.w	4070f2 <_dtoa_r+0x9d2>
  406bb0:	2101      	movs	r1, #1
  406bb2:	4620      	mov	r0, r4
  406bb4:	f001 fbb0 	bl	408318 <__i2b>
  406bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406bba:	2b00      	cmp	r3, #0
  406bbc:	4680      	mov	r8, r0
  406bbe:	dd1c      	ble.n	406bfa <_dtoa_r+0x4da>
  406bc0:	4601      	mov	r1, r0
  406bc2:	461a      	mov	r2, r3
  406bc4:	4620      	mov	r0, r4
  406bc6:	f001 fc43 	bl	408450 <__pow5mult>
  406bca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406bcc:	2b01      	cmp	r3, #1
  406bce:	4680      	mov	r8, r0
  406bd0:	f340 8254 	ble.w	40707c <_dtoa_r+0x95c>
  406bd4:	2300      	movs	r3, #0
  406bd6:	930c      	str	r3, [sp, #48]	; 0x30
  406bd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406bdc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406be0:	6918      	ldr	r0, [r3, #16]
  406be2:	f001 fb49 	bl	408278 <__hi0bits>
  406be6:	f1c0 0020 	rsb	r0, r0, #32
  406bea:	e010      	b.n	406c0e <_dtoa_r+0x4ee>
  406bec:	f1c3 0520 	rsb	r5, r3, #32
  406bf0:	fa0a f005 	lsl.w	r0, sl, r5
  406bf4:	e674      	b.n	4068e0 <_dtoa_r+0x1c0>
  406bf6:	900e      	str	r0, [sp, #56]	; 0x38
  406bf8:	e63c      	b.n	406874 <_dtoa_r+0x154>
  406bfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406bfc:	2b01      	cmp	r3, #1
  406bfe:	f340 8287 	ble.w	407110 <_dtoa_r+0x9f0>
  406c02:	2300      	movs	r3, #0
  406c04:	930c      	str	r3, [sp, #48]	; 0x30
  406c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406c08:	2001      	movs	r0, #1
  406c0a:	2b00      	cmp	r3, #0
  406c0c:	d1e4      	bne.n	406bd8 <_dtoa_r+0x4b8>
  406c0e:	9a06      	ldr	r2, [sp, #24]
  406c10:	4410      	add	r0, r2
  406c12:	f010 001f 	ands.w	r0, r0, #31
  406c16:	f000 80a1 	beq.w	406d5c <_dtoa_r+0x63c>
  406c1a:	f1c0 0320 	rsb	r3, r0, #32
  406c1e:	2b04      	cmp	r3, #4
  406c20:	f340 849e 	ble.w	407560 <_dtoa_r+0xe40>
  406c24:	9b08      	ldr	r3, [sp, #32]
  406c26:	f1c0 001c 	rsb	r0, r0, #28
  406c2a:	4403      	add	r3, r0
  406c2c:	9308      	str	r3, [sp, #32]
  406c2e:	4613      	mov	r3, r2
  406c30:	4403      	add	r3, r0
  406c32:	4405      	add	r5, r0
  406c34:	9306      	str	r3, [sp, #24]
  406c36:	9b08      	ldr	r3, [sp, #32]
  406c38:	2b00      	cmp	r3, #0
  406c3a:	dd05      	ble.n	406c48 <_dtoa_r+0x528>
  406c3c:	4649      	mov	r1, r9
  406c3e:	461a      	mov	r2, r3
  406c40:	4620      	mov	r0, r4
  406c42:	f001 fc55 	bl	4084f0 <__lshift>
  406c46:	4681      	mov	r9, r0
  406c48:	9b06      	ldr	r3, [sp, #24]
  406c4a:	2b00      	cmp	r3, #0
  406c4c:	dd05      	ble.n	406c5a <_dtoa_r+0x53a>
  406c4e:	4641      	mov	r1, r8
  406c50:	461a      	mov	r2, r3
  406c52:	4620      	mov	r0, r4
  406c54:	f001 fc4c 	bl	4084f0 <__lshift>
  406c58:	4680      	mov	r8, r0
  406c5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406c5c:	2b00      	cmp	r3, #0
  406c5e:	f040 8086 	bne.w	406d6e <_dtoa_r+0x64e>
  406c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c64:	2b00      	cmp	r3, #0
  406c66:	f340 8266 	ble.w	407136 <_dtoa_r+0xa16>
  406c6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406c6c:	2b00      	cmp	r3, #0
  406c6e:	f000 8098 	beq.w	406da2 <_dtoa_r+0x682>
  406c72:	2d00      	cmp	r5, #0
  406c74:	dd05      	ble.n	406c82 <_dtoa_r+0x562>
  406c76:	4631      	mov	r1, r6
  406c78:	462a      	mov	r2, r5
  406c7a:	4620      	mov	r0, r4
  406c7c:	f001 fc38 	bl	4084f0 <__lshift>
  406c80:	4606      	mov	r6, r0
  406c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406c84:	2b00      	cmp	r3, #0
  406c86:	f040 8337 	bne.w	4072f8 <_dtoa_r+0xbd8>
  406c8a:	9606      	str	r6, [sp, #24]
  406c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c8e:	9a04      	ldr	r2, [sp, #16]
  406c90:	f8dd b018 	ldr.w	fp, [sp, #24]
  406c94:	3b01      	subs	r3, #1
  406c96:	18d3      	adds	r3, r2, r3
  406c98:	930b      	str	r3, [sp, #44]	; 0x2c
  406c9a:	f00a 0301 	and.w	r3, sl, #1
  406c9e:	930c      	str	r3, [sp, #48]	; 0x30
  406ca0:	4617      	mov	r7, r2
  406ca2:	46c2      	mov	sl, r8
  406ca4:	4651      	mov	r1, sl
  406ca6:	4648      	mov	r0, r9
  406ca8:	f7ff fca4 	bl	4065f4 <quorem>
  406cac:	4631      	mov	r1, r6
  406cae:	4605      	mov	r5, r0
  406cb0:	4648      	mov	r0, r9
  406cb2:	f001 fc6f 	bl	408594 <__mcmp>
  406cb6:	465a      	mov	r2, fp
  406cb8:	900a      	str	r0, [sp, #40]	; 0x28
  406cba:	4651      	mov	r1, sl
  406cbc:	4620      	mov	r0, r4
  406cbe:	f001 fc85 	bl	4085cc <__mdiff>
  406cc2:	68c2      	ldr	r2, [r0, #12]
  406cc4:	4680      	mov	r8, r0
  406cc6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  406cca:	2a00      	cmp	r2, #0
  406ccc:	f040 822b 	bne.w	407126 <_dtoa_r+0xa06>
  406cd0:	4601      	mov	r1, r0
  406cd2:	4648      	mov	r0, r9
  406cd4:	9308      	str	r3, [sp, #32]
  406cd6:	f001 fc5d 	bl	408594 <__mcmp>
  406cda:	4641      	mov	r1, r8
  406cdc:	9006      	str	r0, [sp, #24]
  406cde:	4620      	mov	r0, r4
  406ce0:	f001 fa80 	bl	4081e4 <_Bfree>
  406ce4:	9a06      	ldr	r2, [sp, #24]
  406ce6:	9b08      	ldr	r3, [sp, #32]
  406ce8:	b932      	cbnz	r2, 406cf8 <_dtoa_r+0x5d8>
  406cea:	9924      	ldr	r1, [sp, #144]	; 0x90
  406cec:	b921      	cbnz	r1, 406cf8 <_dtoa_r+0x5d8>
  406cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406cf0:	2a00      	cmp	r2, #0
  406cf2:	f000 83ef 	beq.w	4074d4 <_dtoa_r+0xdb4>
  406cf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406cf8:	990a      	ldr	r1, [sp, #40]	; 0x28
  406cfa:	2900      	cmp	r1, #0
  406cfc:	f2c0 829f 	blt.w	40723e <_dtoa_r+0xb1e>
  406d00:	d105      	bne.n	406d0e <_dtoa_r+0x5ee>
  406d02:	9924      	ldr	r1, [sp, #144]	; 0x90
  406d04:	b919      	cbnz	r1, 406d0e <_dtoa_r+0x5ee>
  406d06:	990c      	ldr	r1, [sp, #48]	; 0x30
  406d08:	2900      	cmp	r1, #0
  406d0a:	f000 8298 	beq.w	40723e <_dtoa_r+0xb1e>
  406d0e:	2a00      	cmp	r2, #0
  406d10:	f300 8306 	bgt.w	407320 <_dtoa_r+0xc00>
  406d14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406d16:	703b      	strb	r3, [r7, #0]
  406d18:	f107 0801 	add.w	r8, r7, #1
  406d1c:	4297      	cmp	r7, r2
  406d1e:	4645      	mov	r5, r8
  406d20:	f000 830c 	beq.w	40733c <_dtoa_r+0xc1c>
  406d24:	4649      	mov	r1, r9
  406d26:	2300      	movs	r3, #0
  406d28:	220a      	movs	r2, #10
  406d2a:	4620      	mov	r0, r4
  406d2c:	f001 fa64 	bl	4081f8 <__multadd>
  406d30:	455e      	cmp	r6, fp
  406d32:	4681      	mov	r9, r0
  406d34:	4631      	mov	r1, r6
  406d36:	f04f 0300 	mov.w	r3, #0
  406d3a:	f04f 020a 	mov.w	r2, #10
  406d3e:	4620      	mov	r0, r4
  406d40:	f000 81eb 	beq.w	40711a <_dtoa_r+0x9fa>
  406d44:	f001 fa58 	bl	4081f8 <__multadd>
  406d48:	4659      	mov	r1, fp
  406d4a:	4606      	mov	r6, r0
  406d4c:	2300      	movs	r3, #0
  406d4e:	220a      	movs	r2, #10
  406d50:	4620      	mov	r0, r4
  406d52:	f001 fa51 	bl	4081f8 <__multadd>
  406d56:	4647      	mov	r7, r8
  406d58:	4683      	mov	fp, r0
  406d5a:	e7a3      	b.n	406ca4 <_dtoa_r+0x584>
  406d5c:	201c      	movs	r0, #28
  406d5e:	9b08      	ldr	r3, [sp, #32]
  406d60:	4403      	add	r3, r0
  406d62:	9308      	str	r3, [sp, #32]
  406d64:	9b06      	ldr	r3, [sp, #24]
  406d66:	4403      	add	r3, r0
  406d68:	4405      	add	r5, r0
  406d6a:	9306      	str	r3, [sp, #24]
  406d6c:	e763      	b.n	406c36 <_dtoa_r+0x516>
  406d6e:	4641      	mov	r1, r8
  406d70:	4648      	mov	r0, r9
  406d72:	f001 fc0f 	bl	408594 <__mcmp>
  406d76:	2800      	cmp	r0, #0
  406d78:	f6bf af73 	bge.w	406c62 <_dtoa_r+0x542>
  406d7c:	9f02      	ldr	r7, [sp, #8]
  406d7e:	4649      	mov	r1, r9
  406d80:	2300      	movs	r3, #0
  406d82:	220a      	movs	r2, #10
  406d84:	4620      	mov	r0, r4
  406d86:	3f01      	subs	r7, #1
  406d88:	9702      	str	r7, [sp, #8]
  406d8a:	f001 fa35 	bl	4081f8 <__multadd>
  406d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406d90:	4681      	mov	r9, r0
  406d92:	2b00      	cmp	r3, #0
  406d94:	f040 83b6 	bne.w	407504 <_dtoa_r+0xde4>
  406d98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406d9a:	2b00      	cmp	r3, #0
  406d9c:	f340 83bf 	ble.w	40751e <_dtoa_r+0xdfe>
  406da0:	930a      	str	r3, [sp, #40]	; 0x28
  406da2:	f8dd b010 	ldr.w	fp, [sp, #16]
  406da6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  406da8:	465d      	mov	r5, fp
  406daa:	e002      	b.n	406db2 <_dtoa_r+0x692>
  406dac:	f001 fa24 	bl	4081f8 <__multadd>
  406db0:	4681      	mov	r9, r0
  406db2:	4641      	mov	r1, r8
  406db4:	4648      	mov	r0, r9
  406db6:	f7ff fc1d 	bl	4065f4 <quorem>
  406dba:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  406dbe:	f805 ab01 	strb.w	sl, [r5], #1
  406dc2:	eba5 030b 	sub.w	r3, r5, fp
  406dc6:	42bb      	cmp	r3, r7
  406dc8:	f04f 020a 	mov.w	r2, #10
  406dcc:	f04f 0300 	mov.w	r3, #0
  406dd0:	4649      	mov	r1, r9
  406dd2:	4620      	mov	r0, r4
  406dd4:	dbea      	blt.n	406dac <_dtoa_r+0x68c>
  406dd6:	9b04      	ldr	r3, [sp, #16]
  406dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  406dda:	2a01      	cmp	r2, #1
  406ddc:	bfac      	ite	ge
  406dde:	189b      	addge	r3, r3, r2
  406de0:	3301      	addlt	r3, #1
  406de2:	461d      	mov	r5, r3
  406de4:	f04f 0b00 	mov.w	fp, #0
  406de8:	4649      	mov	r1, r9
  406dea:	2201      	movs	r2, #1
  406dec:	4620      	mov	r0, r4
  406dee:	f001 fb7f 	bl	4084f0 <__lshift>
  406df2:	4641      	mov	r1, r8
  406df4:	4681      	mov	r9, r0
  406df6:	f001 fbcd 	bl	408594 <__mcmp>
  406dfa:	2800      	cmp	r0, #0
  406dfc:	f340 823d 	ble.w	40727a <_dtoa_r+0xb5a>
  406e00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  406e04:	9904      	ldr	r1, [sp, #16]
  406e06:	1e6b      	subs	r3, r5, #1
  406e08:	e004      	b.n	406e14 <_dtoa_r+0x6f4>
  406e0a:	428b      	cmp	r3, r1
  406e0c:	f000 81ae 	beq.w	40716c <_dtoa_r+0xa4c>
  406e10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  406e14:	2a39      	cmp	r2, #57	; 0x39
  406e16:	f103 0501 	add.w	r5, r3, #1
  406e1a:	d0f6      	beq.n	406e0a <_dtoa_r+0x6ea>
  406e1c:	3201      	adds	r2, #1
  406e1e:	701a      	strb	r2, [r3, #0]
  406e20:	4641      	mov	r1, r8
  406e22:	4620      	mov	r0, r4
  406e24:	f001 f9de 	bl	4081e4 <_Bfree>
  406e28:	2e00      	cmp	r6, #0
  406e2a:	f43f ae3d 	beq.w	406aa8 <_dtoa_r+0x388>
  406e2e:	f1bb 0f00 	cmp.w	fp, #0
  406e32:	d005      	beq.n	406e40 <_dtoa_r+0x720>
  406e34:	45b3      	cmp	fp, r6
  406e36:	d003      	beq.n	406e40 <_dtoa_r+0x720>
  406e38:	4659      	mov	r1, fp
  406e3a:	4620      	mov	r0, r4
  406e3c:	f001 f9d2 	bl	4081e4 <_Bfree>
  406e40:	4631      	mov	r1, r6
  406e42:	4620      	mov	r0, r4
  406e44:	f001 f9ce 	bl	4081e4 <_Bfree>
  406e48:	e62e      	b.n	406aa8 <_dtoa_r+0x388>
  406e4a:	2300      	movs	r3, #0
  406e4c:	930b      	str	r3, [sp, #44]	; 0x2c
  406e4e:	9b02      	ldr	r3, [sp, #8]
  406e50:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406e52:	4413      	add	r3, r2
  406e54:	930f      	str	r3, [sp, #60]	; 0x3c
  406e56:	3301      	adds	r3, #1
  406e58:	2b01      	cmp	r3, #1
  406e5a:	461f      	mov	r7, r3
  406e5c:	461e      	mov	r6, r3
  406e5e:	930a      	str	r3, [sp, #40]	; 0x28
  406e60:	bfb8      	it	lt
  406e62:	2701      	movlt	r7, #1
  406e64:	2100      	movs	r1, #0
  406e66:	2f17      	cmp	r7, #23
  406e68:	6461      	str	r1, [r4, #68]	; 0x44
  406e6a:	d90a      	bls.n	406e82 <_dtoa_r+0x762>
  406e6c:	2201      	movs	r2, #1
  406e6e:	2304      	movs	r3, #4
  406e70:	005b      	lsls	r3, r3, #1
  406e72:	f103 0014 	add.w	r0, r3, #20
  406e76:	4287      	cmp	r7, r0
  406e78:	4611      	mov	r1, r2
  406e7a:	f102 0201 	add.w	r2, r2, #1
  406e7e:	d2f7      	bcs.n	406e70 <_dtoa_r+0x750>
  406e80:	6461      	str	r1, [r4, #68]	; 0x44
  406e82:	4620      	mov	r0, r4
  406e84:	f001 f988 	bl	408198 <_Balloc>
  406e88:	2e0e      	cmp	r6, #14
  406e8a:	9004      	str	r0, [sp, #16]
  406e8c:	6420      	str	r0, [r4, #64]	; 0x40
  406e8e:	f63f ad41 	bhi.w	406914 <_dtoa_r+0x1f4>
  406e92:	2d00      	cmp	r5, #0
  406e94:	f43f ad3e 	beq.w	406914 <_dtoa_r+0x1f4>
  406e98:	9902      	ldr	r1, [sp, #8]
  406e9a:	2900      	cmp	r1, #0
  406e9c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  406ea0:	f340 8202 	ble.w	4072a8 <_dtoa_r+0xb88>
  406ea4:	4bb8      	ldr	r3, [pc, #736]	; (407188 <_dtoa_r+0xa68>)
  406ea6:	f001 020f 	and.w	r2, r1, #15
  406eaa:	110d      	asrs	r5, r1, #4
  406eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406eb0:	06e9      	lsls	r1, r5, #27
  406eb2:	e9d3 6700 	ldrd	r6, r7, [r3]
  406eb6:	f140 81ae 	bpl.w	407216 <_dtoa_r+0xaf6>
  406eba:	4bb4      	ldr	r3, [pc, #720]	; (40718c <_dtoa_r+0xa6c>)
  406ebc:	4650      	mov	r0, sl
  406ebe:	4659      	mov	r1, fp
  406ec0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  406ec4:	f002 fbaa 	bl	40961c <__aeabi_ddiv>
  406ec8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  406ecc:	f005 050f 	and.w	r5, r5, #15
  406ed0:	f04f 0a03 	mov.w	sl, #3
  406ed4:	b18d      	cbz	r5, 406efa <_dtoa_r+0x7da>
  406ed6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40718c <_dtoa_r+0xa6c>
  406eda:	07ea      	lsls	r2, r5, #31
  406edc:	d509      	bpl.n	406ef2 <_dtoa_r+0x7d2>
  406ede:	4630      	mov	r0, r6
  406ee0:	4639      	mov	r1, r7
  406ee2:	e9d8 2300 	ldrd	r2, r3, [r8]
  406ee6:	f002 fa6f 	bl	4093c8 <__aeabi_dmul>
  406eea:	f10a 0a01 	add.w	sl, sl, #1
  406eee:	4606      	mov	r6, r0
  406ef0:	460f      	mov	r7, r1
  406ef2:	106d      	asrs	r5, r5, #1
  406ef4:	f108 0808 	add.w	r8, r8, #8
  406ef8:	d1ef      	bne.n	406eda <_dtoa_r+0x7ba>
  406efa:	463b      	mov	r3, r7
  406efc:	4632      	mov	r2, r6
  406efe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406f02:	f002 fb8b 	bl	40961c <__aeabi_ddiv>
  406f06:	4607      	mov	r7, r0
  406f08:	4688      	mov	r8, r1
  406f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406f0c:	b143      	cbz	r3, 406f20 <_dtoa_r+0x800>
  406f0e:	2200      	movs	r2, #0
  406f10:	4b9f      	ldr	r3, [pc, #636]	; (407190 <_dtoa_r+0xa70>)
  406f12:	4638      	mov	r0, r7
  406f14:	4641      	mov	r1, r8
  406f16:	f002 fcc9 	bl	4098ac <__aeabi_dcmplt>
  406f1a:	2800      	cmp	r0, #0
  406f1c:	f040 8286 	bne.w	40742c <_dtoa_r+0xd0c>
  406f20:	4650      	mov	r0, sl
  406f22:	f002 f9eb 	bl	4092fc <__aeabi_i2d>
  406f26:	463a      	mov	r2, r7
  406f28:	4643      	mov	r3, r8
  406f2a:	f002 fa4d 	bl	4093c8 <__aeabi_dmul>
  406f2e:	4b99      	ldr	r3, [pc, #612]	; (407194 <_dtoa_r+0xa74>)
  406f30:	2200      	movs	r2, #0
  406f32:	f002 f897 	bl	409064 <__adddf3>
  406f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406f38:	4605      	mov	r5, r0
  406f3a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  406f3e:	2b00      	cmp	r3, #0
  406f40:	f000 813e 	beq.w	4071c0 <_dtoa_r+0xaa0>
  406f44:	9b02      	ldr	r3, [sp, #8]
  406f46:	9315      	str	r3, [sp, #84]	; 0x54
  406f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406f4a:	9312      	str	r3, [sp, #72]	; 0x48
  406f4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406f4e:	2b00      	cmp	r3, #0
  406f50:	f000 81fa 	beq.w	407348 <_dtoa_r+0xc28>
  406f54:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406f56:	4b8c      	ldr	r3, [pc, #560]	; (407188 <_dtoa_r+0xa68>)
  406f58:	498f      	ldr	r1, [pc, #572]	; (407198 <_dtoa_r+0xa78>)
  406f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406f5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  406f62:	2000      	movs	r0, #0
  406f64:	f002 fb5a 	bl	40961c <__aeabi_ddiv>
  406f68:	462a      	mov	r2, r5
  406f6a:	4633      	mov	r3, r6
  406f6c:	f002 f878 	bl	409060 <__aeabi_dsub>
  406f70:	4682      	mov	sl, r0
  406f72:	468b      	mov	fp, r1
  406f74:	4638      	mov	r0, r7
  406f76:	4641      	mov	r1, r8
  406f78:	f002 fcd6 	bl	409928 <__aeabi_d2iz>
  406f7c:	4605      	mov	r5, r0
  406f7e:	f002 f9bd 	bl	4092fc <__aeabi_i2d>
  406f82:	4602      	mov	r2, r0
  406f84:	460b      	mov	r3, r1
  406f86:	4638      	mov	r0, r7
  406f88:	4641      	mov	r1, r8
  406f8a:	f002 f869 	bl	409060 <__aeabi_dsub>
  406f8e:	3530      	adds	r5, #48	; 0x30
  406f90:	fa5f f885 	uxtb.w	r8, r5
  406f94:	9d04      	ldr	r5, [sp, #16]
  406f96:	4606      	mov	r6, r0
  406f98:	460f      	mov	r7, r1
  406f9a:	f885 8000 	strb.w	r8, [r5]
  406f9e:	4602      	mov	r2, r0
  406fa0:	460b      	mov	r3, r1
  406fa2:	4650      	mov	r0, sl
  406fa4:	4659      	mov	r1, fp
  406fa6:	3501      	adds	r5, #1
  406fa8:	f002 fc9e 	bl	4098e8 <__aeabi_dcmpgt>
  406fac:	2800      	cmp	r0, #0
  406fae:	d154      	bne.n	40705a <_dtoa_r+0x93a>
  406fb0:	4632      	mov	r2, r6
  406fb2:	463b      	mov	r3, r7
  406fb4:	2000      	movs	r0, #0
  406fb6:	4976      	ldr	r1, [pc, #472]	; (407190 <_dtoa_r+0xa70>)
  406fb8:	f002 f852 	bl	409060 <__aeabi_dsub>
  406fbc:	4602      	mov	r2, r0
  406fbe:	460b      	mov	r3, r1
  406fc0:	4650      	mov	r0, sl
  406fc2:	4659      	mov	r1, fp
  406fc4:	f002 fc90 	bl	4098e8 <__aeabi_dcmpgt>
  406fc8:	2800      	cmp	r0, #0
  406fca:	f040 8270 	bne.w	4074ae <_dtoa_r+0xd8e>
  406fce:	9a12      	ldr	r2, [sp, #72]	; 0x48
  406fd0:	2a01      	cmp	r2, #1
  406fd2:	f000 8111 	beq.w	4071f8 <_dtoa_r+0xad8>
  406fd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  406fd8:	9a04      	ldr	r2, [sp, #16]
  406fda:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  406fde:	4413      	add	r3, r2
  406fe0:	4699      	mov	r9, r3
  406fe2:	e00d      	b.n	407000 <_dtoa_r+0x8e0>
  406fe4:	2000      	movs	r0, #0
  406fe6:	496a      	ldr	r1, [pc, #424]	; (407190 <_dtoa_r+0xa70>)
  406fe8:	f002 f83a 	bl	409060 <__aeabi_dsub>
  406fec:	4652      	mov	r2, sl
  406fee:	465b      	mov	r3, fp
  406ff0:	f002 fc5c 	bl	4098ac <__aeabi_dcmplt>
  406ff4:	2800      	cmp	r0, #0
  406ff6:	f040 8258 	bne.w	4074aa <_dtoa_r+0xd8a>
  406ffa:	454d      	cmp	r5, r9
  406ffc:	f000 80fa 	beq.w	4071f4 <_dtoa_r+0xad4>
  407000:	4650      	mov	r0, sl
  407002:	4659      	mov	r1, fp
  407004:	2200      	movs	r2, #0
  407006:	4b65      	ldr	r3, [pc, #404]	; (40719c <_dtoa_r+0xa7c>)
  407008:	f002 f9de 	bl	4093c8 <__aeabi_dmul>
  40700c:	2200      	movs	r2, #0
  40700e:	4b63      	ldr	r3, [pc, #396]	; (40719c <_dtoa_r+0xa7c>)
  407010:	4682      	mov	sl, r0
  407012:	468b      	mov	fp, r1
  407014:	4630      	mov	r0, r6
  407016:	4639      	mov	r1, r7
  407018:	f002 f9d6 	bl	4093c8 <__aeabi_dmul>
  40701c:	460f      	mov	r7, r1
  40701e:	4606      	mov	r6, r0
  407020:	f002 fc82 	bl	409928 <__aeabi_d2iz>
  407024:	4680      	mov	r8, r0
  407026:	f002 f969 	bl	4092fc <__aeabi_i2d>
  40702a:	4602      	mov	r2, r0
  40702c:	460b      	mov	r3, r1
  40702e:	4630      	mov	r0, r6
  407030:	4639      	mov	r1, r7
  407032:	f002 f815 	bl	409060 <__aeabi_dsub>
  407036:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40703a:	fa5f f888 	uxtb.w	r8, r8
  40703e:	4652      	mov	r2, sl
  407040:	465b      	mov	r3, fp
  407042:	f805 8b01 	strb.w	r8, [r5], #1
  407046:	4606      	mov	r6, r0
  407048:	460f      	mov	r7, r1
  40704a:	f002 fc2f 	bl	4098ac <__aeabi_dcmplt>
  40704e:	4632      	mov	r2, r6
  407050:	463b      	mov	r3, r7
  407052:	2800      	cmp	r0, #0
  407054:	d0c6      	beq.n	406fe4 <_dtoa_r+0x8c4>
  407056:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40705a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40705c:	9302      	str	r3, [sp, #8]
  40705e:	e523      	b.n	406aa8 <_dtoa_r+0x388>
  407060:	2300      	movs	r3, #0
  407062:	930b      	str	r3, [sp, #44]	; 0x2c
  407064:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407066:	2b00      	cmp	r3, #0
  407068:	f340 80dc 	ble.w	407224 <_dtoa_r+0xb04>
  40706c:	461f      	mov	r7, r3
  40706e:	461e      	mov	r6, r3
  407070:	930f      	str	r3, [sp, #60]	; 0x3c
  407072:	930a      	str	r3, [sp, #40]	; 0x28
  407074:	e6f6      	b.n	406e64 <_dtoa_r+0x744>
  407076:	2301      	movs	r3, #1
  407078:	930b      	str	r3, [sp, #44]	; 0x2c
  40707a:	e7f3      	b.n	407064 <_dtoa_r+0x944>
  40707c:	f1ba 0f00 	cmp.w	sl, #0
  407080:	f47f ada8 	bne.w	406bd4 <_dtoa_r+0x4b4>
  407084:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407088:	2b00      	cmp	r3, #0
  40708a:	f47f adba 	bne.w	406c02 <_dtoa_r+0x4e2>
  40708e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407092:	0d3f      	lsrs	r7, r7, #20
  407094:	053f      	lsls	r7, r7, #20
  407096:	2f00      	cmp	r7, #0
  407098:	f000 820d 	beq.w	4074b6 <_dtoa_r+0xd96>
  40709c:	9b08      	ldr	r3, [sp, #32]
  40709e:	3301      	adds	r3, #1
  4070a0:	9308      	str	r3, [sp, #32]
  4070a2:	9b06      	ldr	r3, [sp, #24]
  4070a4:	3301      	adds	r3, #1
  4070a6:	9306      	str	r3, [sp, #24]
  4070a8:	2301      	movs	r3, #1
  4070aa:	930c      	str	r3, [sp, #48]	; 0x30
  4070ac:	e5ab      	b.n	406c06 <_dtoa_r+0x4e6>
  4070ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4070b0:	2b00      	cmp	r3, #0
  4070b2:	f73f ac42 	bgt.w	40693a <_dtoa_r+0x21a>
  4070b6:	f040 8221 	bne.w	4074fc <_dtoa_r+0xddc>
  4070ba:	2200      	movs	r2, #0
  4070bc:	4b38      	ldr	r3, [pc, #224]	; (4071a0 <_dtoa_r+0xa80>)
  4070be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  4070c2:	f002 f981 	bl	4093c8 <__aeabi_dmul>
  4070c6:	4652      	mov	r2, sl
  4070c8:	465b      	mov	r3, fp
  4070ca:	f002 fc03 	bl	4098d4 <__aeabi_dcmpge>
  4070ce:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4070d2:	4646      	mov	r6, r8
  4070d4:	2800      	cmp	r0, #0
  4070d6:	d041      	beq.n	40715c <_dtoa_r+0xa3c>
  4070d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4070da:	9d04      	ldr	r5, [sp, #16]
  4070dc:	43db      	mvns	r3, r3
  4070de:	9302      	str	r3, [sp, #8]
  4070e0:	4641      	mov	r1, r8
  4070e2:	4620      	mov	r0, r4
  4070e4:	f001 f87e 	bl	4081e4 <_Bfree>
  4070e8:	2e00      	cmp	r6, #0
  4070ea:	f43f acdd 	beq.w	406aa8 <_dtoa_r+0x388>
  4070ee:	e6a7      	b.n	406e40 <_dtoa_r+0x720>
  4070f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4070f2:	4649      	mov	r1, r9
  4070f4:	4620      	mov	r0, r4
  4070f6:	f001 f9ab 	bl	408450 <__pow5mult>
  4070fa:	4681      	mov	r9, r0
  4070fc:	e558      	b.n	406bb0 <_dtoa_r+0x490>
  4070fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
  407100:	2a00      	cmp	r2, #0
  407102:	f000 8187 	beq.w	407414 <_dtoa_r+0xcf4>
  407106:	f203 4333 	addw	r3, r3, #1075	; 0x433
  40710a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40710c:	9d08      	ldr	r5, [sp, #32]
  40710e:	e4f2      	b.n	406af6 <_dtoa_r+0x3d6>
  407110:	f1ba 0f00 	cmp.w	sl, #0
  407114:	f47f ad75 	bne.w	406c02 <_dtoa_r+0x4e2>
  407118:	e7b4      	b.n	407084 <_dtoa_r+0x964>
  40711a:	f001 f86d 	bl	4081f8 <__multadd>
  40711e:	4647      	mov	r7, r8
  407120:	4606      	mov	r6, r0
  407122:	4683      	mov	fp, r0
  407124:	e5be      	b.n	406ca4 <_dtoa_r+0x584>
  407126:	4601      	mov	r1, r0
  407128:	4620      	mov	r0, r4
  40712a:	9306      	str	r3, [sp, #24]
  40712c:	f001 f85a 	bl	4081e4 <_Bfree>
  407130:	2201      	movs	r2, #1
  407132:	9b06      	ldr	r3, [sp, #24]
  407134:	e5e0      	b.n	406cf8 <_dtoa_r+0x5d8>
  407136:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407138:	2b02      	cmp	r3, #2
  40713a:	f77f ad96 	ble.w	406c6a <_dtoa_r+0x54a>
  40713e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407140:	2b00      	cmp	r3, #0
  407142:	d1c9      	bne.n	4070d8 <_dtoa_r+0x9b8>
  407144:	4641      	mov	r1, r8
  407146:	2205      	movs	r2, #5
  407148:	4620      	mov	r0, r4
  40714a:	f001 f855 	bl	4081f8 <__multadd>
  40714e:	4601      	mov	r1, r0
  407150:	4680      	mov	r8, r0
  407152:	4648      	mov	r0, r9
  407154:	f001 fa1e 	bl	408594 <__mcmp>
  407158:	2800      	cmp	r0, #0
  40715a:	ddbd      	ble.n	4070d8 <_dtoa_r+0x9b8>
  40715c:	9a02      	ldr	r2, [sp, #8]
  40715e:	9904      	ldr	r1, [sp, #16]
  407160:	2331      	movs	r3, #49	; 0x31
  407162:	3201      	adds	r2, #1
  407164:	9202      	str	r2, [sp, #8]
  407166:	700b      	strb	r3, [r1, #0]
  407168:	1c4d      	adds	r5, r1, #1
  40716a:	e7b9      	b.n	4070e0 <_dtoa_r+0x9c0>
  40716c:	9a02      	ldr	r2, [sp, #8]
  40716e:	3201      	adds	r2, #1
  407170:	9202      	str	r2, [sp, #8]
  407172:	9a04      	ldr	r2, [sp, #16]
  407174:	2331      	movs	r3, #49	; 0x31
  407176:	7013      	strb	r3, [r2, #0]
  407178:	e652      	b.n	406e20 <_dtoa_r+0x700>
  40717a:	2301      	movs	r3, #1
  40717c:	930b      	str	r3, [sp, #44]	; 0x2c
  40717e:	e666      	b.n	406e4e <_dtoa_r+0x72e>
  407180:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407184:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407186:	e48f      	b.n	406aa8 <_dtoa_r+0x388>
  407188:	0040a150 	.word	0x0040a150
  40718c:	0040a128 	.word	0x0040a128
  407190:	3ff00000 	.word	0x3ff00000
  407194:	401c0000 	.word	0x401c0000
  407198:	3fe00000 	.word	0x3fe00000
  40719c:	40240000 	.word	0x40240000
  4071a0:	40140000 	.word	0x40140000
  4071a4:	4650      	mov	r0, sl
  4071a6:	f002 f8a9 	bl	4092fc <__aeabi_i2d>
  4071aa:	463a      	mov	r2, r7
  4071ac:	4643      	mov	r3, r8
  4071ae:	f002 f90b 	bl	4093c8 <__aeabi_dmul>
  4071b2:	2200      	movs	r2, #0
  4071b4:	4bc1      	ldr	r3, [pc, #772]	; (4074bc <_dtoa_r+0xd9c>)
  4071b6:	f001 ff55 	bl	409064 <__adddf3>
  4071ba:	4605      	mov	r5, r0
  4071bc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4071c0:	4641      	mov	r1, r8
  4071c2:	2200      	movs	r2, #0
  4071c4:	4bbe      	ldr	r3, [pc, #760]	; (4074c0 <_dtoa_r+0xda0>)
  4071c6:	4638      	mov	r0, r7
  4071c8:	f001 ff4a 	bl	409060 <__aeabi_dsub>
  4071cc:	462a      	mov	r2, r5
  4071ce:	4633      	mov	r3, r6
  4071d0:	4682      	mov	sl, r0
  4071d2:	468b      	mov	fp, r1
  4071d4:	f002 fb88 	bl	4098e8 <__aeabi_dcmpgt>
  4071d8:	4680      	mov	r8, r0
  4071da:	2800      	cmp	r0, #0
  4071dc:	f040 8110 	bne.w	407400 <_dtoa_r+0xce0>
  4071e0:	462a      	mov	r2, r5
  4071e2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4071e6:	4650      	mov	r0, sl
  4071e8:	4659      	mov	r1, fp
  4071ea:	f002 fb5f 	bl	4098ac <__aeabi_dcmplt>
  4071ee:	b118      	cbz	r0, 4071f8 <_dtoa_r+0xad8>
  4071f0:	4646      	mov	r6, r8
  4071f2:	e771      	b.n	4070d8 <_dtoa_r+0x9b8>
  4071f4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4071f8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4071fc:	f7ff bb8a 	b.w	406914 <_dtoa_r+0x1f4>
  407200:	9804      	ldr	r0, [sp, #16]
  407202:	f7ff babb 	b.w	40677c <_dtoa_r+0x5c>
  407206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407208:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40720a:	970c      	str	r7, [sp, #48]	; 0x30
  40720c:	1afb      	subs	r3, r7, r3
  40720e:	441a      	add	r2, r3
  407210:	920d      	str	r2, [sp, #52]	; 0x34
  407212:	2700      	movs	r7, #0
  407214:	e469      	b.n	406aea <_dtoa_r+0x3ca>
  407216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  40721a:	f04f 0a02 	mov.w	sl, #2
  40721e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  407222:	e657      	b.n	406ed4 <_dtoa_r+0x7b4>
  407224:	2100      	movs	r1, #0
  407226:	2301      	movs	r3, #1
  407228:	6461      	str	r1, [r4, #68]	; 0x44
  40722a:	4620      	mov	r0, r4
  40722c:	9325      	str	r3, [sp, #148]	; 0x94
  40722e:	f000 ffb3 	bl	408198 <_Balloc>
  407232:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407234:	9004      	str	r0, [sp, #16]
  407236:	6420      	str	r0, [r4, #64]	; 0x40
  407238:	930a      	str	r3, [sp, #40]	; 0x28
  40723a:	930f      	str	r3, [sp, #60]	; 0x3c
  40723c:	e629      	b.n	406e92 <_dtoa_r+0x772>
  40723e:	2a00      	cmp	r2, #0
  407240:	46d0      	mov	r8, sl
  407242:	f8cd b018 	str.w	fp, [sp, #24]
  407246:	469a      	mov	sl, r3
  407248:	dd11      	ble.n	40726e <_dtoa_r+0xb4e>
  40724a:	4649      	mov	r1, r9
  40724c:	2201      	movs	r2, #1
  40724e:	4620      	mov	r0, r4
  407250:	f001 f94e 	bl	4084f0 <__lshift>
  407254:	4641      	mov	r1, r8
  407256:	4681      	mov	r9, r0
  407258:	f001 f99c 	bl	408594 <__mcmp>
  40725c:	2800      	cmp	r0, #0
  40725e:	f340 8146 	ble.w	4074ee <_dtoa_r+0xdce>
  407262:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407266:	f000 8106 	beq.w	407476 <_dtoa_r+0xd56>
  40726a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40726e:	46b3      	mov	fp, r6
  407270:	f887 a000 	strb.w	sl, [r7]
  407274:	1c7d      	adds	r5, r7, #1
  407276:	9e06      	ldr	r6, [sp, #24]
  407278:	e5d2      	b.n	406e20 <_dtoa_r+0x700>
  40727a:	d104      	bne.n	407286 <_dtoa_r+0xb66>
  40727c:	f01a 0f01 	tst.w	sl, #1
  407280:	d001      	beq.n	407286 <_dtoa_r+0xb66>
  407282:	e5bd      	b.n	406e00 <_dtoa_r+0x6e0>
  407284:	4615      	mov	r5, r2
  407286:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40728a:	2b30      	cmp	r3, #48	; 0x30
  40728c:	f105 32ff 	add.w	r2, r5, #4294967295
  407290:	d0f8      	beq.n	407284 <_dtoa_r+0xb64>
  407292:	e5c5      	b.n	406e20 <_dtoa_r+0x700>
  407294:	9904      	ldr	r1, [sp, #16]
  407296:	2230      	movs	r2, #48	; 0x30
  407298:	700a      	strb	r2, [r1, #0]
  40729a:	9a02      	ldr	r2, [sp, #8]
  40729c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4072a0:	3201      	adds	r2, #1
  4072a2:	9202      	str	r2, [sp, #8]
  4072a4:	f7ff bbfc 	b.w	406aa0 <_dtoa_r+0x380>
  4072a8:	f000 80bb 	beq.w	407422 <_dtoa_r+0xd02>
  4072ac:	9b02      	ldr	r3, [sp, #8]
  4072ae:	425d      	negs	r5, r3
  4072b0:	4b84      	ldr	r3, [pc, #528]	; (4074c4 <_dtoa_r+0xda4>)
  4072b2:	f005 020f 	and.w	r2, r5, #15
  4072b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4072be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4072c2:	f002 f881 	bl	4093c8 <__aeabi_dmul>
  4072c6:	112d      	asrs	r5, r5, #4
  4072c8:	4607      	mov	r7, r0
  4072ca:	4688      	mov	r8, r1
  4072cc:	f000 812c 	beq.w	407528 <_dtoa_r+0xe08>
  4072d0:	4e7d      	ldr	r6, [pc, #500]	; (4074c8 <_dtoa_r+0xda8>)
  4072d2:	f04f 0a02 	mov.w	sl, #2
  4072d6:	07eb      	lsls	r3, r5, #31
  4072d8:	d509      	bpl.n	4072ee <_dtoa_r+0xbce>
  4072da:	4638      	mov	r0, r7
  4072dc:	4641      	mov	r1, r8
  4072de:	e9d6 2300 	ldrd	r2, r3, [r6]
  4072e2:	f002 f871 	bl	4093c8 <__aeabi_dmul>
  4072e6:	f10a 0a01 	add.w	sl, sl, #1
  4072ea:	4607      	mov	r7, r0
  4072ec:	4688      	mov	r8, r1
  4072ee:	106d      	asrs	r5, r5, #1
  4072f0:	f106 0608 	add.w	r6, r6, #8
  4072f4:	d1ef      	bne.n	4072d6 <_dtoa_r+0xbb6>
  4072f6:	e608      	b.n	406f0a <_dtoa_r+0x7ea>
  4072f8:	6871      	ldr	r1, [r6, #4]
  4072fa:	4620      	mov	r0, r4
  4072fc:	f000 ff4c 	bl	408198 <_Balloc>
  407300:	6933      	ldr	r3, [r6, #16]
  407302:	3302      	adds	r3, #2
  407304:	009a      	lsls	r2, r3, #2
  407306:	4605      	mov	r5, r0
  407308:	f106 010c 	add.w	r1, r6, #12
  40730c:	300c      	adds	r0, #12
  40730e:	f7fc fd91 	bl	403e34 <memcpy>
  407312:	4629      	mov	r1, r5
  407314:	2201      	movs	r2, #1
  407316:	4620      	mov	r0, r4
  407318:	f001 f8ea 	bl	4084f0 <__lshift>
  40731c:	9006      	str	r0, [sp, #24]
  40731e:	e4b5      	b.n	406c8c <_dtoa_r+0x56c>
  407320:	2b39      	cmp	r3, #57	; 0x39
  407322:	f8cd b018 	str.w	fp, [sp, #24]
  407326:	46d0      	mov	r8, sl
  407328:	f000 80a5 	beq.w	407476 <_dtoa_r+0xd56>
  40732c:	f103 0a01 	add.w	sl, r3, #1
  407330:	46b3      	mov	fp, r6
  407332:	f887 a000 	strb.w	sl, [r7]
  407336:	1c7d      	adds	r5, r7, #1
  407338:	9e06      	ldr	r6, [sp, #24]
  40733a:	e571      	b.n	406e20 <_dtoa_r+0x700>
  40733c:	465a      	mov	r2, fp
  40733e:	46d0      	mov	r8, sl
  407340:	46b3      	mov	fp, r6
  407342:	469a      	mov	sl, r3
  407344:	4616      	mov	r6, r2
  407346:	e54f      	b.n	406de8 <_dtoa_r+0x6c8>
  407348:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40734a:	495e      	ldr	r1, [pc, #376]	; (4074c4 <_dtoa_r+0xda4>)
  40734c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407350:	462a      	mov	r2, r5
  407352:	4633      	mov	r3, r6
  407354:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  407358:	f002 f836 	bl	4093c8 <__aeabi_dmul>
  40735c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  407360:	4638      	mov	r0, r7
  407362:	4641      	mov	r1, r8
  407364:	f002 fae0 	bl	409928 <__aeabi_d2iz>
  407368:	4605      	mov	r5, r0
  40736a:	f001 ffc7 	bl	4092fc <__aeabi_i2d>
  40736e:	460b      	mov	r3, r1
  407370:	4602      	mov	r2, r0
  407372:	4641      	mov	r1, r8
  407374:	4638      	mov	r0, r7
  407376:	f001 fe73 	bl	409060 <__aeabi_dsub>
  40737a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40737c:	460f      	mov	r7, r1
  40737e:	9904      	ldr	r1, [sp, #16]
  407380:	3530      	adds	r5, #48	; 0x30
  407382:	2b01      	cmp	r3, #1
  407384:	700d      	strb	r5, [r1, #0]
  407386:	4606      	mov	r6, r0
  407388:	f101 0501 	add.w	r5, r1, #1
  40738c:	d026      	beq.n	4073dc <_dtoa_r+0xcbc>
  40738e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407390:	9a04      	ldr	r2, [sp, #16]
  407392:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4074d0 <_dtoa_r+0xdb0>
  407396:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40739a:	4413      	add	r3, r2
  40739c:	f04f 0a00 	mov.w	sl, #0
  4073a0:	4699      	mov	r9, r3
  4073a2:	4652      	mov	r2, sl
  4073a4:	465b      	mov	r3, fp
  4073a6:	4630      	mov	r0, r6
  4073a8:	4639      	mov	r1, r7
  4073aa:	f002 f80d 	bl	4093c8 <__aeabi_dmul>
  4073ae:	460f      	mov	r7, r1
  4073b0:	4606      	mov	r6, r0
  4073b2:	f002 fab9 	bl	409928 <__aeabi_d2iz>
  4073b6:	4680      	mov	r8, r0
  4073b8:	f001 ffa0 	bl	4092fc <__aeabi_i2d>
  4073bc:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4073c0:	4602      	mov	r2, r0
  4073c2:	460b      	mov	r3, r1
  4073c4:	4630      	mov	r0, r6
  4073c6:	4639      	mov	r1, r7
  4073c8:	f001 fe4a 	bl	409060 <__aeabi_dsub>
  4073cc:	f805 8b01 	strb.w	r8, [r5], #1
  4073d0:	454d      	cmp	r5, r9
  4073d2:	4606      	mov	r6, r0
  4073d4:	460f      	mov	r7, r1
  4073d6:	d1e4      	bne.n	4073a2 <_dtoa_r+0xc82>
  4073d8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4073dc:	4b3b      	ldr	r3, [pc, #236]	; (4074cc <_dtoa_r+0xdac>)
  4073de:	2200      	movs	r2, #0
  4073e0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4073e4:	f001 fe3e 	bl	409064 <__adddf3>
  4073e8:	4632      	mov	r2, r6
  4073ea:	463b      	mov	r3, r7
  4073ec:	f002 fa5e 	bl	4098ac <__aeabi_dcmplt>
  4073f0:	2800      	cmp	r0, #0
  4073f2:	d046      	beq.n	407482 <_dtoa_r+0xd62>
  4073f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4073f6:	9302      	str	r3, [sp, #8]
  4073f8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4073fc:	f7ff bb43 	b.w	406a86 <_dtoa_r+0x366>
  407400:	f04f 0800 	mov.w	r8, #0
  407404:	4646      	mov	r6, r8
  407406:	e6a9      	b.n	40715c <_dtoa_r+0xa3c>
  407408:	9b08      	ldr	r3, [sp, #32]
  40740a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40740c:	1a9d      	subs	r5, r3, r2
  40740e:	2300      	movs	r3, #0
  407410:	f7ff bb71 	b.w	406af6 <_dtoa_r+0x3d6>
  407414:	9b18      	ldr	r3, [sp, #96]	; 0x60
  407416:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  407418:	9d08      	ldr	r5, [sp, #32]
  40741a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  40741e:	f7ff bb6a 	b.w	406af6 <_dtoa_r+0x3d6>
  407422:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  407426:	f04f 0a02 	mov.w	sl, #2
  40742a:	e56e      	b.n	406f0a <_dtoa_r+0x7ea>
  40742c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40742e:	2b00      	cmp	r3, #0
  407430:	f43f aeb8 	beq.w	4071a4 <_dtoa_r+0xa84>
  407434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407436:	2b00      	cmp	r3, #0
  407438:	f77f aede 	ble.w	4071f8 <_dtoa_r+0xad8>
  40743c:	2200      	movs	r2, #0
  40743e:	4b24      	ldr	r3, [pc, #144]	; (4074d0 <_dtoa_r+0xdb0>)
  407440:	4638      	mov	r0, r7
  407442:	4641      	mov	r1, r8
  407444:	f001 ffc0 	bl	4093c8 <__aeabi_dmul>
  407448:	4607      	mov	r7, r0
  40744a:	4688      	mov	r8, r1
  40744c:	f10a 0001 	add.w	r0, sl, #1
  407450:	f001 ff54 	bl	4092fc <__aeabi_i2d>
  407454:	463a      	mov	r2, r7
  407456:	4643      	mov	r3, r8
  407458:	f001 ffb6 	bl	4093c8 <__aeabi_dmul>
  40745c:	2200      	movs	r2, #0
  40745e:	4b17      	ldr	r3, [pc, #92]	; (4074bc <_dtoa_r+0xd9c>)
  407460:	f001 fe00 	bl	409064 <__adddf3>
  407464:	9a02      	ldr	r2, [sp, #8]
  407466:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407468:	9312      	str	r3, [sp, #72]	; 0x48
  40746a:	3a01      	subs	r2, #1
  40746c:	4605      	mov	r5, r0
  40746e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407472:	9215      	str	r2, [sp, #84]	; 0x54
  407474:	e56a      	b.n	406f4c <_dtoa_r+0x82c>
  407476:	2239      	movs	r2, #57	; 0x39
  407478:	46b3      	mov	fp, r6
  40747a:	703a      	strb	r2, [r7, #0]
  40747c:	9e06      	ldr	r6, [sp, #24]
  40747e:	1c7d      	adds	r5, r7, #1
  407480:	e4c0      	b.n	406e04 <_dtoa_r+0x6e4>
  407482:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  407486:	2000      	movs	r0, #0
  407488:	4910      	ldr	r1, [pc, #64]	; (4074cc <_dtoa_r+0xdac>)
  40748a:	f001 fde9 	bl	409060 <__aeabi_dsub>
  40748e:	4632      	mov	r2, r6
  407490:	463b      	mov	r3, r7
  407492:	f002 fa29 	bl	4098e8 <__aeabi_dcmpgt>
  407496:	b908      	cbnz	r0, 40749c <_dtoa_r+0xd7c>
  407498:	e6ae      	b.n	4071f8 <_dtoa_r+0xad8>
  40749a:	4615      	mov	r5, r2
  40749c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4074a0:	2b30      	cmp	r3, #48	; 0x30
  4074a2:	f105 32ff 	add.w	r2, r5, #4294967295
  4074a6:	d0f8      	beq.n	40749a <_dtoa_r+0xd7a>
  4074a8:	e5d7      	b.n	40705a <_dtoa_r+0x93a>
  4074aa:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4074ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4074b0:	9302      	str	r3, [sp, #8]
  4074b2:	f7ff bae8 	b.w	406a86 <_dtoa_r+0x366>
  4074b6:	970c      	str	r7, [sp, #48]	; 0x30
  4074b8:	f7ff bba5 	b.w	406c06 <_dtoa_r+0x4e6>
  4074bc:	401c0000 	.word	0x401c0000
  4074c0:	40140000 	.word	0x40140000
  4074c4:	0040a150 	.word	0x0040a150
  4074c8:	0040a128 	.word	0x0040a128
  4074cc:	3fe00000 	.word	0x3fe00000
  4074d0:	40240000 	.word	0x40240000
  4074d4:	2b39      	cmp	r3, #57	; 0x39
  4074d6:	f8cd b018 	str.w	fp, [sp, #24]
  4074da:	46d0      	mov	r8, sl
  4074dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4074e0:	469a      	mov	sl, r3
  4074e2:	d0c8      	beq.n	407476 <_dtoa_r+0xd56>
  4074e4:	f1bb 0f00 	cmp.w	fp, #0
  4074e8:	f73f aebf 	bgt.w	40726a <_dtoa_r+0xb4a>
  4074ec:	e6bf      	b.n	40726e <_dtoa_r+0xb4e>
  4074ee:	f47f aebe 	bne.w	40726e <_dtoa_r+0xb4e>
  4074f2:	f01a 0f01 	tst.w	sl, #1
  4074f6:	f43f aeba 	beq.w	40726e <_dtoa_r+0xb4e>
  4074fa:	e6b2      	b.n	407262 <_dtoa_r+0xb42>
  4074fc:	f04f 0800 	mov.w	r8, #0
  407500:	4646      	mov	r6, r8
  407502:	e5e9      	b.n	4070d8 <_dtoa_r+0x9b8>
  407504:	4631      	mov	r1, r6
  407506:	2300      	movs	r3, #0
  407508:	220a      	movs	r2, #10
  40750a:	4620      	mov	r0, r4
  40750c:	f000 fe74 	bl	4081f8 <__multadd>
  407510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407512:	2b00      	cmp	r3, #0
  407514:	4606      	mov	r6, r0
  407516:	dd0a      	ble.n	40752e <_dtoa_r+0xe0e>
  407518:	930a      	str	r3, [sp, #40]	; 0x28
  40751a:	f7ff bbaa 	b.w	406c72 <_dtoa_r+0x552>
  40751e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407520:	2b02      	cmp	r3, #2
  407522:	dc23      	bgt.n	40756c <_dtoa_r+0xe4c>
  407524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407526:	e43b      	b.n	406da0 <_dtoa_r+0x680>
  407528:	f04f 0a02 	mov.w	sl, #2
  40752c:	e4ed      	b.n	406f0a <_dtoa_r+0x7ea>
  40752e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407530:	2b02      	cmp	r3, #2
  407532:	dc1b      	bgt.n	40756c <_dtoa_r+0xe4c>
  407534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407536:	e7ef      	b.n	407518 <_dtoa_r+0xdf8>
  407538:	2500      	movs	r5, #0
  40753a:	6465      	str	r5, [r4, #68]	; 0x44
  40753c:	4629      	mov	r1, r5
  40753e:	4620      	mov	r0, r4
  407540:	f000 fe2a 	bl	408198 <_Balloc>
  407544:	f04f 33ff 	mov.w	r3, #4294967295
  407548:	930a      	str	r3, [sp, #40]	; 0x28
  40754a:	930f      	str	r3, [sp, #60]	; 0x3c
  40754c:	2301      	movs	r3, #1
  40754e:	9004      	str	r0, [sp, #16]
  407550:	9525      	str	r5, [sp, #148]	; 0x94
  407552:	6420      	str	r0, [r4, #64]	; 0x40
  407554:	930b      	str	r3, [sp, #44]	; 0x2c
  407556:	f7ff b9dd 	b.w	406914 <_dtoa_r+0x1f4>
  40755a:	2501      	movs	r5, #1
  40755c:	f7ff b9a5 	b.w	4068aa <_dtoa_r+0x18a>
  407560:	f43f ab69 	beq.w	406c36 <_dtoa_r+0x516>
  407564:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407568:	f7ff bbf9 	b.w	406d5e <_dtoa_r+0x63e>
  40756c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40756e:	930a      	str	r3, [sp, #40]	; 0x28
  407570:	e5e5      	b.n	40713e <_dtoa_r+0xa1e>
  407572:	bf00      	nop

00407574 <__sflush_r>:
  407574:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407578:	b29a      	uxth	r2, r3
  40757a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40757e:	460d      	mov	r5, r1
  407580:	0711      	lsls	r1, r2, #28
  407582:	4680      	mov	r8, r0
  407584:	d43a      	bmi.n	4075fc <__sflush_r+0x88>
  407586:	686a      	ldr	r2, [r5, #4]
  407588:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40758c:	2a00      	cmp	r2, #0
  40758e:	81ab      	strh	r3, [r5, #12]
  407590:	dd6f      	ble.n	407672 <__sflush_r+0xfe>
  407592:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407594:	2c00      	cmp	r4, #0
  407596:	d049      	beq.n	40762c <__sflush_r+0xb8>
  407598:	2200      	movs	r2, #0
  40759a:	b29b      	uxth	r3, r3
  40759c:	f8d8 6000 	ldr.w	r6, [r8]
  4075a0:	f8c8 2000 	str.w	r2, [r8]
  4075a4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4075a8:	d067      	beq.n	40767a <__sflush_r+0x106>
  4075aa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4075ac:	075f      	lsls	r7, r3, #29
  4075ae:	d505      	bpl.n	4075bc <__sflush_r+0x48>
  4075b0:	6869      	ldr	r1, [r5, #4]
  4075b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4075b4:	1a52      	subs	r2, r2, r1
  4075b6:	b10b      	cbz	r3, 4075bc <__sflush_r+0x48>
  4075b8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4075ba:	1ad2      	subs	r2, r2, r3
  4075bc:	2300      	movs	r3, #0
  4075be:	69e9      	ldr	r1, [r5, #28]
  4075c0:	4640      	mov	r0, r8
  4075c2:	47a0      	blx	r4
  4075c4:	1c44      	adds	r4, r0, #1
  4075c6:	d03c      	beq.n	407642 <__sflush_r+0xce>
  4075c8:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4075cc:	692a      	ldr	r2, [r5, #16]
  4075ce:	602a      	str	r2, [r5, #0]
  4075d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4075d4:	2200      	movs	r2, #0
  4075d6:	81ab      	strh	r3, [r5, #12]
  4075d8:	04db      	lsls	r3, r3, #19
  4075da:	606a      	str	r2, [r5, #4]
  4075dc:	d447      	bmi.n	40766e <__sflush_r+0xfa>
  4075de:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4075e0:	f8c8 6000 	str.w	r6, [r8]
  4075e4:	b311      	cbz	r1, 40762c <__sflush_r+0xb8>
  4075e6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4075ea:	4299      	cmp	r1, r3
  4075ec:	d002      	beq.n	4075f4 <__sflush_r+0x80>
  4075ee:	4640      	mov	r0, r8
  4075f0:	f000 f9de 	bl	4079b0 <_free_r>
  4075f4:	2000      	movs	r0, #0
  4075f6:	6328      	str	r0, [r5, #48]	; 0x30
  4075f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4075fc:	692e      	ldr	r6, [r5, #16]
  4075fe:	b1ae      	cbz	r6, 40762c <__sflush_r+0xb8>
  407600:	682c      	ldr	r4, [r5, #0]
  407602:	602e      	str	r6, [r5, #0]
  407604:	0791      	lsls	r1, r2, #30
  407606:	bf0c      	ite	eq
  407608:	696b      	ldreq	r3, [r5, #20]
  40760a:	2300      	movne	r3, #0
  40760c:	1ba4      	subs	r4, r4, r6
  40760e:	60ab      	str	r3, [r5, #8]
  407610:	e00a      	b.n	407628 <__sflush_r+0xb4>
  407612:	4623      	mov	r3, r4
  407614:	4632      	mov	r2, r6
  407616:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  407618:	69e9      	ldr	r1, [r5, #28]
  40761a:	4640      	mov	r0, r8
  40761c:	47b8      	blx	r7
  40761e:	2800      	cmp	r0, #0
  407620:	eba4 0400 	sub.w	r4, r4, r0
  407624:	4406      	add	r6, r0
  407626:	dd04      	ble.n	407632 <__sflush_r+0xbe>
  407628:	2c00      	cmp	r4, #0
  40762a:	dcf2      	bgt.n	407612 <__sflush_r+0x9e>
  40762c:	2000      	movs	r0, #0
  40762e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407632:	89ab      	ldrh	r3, [r5, #12]
  407634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407638:	81ab      	strh	r3, [r5, #12]
  40763a:	f04f 30ff 	mov.w	r0, #4294967295
  40763e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407642:	f8d8 4000 	ldr.w	r4, [r8]
  407646:	2c1d      	cmp	r4, #29
  407648:	d8f3      	bhi.n	407632 <__sflush_r+0xbe>
  40764a:	4b19      	ldr	r3, [pc, #100]	; (4076b0 <__sflush_r+0x13c>)
  40764c:	40e3      	lsrs	r3, r4
  40764e:	43db      	mvns	r3, r3
  407650:	f013 0301 	ands.w	r3, r3, #1
  407654:	d1ed      	bne.n	407632 <__sflush_r+0xbe>
  407656:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40765a:	606b      	str	r3, [r5, #4]
  40765c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407660:	6929      	ldr	r1, [r5, #16]
  407662:	81ab      	strh	r3, [r5, #12]
  407664:	04da      	lsls	r2, r3, #19
  407666:	6029      	str	r1, [r5, #0]
  407668:	d5b9      	bpl.n	4075de <__sflush_r+0x6a>
  40766a:	2c00      	cmp	r4, #0
  40766c:	d1b7      	bne.n	4075de <__sflush_r+0x6a>
  40766e:	6528      	str	r0, [r5, #80]	; 0x50
  407670:	e7b5      	b.n	4075de <__sflush_r+0x6a>
  407672:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407674:	2a00      	cmp	r2, #0
  407676:	dc8c      	bgt.n	407592 <__sflush_r+0x1e>
  407678:	e7d8      	b.n	40762c <__sflush_r+0xb8>
  40767a:	2301      	movs	r3, #1
  40767c:	69e9      	ldr	r1, [r5, #28]
  40767e:	4640      	mov	r0, r8
  407680:	47a0      	blx	r4
  407682:	1c43      	adds	r3, r0, #1
  407684:	4602      	mov	r2, r0
  407686:	d002      	beq.n	40768e <__sflush_r+0x11a>
  407688:	89ab      	ldrh	r3, [r5, #12]
  40768a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40768c:	e78e      	b.n	4075ac <__sflush_r+0x38>
  40768e:	f8d8 3000 	ldr.w	r3, [r8]
  407692:	2b00      	cmp	r3, #0
  407694:	d0f8      	beq.n	407688 <__sflush_r+0x114>
  407696:	2b1d      	cmp	r3, #29
  407698:	d001      	beq.n	40769e <__sflush_r+0x12a>
  40769a:	2b16      	cmp	r3, #22
  40769c:	d102      	bne.n	4076a4 <__sflush_r+0x130>
  40769e:	f8c8 6000 	str.w	r6, [r8]
  4076a2:	e7c3      	b.n	40762c <__sflush_r+0xb8>
  4076a4:	89ab      	ldrh	r3, [r5, #12]
  4076a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4076aa:	81ab      	strh	r3, [r5, #12]
  4076ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4076b0:	20400001 	.word	0x20400001

004076b4 <_fflush_r>:
  4076b4:	b538      	push	{r3, r4, r5, lr}
  4076b6:	460d      	mov	r5, r1
  4076b8:	4604      	mov	r4, r0
  4076ba:	b108      	cbz	r0, 4076c0 <_fflush_r+0xc>
  4076bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4076be:	b1bb      	cbz	r3, 4076f0 <_fflush_r+0x3c>
  4076c0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4076c4:	b188      	cbz	r0, 4076ea <_fflush_r+0x36>
  4076c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4076c8:	07db      	lsls	r3, r3, #31
  4076ca:	d401      	bmi.n	4076d0 <_fflush_r+0x1c>
  4076cc:	0581      	lsls	r1, r0, #22
  4076ce:	d517      	bpl.n	407700 <_fflush_r+0x4c>
  4076d0:	4620      	mov	r0, r4
  4076d2:	4629      	mov	r1, r5
  4076d4:	f7ff ff4e 	bl	407574 <__sflush_r>
  4076d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4076da:	07da      	lsls	r2, r3, #31
  4076dc:	4604      	mov	r4, r0
  4076de:	d402      	bmi.n	4076e6 <_fflush_r+0x32>
  4076e0:	89ab      	ldrh	r3, [r5, #12]
  4076e2:	059b      	lsls	r3, r3, #22
  4076e4:	d507      	bpl.n	4076f6 <_fflush_r+0x42>
  4076e6:	4620      	mov	r0, r4
  4076e8:	bd38      	pop	{r3, r4, r5, pc}
  4076ea:	4604      	mov	r4, r0
  4076ec:	4620      	mov	r0, r4
  4076ee:	bd38      	pop	{r3, r4, r5, pc}
  4076f0:	f000 f838 	bl	407764 <__sinit>
  4076f4:	e7e4      	b.n	4076c0 <_fflush_r+0xc>
  4076f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4076f8:	f000 fc04 	bl	407f04 <__retarget_lock_release_recursive>
  4076fc:	4620      	mov	r0, r4
  4076fe:	bd38      	pop	{r3, r4, r5, pc}
  407700:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407702:	f000 fbfd 	bl	407f00 <__retarget_lock_acquire_recursive>
  407706:	e7e3      	b.n	4076d0 <_fflush_r+0x1c>

00407708 <_cleanup_r>:
  407708:	4901      	ldr	r1, [pc, #4]	; (407710 <_cleanup_r+0x8>)
  40770a:	f000 bbaf 	b.w	407e6c <_fwalk_reent>
  40770e:	bf00      	nop
  407710:	00408ef1 	.word	0x00408ef1

00407714 <std.isra.0>:
  407714:	b510      	push	{r4, lr}
  407716:	2300      	movs	r3, #0
  407718:	4604      	mov	r4, r0
  40771a:	8181      	strh	r1, [r0, #12]
  40771c:	81c2      	strh	r2, [r0, #14]
  40771e:	6003      	str	r3, [r0, #0]
  407720:	6043      	str	r3, [r0, #4]
  407722:	6083      	str	r3, [r0, #8]
  407724:	6643      	str	r3, [r0, #100]	; 0x64
  407726:	6103      	str	r3, [r0, #16]
  407728:	6143      	str	r3, [r0, #20]
  40772a:	6183      	str	r3, [r0, #24]
  40772c:	4619      	mov	r1, r3
  40772e:	2208      	movs	r2, #8
  407730:	305c      	adds	r0, #92	; 0x5c
  407732:	f7fc fc19 	bl	403f68 <memset>
  407736:	4807      	ldr	r0, [pc, #28]	; (407754 <std.isra.0+0x40>)
  407738:	4907      	ldr	r1, [pc, #28]	; (407758 <std.isra.0+0x44>)
  40773a:	4a08      	ldr	r2, [pc, #32]	; (40775c <std.isra.0+0x48>)
  40773c:	4b08      	ldr	r3, [pc, #32]	; (407760 <std.isra.0+0x4c>)
  40773e:	6220      	str	r0, [r4, #32]
  407740:	61e4      	str	r4, [r4, #28]
  407742:	6261      	str	r1, [r4, #36]	; 0x24
  407744:	62a2      	str	r2, [r4, #40]	; 0x28
  407746:	62e3      	str	r3, [r4, #44]	; 0x2c
  407748:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407750:	f000 bbd2 	b.w	407ef8 <__retarget_lock_init_recursive>
  407754:	00408ad9 	.word	0x00408ad9
  407758:	00408afd 	.word	0x00408afd
  40775c:	00408b39 	.word	0x00408b39
  407760:	00408b59 	.word	0x00408b59

00407764 <__sinit>:
  407764:	b510      	push	{r4, lr}
  407766:	4604      	mov	r4, r0
  407768:	4812      	ldr	r0, [pc, #72]	; (4077b4 <__sinit+0x50>)
  40776a:	f000 fbc9 	bl	407f00 <__retarget_lock_acquire_recursive>
  40776e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407770:	b9d2      	cbnz	r2, 4077a8 <__sinit+0x44>
  407772:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  407776:	4810      	ldr	r0, [pc, #64]	; (4077b8 <__sinit+0x54>)
  407778:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40777c:	2103      	movs	r1, #3
  40777e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407782:	63e0      	str	r0, [r4, #60]	; 0x3c
  407784:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407788:	6860      	ldr	r0, [r4, #4]
  40778a:	2104      	movs	r1, #4
  40778c:	f7ff ffc2 	bl	407714 <std.isra.0>
  407790:	2201      	movs	r2, #1
  407792:	2109      	movs	r1, #9
  407794:	68a0      	ldr	r0, [r4, #8]
  407796:	f7ff ffbd 	bl	407714 <std.isra.0>
  40779a:	2202      	movs	r2, #2
  40779c:	2112      	movs	r1, #18
  40779e:	68e0      	ldr	r0, [r4, #12]
  4077a0:	f7ff ffb8 	bl	407714 <std.isra.0>
  4077a4:	2301      	movs	r3, #1
  4077a6:	63a3      	str	r3, [r4, #56]	; 0x38
  4077a8:	4802      	ldr	r0, [pc, #8]	; (4077b4 <__sinit+0x50>)
  4077aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4077ae:	f000 bba9 	b.w	407f04 <__retarget_lock_release_recursive>
  4077b2:	bf00      	nop
  4077b4:	20400e4c 	.word	0x20400e4c
  4077b8:	00407709 	.word	0x00407709

004077bc <__sfp_lock_acquire>:
  4077bc:	4801      	ldr	r0, [pc, #4]	; (4077c4 <__sfp_lock_acquire+0x8>)
  4077be:	f000 bb9f 	b.w	407f00 <__retarget_lock_acquire_recursive>
  4077c2:	bf00      	nop
  4077c4:	20400e60 	.word	0x20400e60

004077c8 <__sfp_lock_release>:
  4077c8:	4801      	ldr	r0, [pc, #4]	; (4077d0 <__sfp_lock_release+0x8>)
  4077ca:	f000 bb9b 	b.w	407f04 <__retarget_lock_release_recursive>
  4077ce:	bf00      	nop
  4077d0:	20400e60 	.word	0x20400e60

004077d4 <__libc_fini_array>:
  4077d4:	b538      	push	{r3, r4, r5, lr}
  4077d6:	4c0a      	ldr	r4, [pc, #40]	; (407800 <__libc_fini_array+0x2c>)
  4077d8:	4d0a      	ldr	r5, [pc, #40]	; (407804 <__libc_fini_array+0x30>)
  4077da:	1b64      	subs	r4, r4, r5
  4077dc:	10a4      	asrs	r4, r4, #2
  4077de:	d00a      	beq.n	4077f6 <__libc_fini_array+0x22>
  4077e0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4077e4:	3b01      	subs	r3, #1
  4077e6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4077ea:	3c01      	subs	r4, #1
  4077ec:	f855 3904 	ldr.w	r3, [r5], #-4
  4077f0:	4798      	blx	r3
  4077f2:	2c00      	cmp	r4, #0
  4077f4:	d1f9      	bne.n	4077ea <__libc_fini_array+0x16>
  4077f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4077fa:	f002 bd9f 	b.w	40a33c <_fini>
  4077fe:	bf00      	nop
  407800:	0040a34c 	.word	0x0040a34c
  407804:	0040a348 	.word	0x0040a348

00407808 <__fputwc>:
  407808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40780c:	b082      	sub	sp, #8
  40780e:	4680      	mov	r8, r0
  407810:	4689      	mov	r9, r1
  407812:	4614      	mov	r4, r2
  407814:	f000 fb54 	bl	407ec0 <__locale_mb_cur_max>
  407818:	2801      	cmp	r0, #1
  40781a:	d036      	beq.n	40788a <__fputwc+0x82>
  40781c:	464a      	mov	r2, r9
  40781e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407822:	a901      	add	r1, sp, #4
  407824:	4640      	mov	r0, r8
  407826:	f001 fa71 	bl	408d0c <_wcrtomb_r>
  40782a:	1c42      	adds	r2, r0, #1
  40782c:	4606      	mov	r6, r0
  40782e:	d025      	beq.n	40787c <__fputwc+0x74>
  407830:	b3a8      	cbz	r0, 40789e <__fputwc+0x96>
  407832:	f89d e004 	ldrb.w	lr, [sp, #4]
  407836:	2500      	movs	r5, #0
  407838:	f10d 0a04 	add.w	sl, sp, #4
  40783c:	e009      	b.n	407852 <__fputwc+0x4a>
  40783e:	6823      	ldr	r3, [r4, #0]
  407840:	1c5a      	adds	r2, r3, #1
  407842:	6022      	str	r2, [r4, #0]
  407844:	f883 e000 	strb.w	lr, [r3]
  407848:	3501      	adds	r5, #1
  40784a:	42b5      	cmp	r5, r6
  40784c:	d227      	bcs.n	40789e <__fputwc+0x96>
  40784e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407852:	68a3      	ldr	r3, [r4, #8]
  407854:	3b01      	subs	r3, #1
  407856:	2b00      	cmp	r3, #0
  407858:	60a3      	str	r3, [r4, #8]
  40785a:	daf0      	bge.n	40783e <__fputwc+0x36>
  40785c:	69a7      	ldr	r7, [r4, #24]
  40785e:	42bb      	cmp	r3, r7
  407860:	4671      	mov	r1, lr
  407862:	4622      	mov	r2, r4
  407864:	4640      	mov	r0, r8
  407866:	db02      	blt.n	40786e <__fputwc+0x66>
  407868:	f1be 0f0a 	cmp.w	lr, #10
  40786c:	d1e7      	bne.n	40783e <__fputwc+0x36>
  40786e:	f001 f9f5 	bl	408c5c <__swbuf_r>
  407872:	1c43      	adds	r3, r0, #1
  407874:	d1e8      	bne.n	407848 <__fputwc+0x40>
  407876:	b002      	add	sp, #8
  407878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40787c:	89a3      	ldrh	r3, [r4, #12]
  40787e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407882:	81a3      	strh	r3, [r4, #12]
  407884:	b002      	add	sp, #8
  407886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40788a:	f109 33ff 	add.w	r3, r9, #4294967295
  40788e:	2bfe      	cmp	r3, #254	; 0xfe
  407890:	d8c4      	bhi.n	40781c <__fputwc+0x14>
  407892:	fa5f fe89 	uxtb.w	lr, r9
  407896:	4606      	mov	r6, r0
  407898:	f88d e004 	strb.w	lr, [sp, #4]
  40789c:	e7cb      	b.n	407836 <__fputwc+0x2e>
  40789e:	4648      	mov	r0, r9
  4078a0:	b002      	add	sp, #8
  4078a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4078a6:	bf00      	nop

004078a8 <_fputwc_r>:
  4078a8:	b530      	push	{r4, r5, lr}
  4078aa:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4078ac:	f013 0f01 	tst.w	r3, #1
  4078b0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4078b4:	4614      	mov	r4, r2
  4078b6:	b083      	sub	sp, #12
  4078b8:	4605      	mov	r5, r0
  4078ba:	b29a      	uxth	r2, r3
  4078bc:	d101      	bne.n	4078c2 <_fputwc_r+0x1a>
  4078be:	0590      	lsls	r0, r2, #22
  4078c0:	d51c      	bpl.n	4078fc <_fputwc_r+0x54>
  4078c2:	0490      	lsls	r0, r2, #18
  4078c4:	d406      	bmi.n	4078d4 <_fputwc_r+0x2c>
  4078c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4078c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4078cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4078d0:	81a3      	strh	r3, [r4, #12]
  4078d2:	6662      	str	r2, [r4, #100]	; 0x64
  4078d4:	4628      	mov	r0, r5
  4078d6:	4622      	mov	r2, r4
  4078d8:	f7ff ff96 	bl	407808 <__fputwc>
  4078dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4078de:	07da      	lsls	r2, r3, #31
  4078e0:	4605      	mov	r5, r0
  4078e2:	d402      	bmi.n	4078ea <_fputwc_r+0x42>
  4078e4:	89a3      	ldrh	r3, [r4, #12]
  4078e6:	059b      	lsls	r3, r3, #22
  4078e8:	d502      	bpl.n	4078f0 <_fputwc_r+0x48>
  4078ea:	4628      	mov	r0, r5
  4078ec:	b003      	add	sp, #12
  4078ee:	bd30      	pop	{r4, r5, pc}
  4078f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4078f2:	f000 fb07 	bl	407f04 <__retarget_lock_release_recursive>
  4078f6:	4628      	mov	r0, r5
  4078f8:	b003      	add	sp, #12
  4078fa:	bd30      	pop	{r4, r5, pc}
  4078fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4078fe:	9101      	str	r1, [sp, #4]
  407900:	f000 fafe 	bl	407f00 <__retarget_lock_acquire_recursive>
  407904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407908:	9901      	ldr	r1, [sp, #4]
  40790a:	b29a      	uxth	r2, r3
  40790c:	e7d9      	b.n	4078c2 <_fputwc_r+0x1a>
  40790e:	bf00      	nop

00407910 <_malloc_trim_r>:
  407910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407912:	4f24      	ldr	r7, [pc, #144]	; (4079a4 <_malloc_trim_r+0x94>)
  407914:	460c      	mov	r4, r1
  407916:	4606      	mov	r6, r0
  407918:	f7fc fb74 	bl	404004 <__malloc_lock>
  40791c:	68bb      	ldr	r3, [r7, #8]
  40791e:	685d      	ldr	r5, [r3, #4]
  407920:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407924:	310f      	adds	r1, #15
  407926:	f025 0503 	bic.w	r5, r5, #3
  40792a:	4429      	add	r1, r5
  40792c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407930:	f021 010f 	bic.w	r1, r1, #15
  407934:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407938:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40793c:	db07      	blt.n	40794e <_malloc_trim_r+0x3e>
  40793e:	2100      	movs	r1, #0
  407940:	4630      	mov	r0, r6
  407942:	f7fc fb6b 	bl	40401c <_sbrk_r>
  407946:	68bb      	ldr	r3, [r7, #8]
  407948:	442b      	add	r3, r5
  40794a:	4298      	cmp	r0, r3
  40794c:	d004      	beq.n	407958 <_malloc_trim_r+0x48>
  40794e:	4630      	mov	r0, r6
  407950:	f7fc fb5e 	bl	404010 <__malloc_unlock>
  407954:	2000      	movs	r0, #0
  407956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407958:	4261      	negs	r1, r4
  40795a:	4630      	mov	r0, r6
  40795c:	f7fc fb5e 	bl	40401c <_sbrk_r>
  407960:	3001      	adds	r0, #1
  407962:	d00d      	beq.n	407980 <_malloc_trim_r+0x70>
  407964:	4b10      	ldr	r3, [pc, #64]	; (4079a8 <_malloc_trim_r+0x98>)
  407966:	68ba      	ldr	r2, [r7, #8]
  407968:	6819      	ldr	r1, [r3, #0]
  40796a:	1b2d      	subs	r5, r5, r4
  40796c:	f045 0501 	orr.w	r5, r5, #1
  407970:	4630      	mov	r0, r6
  407972:	1b09      	subs	r1, r1, r4
  407974:	6055      	str	r5, [r2, #4]
  407976:	6019      	str	r1, [r3, #0]
  407978:	f7fc fb4a 	bl	404010 <__malloc_unlock>
  40797c:	2001      	movs	r0, #1
  40797e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407980:	2100      	movs	r1, #0
  407982:	4630      	mov	r0, r6
  407984:	f7fc fb4a 	bl	40401c <_sbrk_r>
  407988:	68ba      	ldr	r2, [r7, #8]
  40798a:	1a83      	subs	r3, r0, r2
  40798c:	2b0f      	cmp	r3, #15
  40798e:	ddde      	ble.n	40794e <_malloc_trim_r+0x3e>
  407990:	4c06      	ldr	r4, [pc, #24]	; (4079ac <_malloc_trim_r+0x9c>)
  407992:	4905      	ldr	r1, [pc, #20]	; (4079a8 <_malloc_trim_r+0x98>)
  407994:	6824      	ldr	r4, [r4, #0]
  407996:	f043 0301 	orr.w	r3, r3, #1
  40799a:	1b00      	subs	r0, r0, r4
  40799c:	6053      	str	r3, [r2, #4]
  40799e:	6008      	str	r0, [r1, #0]
  4079a0:	e7d5      	b.n	40794e <_malloc_trim_r+0x3e>
  4079a2:	bf00      	nop
  4079a4:	20400450 	.word	0x20400450
  4079a8:	20400db0 	.word	0x20400db0
  4079ac:	20400858 	.word	0x20400858

004079b0 <_free_r>:
  4079b0:	2900      	cmp	r1, #0
  4079b2:	d044      	beq.n	407a3e <_free_r+0x8e>
  4079b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4079b8:	460d      	mov	r5, r1
  4079ba:	4680      	mov	r8, r0
  4079bc:	f7fc fb22 	bl	404004 <__malloc_lock>
  4079c0:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4079c4:	4969      	ldr	r1, [pc, #420]	; (407b6c <_free_r+0x1bc>)
  4079c6:	f027 0301 	bic.w	r3, r7, #1
  4079ca:	f1a5 0408 	sub.w	r4, r5, #8
  4079ce:	18e2      	adds	r2, r4, r3
  4079d0:	688e      	ldr	r6, [r1, #8]
  4079d2:	6850      	ldr	r0, [r2, #4]
  4079d4:	42b2      	cmp	r2, r6
  4079d6:	f020 0003 	bic.w	r0, r0, #3
  4079da:	d05e      	beq.n	407a9a <_free_r+0xea>
  4079dc:	07fe      	lsls	r6, r7, #31
  4079de:	6050      	str	r0, [r2, #4]
  4079e0:	d40b      	bmi.n	4079fa <_free_r+0x4a>
  4079e2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4079e6:	1be4      	subs	r4, r4, r7
  4079e8:	f101 0e08 	add.w	lr, r1, #8
  4079ec:	68a5      	ldr	r5, [r4, #8]
  4079ee:	4575      	cmp	r5, lr
  4079f0:	443b      	add	r3, r7
  4079f2:	d06d      	beq.n	407ad0 <_free_r+0x120>
  4079f4:	68e7      	ldr	r7, [r4, #12]
  4079f6:	60ef      	str	r7, [r5, #12]
  4079f8:	60bd      	str	r5, [r7, #8]
  4079fa:	1815      	adds	r5, r2, r0
  4079fc:	686d      	ldr	r5, [r5, #4]
  4079fe:	07ed      	lsls	r5, r5, #31
  407a00:	d53e      	bpl.n	407a80 <_free_r+0xd0>
  407a02:	f043 0201 	orr.w	r2, r3, #1
  407a06:	6062      	str	r2, [r4, #4]
  407a08:	50e3      	str	r3, [r4, r3]
  407a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407a0e:	d217      	bcs.n	407a40 <_free_r+0x90>
  407a10:	08db      	lsrs	r3, r3, #3
  407a12:	1c58      	adds	r0, r3, #1
  407a14:	109a      	asrs	r2, r3, #2
  407a16:	684d      	ldr	r5, [r1, #4]
  407a18:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407a1c:	60a7      	str	r7, [r4, #8]
  407a1e:	2301      	movs	r3, #1
  407a20:	4093      	lsls	r3, r2
  407a22:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407a26:	432b      	orrs	r3, r5
  407a28:	3a08      	subs	r2, #8
  407a2a:	60e2      	str	r2, [r4, #12]
  407a2c:	604b      	str	r3, [r1, #4]
  407a2e:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407a32:	60fc      	str	r4, [r7, #12]
  407a34:	4640      	mov	r0, r8
  407a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407a3a:	f7fc bae9 	b.w	404010 <__malloc_unlock>
  407a3e:	4770      	bx	lr
  407a40:	0a5a      	lsrs	r2, r3, #9
  407a42:	2a04      	cmp	r2, #4
  407a44:	d852      	bhi.n	407aec <_free_r+0x13c>
  407a46:	099a      	lsrs	r2, r3, #6
  407a48:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407a4c:	00ff      	lsls	r7, r7, #3
  407a4e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407a52:	19c8      	adds	r0, r1, r7
  407a54:	59ca      	ldr	r2, [r1, r7]
  407a56:	3808      	subs	r0, #8
  407a58:	4290      	cmp	r0, r2
  407a5a:	d04f      	beq.n	407afc <_free_r+0x14c>
  407a5c:	6851      	ldr	r1, [r2, #4]
  407a5e:	f021 0103 	bic.w	r1, r1, #3
  407a62:	428b      	cmp	r3, r1
  407a64:	d232      	bcs.n	407acc <_free_r+0x11c>
  407a66:	6892      	ldr	r2, [r2, #8]
  407a68:	4290      	cmp	r0, r2
  407a6a:	d1f7      	bne.n	407a5c <_free_r+0xac>
  407a6c:	68c3      	ldr	r3, [r0, #12]
  407a6e:	60a0      	str	r0, [r4, #8]
  407a70:	60e3      	str	r3, [r4, #12]
  407a72:	609c      	str	r4, [r3, #8]
  407a74:	60c4      	str	r4, [r0, #12]
  407a76:	4640      	mov	r0, r8
  407a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407a7c:	f7fc bac8 	b.w	404010 <__malloc_unlock>
  407a80:	6895      	ldr	r5, [r2, #8]
  407a82:	4f3b      	ldr	r7, [pc, #236]	; (407b70 <_free_r+0x1c0>)
  407a84:	42bd      	cmp	r5, r7
  407a86:	4403      	add	r3, r0
  407a88:	d040      	beq.n	407b0c <_free_r+0x15c>
  407a8a:	68d0      	ldr	r0, [r2, #12]
  407a8c:	60e8      	str	r0, [r5, #12]
  407a8e:	f043 0201 	orr.w	r2, r3, #1
  407a92:	6085      	str	r5, [r0, #8]
  407a94:	6062      	str	r2, [r4, #4]
  407a96:	50e3      	str	r3, [r4, r3]
  407a98:	e7b7      	b.n	407a0a <_free_r+0x5a>
  407a9a:	07ff      	lsls	r7, r7, #31
  407a9c:	4403      	add	r3, r0
  407a9e:	d407      	bmi.n	407ab0 <_free_r+0x100>
  407aa0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407aa4:	1aa4      	subs	r4, r4, r2
  407aa6:	4413      	add	r3, r2
  407aa8:	68a0      	ldr	r0, [r4, #8]
  407aaa:	68e2      	ldr	r2, [r4, #12]
  407aac:	60c2      	str	r2, [r0, #12]
  407aae:	6090      	str	r0, [r2, #8]
  407ab0:	4a30      	ldr	r2, [pc, #192]	; (407b74 <_free_r+0x1c4>)
  407ab2:	6812      	ldr	r2, [r2, #0]
  407ab4:	f043 0001 	orr.w	r0, r3, #1
  407ab8:	4293      	cmp	r3, r2
  407aba:	6060      	str	r0, [r4, #4]
  407abc:	608c      	str	r4, [r1, #8]
  407abe:	d3b9      	bcc.n	407a34 <_free_r+0x84>
  407ac0:	4b2d      	ldr	r3, [pc, #180]	; (407b78 <_free_r+0x1c8>)
  407ac2:	4640      	mov	r0, r8
  407ac4:	6819      	ldr	r1, [r3, #0]
  407ac6:	f7ff ff23 	bl	407910 <_malloc_trim_r>
  407aca:	e7b3      	b.n	407a34 <_free_r+0x84>
  407acc:	4610      	mov	r0, r2
  407ace:	e7cd      	b.n	407a6c <_free_r+0xbc>
  407ad0:	1811      	adds	r1, r2, r0
  407ad2:	6849      	ldr	r1, [r1, #4]
  407ad4:	07c9      	lsls	r1, r1, #31
  407ad6:	d444      	bmi.n	407b62 <_free_r+0x1b2>
  407ad8:	6891      	ldr	r1, [r2, #8]
  407ada:	68d2      	ldr	r2, [r2, #12]
  407adc:	60ca      	str	r2, [r1, #12]
  407ade:	4403      	add	r3, r0
  407ae0:	f043 0001 	orr.w	r0, r3, #1
  407ae4:	6091      	str	r1, [r2, #8]
  407ae6:	6060      	str	r0, [r4, #4]
  407ae8:	50e3      	str	r3, [r4, r3]
  407aea:	e7a3      	b.n	407a34 <_free_r+0x84>
  407aec:	2a14      	cmp	r2, #20
  407aee:	d816      	bhi.n	407b1e <_free_r+0x16e>
  407af0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407af4:	00ff      	lsls	r7, r7, #3
  407af6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407afa:	e7aa      	b.n	407a52 <_free_r+0xa2>
  407afc:	10aa      	asrs	r2, r5, #2
  407afe:	2301      	movs	r3, #1
  407b00:	684d      	ldr	r5, [r1, #4]
  407b02:	4093      	lsls	r3, r2
  407b04:	432b      	orrs	r3, r5
  407b06:	604b      	str	r3, [r1, #4]
  407b08:	4603      	mov	r3, r0
  407b0a:	e7b0      	b.n	407a6e <_free_r+0xbe>
  407b0c:	f043 0201 	orr.w	r2, r3, #1
  407b10:	614c      	str	r4, [r1, #20]
  407b12:	610c      	str	r4, [r1, #16]
  407b14:	60e5      	str	r5, [r4, #12]
  407b16:	60a5      	str	r5, [r4, #8]
  407b18:	6062      	str	r2, [r4, #4]
  407b1a:	50e3      	str	r3, [r4, r3]
  407b1c:	e78a      	b.n	407a34 <_free_r+0x84>
  407b1e:	2a54      	cmp	r2, #84	; 0x54
  407b20:	d806      	bhi.n	407b30 <_free_r+0x180>
  407b22:	0b1a      	lsrs	r2, r3, #12
  407b24:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407b28:	00ff      	lsls	r7, r7, #3
  407b2a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407b2e:	e790      	b.n	407a52 <_free_r+0xa2>
  407b30:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407b34:	d806      	bhi.n	407b44 <_free_r+0x194>
  407b36:	0bda      	lsrs	r2, r3, #15
  407b38:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407b3c:	00ff      	lsls	r7, r7, #3
  407b3e:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407b42:	e786      	b.n	407a52 <_free_r+0xa2>
  407b44:	f240 5054 	movw	r0, #1364	; 0x554
  407b48:	4282      	cmp	r2, r0
  407b4a:	d806      	bhi.n	407b5a <_free_r+0x1aa>
  407b4c:	0c9a      	lsrs	r2, r3, #18
  407b4e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407b52:	00ff      	lsls	r7, r7, #3
  407b54:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407b58:	e77b      	b.n	407a52 <_free_r+0xa2>
  407b5a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407b5e:	257e      	movs	r5, #126	; 0x7e
  407b60:	e777      	b.n	407a52 <_free_r+0xa2>
  407b62:	f043 0101 	orr.w	r1, r3, #1
  407b66:	6061      	str	r1, [r4, #4]
  407b68:	6013      	str	r3, [r2, #0]
  407b6a:	e763      	b.n	407a34 <_free_r+0x84>
  407b6c:	20400450 	.word	0x20400450
  407b70:	20400458 	.word	0x20400458
  407b74:	2040085c 	.word	0x2040085c
  407b78:	20400de0 	.word	0x20400de0

00407b7c <__sfvwrite_r>:
  407b7c:	6893      	ldr	r3, [r2, #8]
  407b7e:	2b00      	cmp	r3, #0
  407b80:	d073      	beq.n	407c6a <__sfvwrite_r+0xee>
  407b82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407b86:	898b      	ldrh	r3, [r1, #12]
  407b88:	b083      	sub	sp, #12
  407b8a:	460c      	mov	r4, r1
  407b8c:	0719      	lsls	r1, r3, #28
  407b8e:	9000      	str	r0, [sp, #0]
  407b90:	4616      	mov	r6, r2
  407b92:	d526      	bpl.n	407be2 <__sfvwrite_r+0x66>
  407b94:	6922      	ldr	r2, [r4, #16]
  407b96:	b322      	cbz	r2, 407be2 <__sfvwrite_r+0x66>
  407b98:	f013 0002 	ands.w	r0, r3, #2
  407b9c:	6835      	ldr	r5, [r6, #0]
  407b9e:	d02c      	beq.n	407bfa <__sfvwrite_r+0x7e>
  407ba0:	f04f 0900 	mov.w	r9, #0
  407ba4:	4fb0      	ldr	r7, [pc, #704]	; (407e68 <__sfvwrite_r+0x2ec>)
  407ba6:	46c8      	mov	r8, r9
  407ba8:	46b2      	mov	sl, r6
  407baa:	45b8      	cmp	r8, r7
  407bac:	4643      	mov	r3, r8
  407bae:	464a      	mov	r2, r9
  407bb0:	bf28      	it	cs
  407bb2:	463b      	movcs	r3, r7
  407bb4:	9800      	ldr	r0, [sp, #0]
  407bb6:	f1b8 0f00 	cmp.w	r8, #0
  407bba:	d050      	beq.n	407c5e <__sfvwrite_r+0xe2>
  407bbc:	69e1      	ldr	r1, [r4, #28]
  407bbe:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407bc0:	47b0      	blx	r6
  407bc2:	2800      	cmp	r0, #0
  407bc4:	dd58      	ble.n	407c78 <__sfvwrite_r+0xfc>
  407bc6:	f8da 3008 	ldr.w	r3, [sl, #8]
  407bca:	1a1b      	subs	r3, r3, r0
  407bcc:	4481      	add	r9, r0
  407bce:	eba8 0800 	sub.w	r8, r8, r0
  407bd2:	f8ca 3008 	str.w	r3, [sl, #8]
  407bd6:	2b00      	cmp	r3, #0
  407bd8:	d1e7      	bne.n	407baa <__sfvwrite_r+0x2e>
  407bda:	2000      	movs	r0, #0
  407bdc:	b003      	add	sp, #12
  407bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407be2:	4621      	mov	r1, r4
  407be4:	9800      	ldr	r0, [sp, #0]
  407be6:	f7fe fc91 	bl	40650c <__swsetup_r>
  407bea:	2800      	cmp	r0, #0
  407bec:	f040 8133 	bne.w	407e56 <__sfvwrite_r+0x2da>
  407bf0:	89a3      	ldrh	r3, [r4, #12]
  407bf2:	6835      	ldr	r5, [r6, #0]
  407bf4:	f013 0002 	ands.w	r0, r3, #2
  407bf8:	d1d2      	bne.n	407ba0 <__sfvwrite_r+0x24>
  407bfa:	f013 0901 	ands.w	r9, r3, #1
  407bfe:	d145      	bne.n	407c8c <__sfvwrite_r+0x110>
  407c00:	464f      	mov	r7, r9
  407c02:	9601      	str	r6, [sp, #4]
  407c04:	b337      	cbz	r7, 407c54 <__sfvwrite_r+0xd8>
  407c06:	059a      	lsls	r2, r3, #22
  407c08:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407c0c:	f140 8083 	bpl.w	407d16 <__sfvwrite_r+0x19a>
  407c10:	4547      	cmp	r7, r8
  407c12:	46c3      	mov	fp, r8
  407c14:	f0c0 80ab 	bcc.w	407d6e <__sfvwrite_r+0x1f2>
  407c18:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407c1c:	f040 80ac 	bne.w	407d78 <__sfvwrite_r+0x1fc>
  407c20:	6820      	ldr	r0, [r4, #0]
  407c22:	46ba      	mov	sl, r7
  407c24:	465a      	mov	r2, fp
  407c26:	4649      	mov	r1, r9
  407c28:	f000 fa52 	bl	4080d0 <memmove>
  407c2c:	68a2      	ldr	r2, [r4, #8]
  407c2e:	6823      	ldr	r3, [r4, #0]
  407c30:	eba2 0208 	sub.w	r2, r2, r8
  407c34:	445b      	add	r3, fp
  407c36:	60a2      	str	r2, [r4, #8]
  407c38:	6023      	str	r3, [r4, #0]
  407c3a:	9a01      	ldr	r2, [sp, #4]
  407c3c:	6893      	ldr	r3, [r2, #8]
  407c3e:	eba3 030a 	sub.w	r3, r3, sl
  407c42:	44d1      	add	r9, sl
  407c44:	eba7 070a 	sub.w	r7, r7, sl
  407c48:	6093      	str	r3, [r2, #8]
  407c4a:	2b00      	cmp	r3, #0
  407c4c:	d0c5      	beq.n	407bda <__sfvwrite_r+0x5e>
  407c4e:	89a3      	ldrh	r3, [r4, #12]
  407c50:	2f00      	cmp	r7, #0
  407c52:	d1d8      	bne.n	407c06 <__sfvwrite_r+0x8a>
  407c54:	f8d5 9000 	ldr.w	r9, [r5]
  407c58:	686f      	ldr	r7, [r5, #4]
  407c5a:	3508      	adds	r5, #8
  407c5c:	e7d2      	b.n	407c04 <__sfvwrite_r+0x88>
  407c5e:	f8d5 9000 	ldr.w	r9, [r5]
  407c62:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407c66:	3508      	adds	r5, #8
  407c68:	e79f      	b.n	407baa <__sfvwrite_r+0x2e>
  407c6a:	2000      	movs	r0, #0
  407c6c:	4770      	bx	lr
  407c6e:	4621      	mov	r1, r4
  407c70:	9800      	ldr	r0, [sp, #0]
  407c72:	f7ff fd1f 	bl	4076b4 <_fflush_r>
  407c76:	b370      	cbz	r0, 407cd6 <__sfvwrite_r+0x15a>
  407c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407c80:	f04f 30ff 	mov.w	r0, #4294967295
  407c84:	81a3      	strh	r3, [r4, #12]
  407c86:	b003      	add	sp, #12
  407c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407c8c:	4681      	mov	r9, r0
  407c8e:	4633      	mov	r3, r6
  407c90:	464e      	mov	r6, r9
  407c92:	46a8      	mov	r8, r5
  407c94:	469a      	mov	sl, r3
  407c96:	464d      	mov	r5, r9
  407c98:	b34e      	cbz	r6, 407cee <__sfvwrite_r+0x172>
  407c9a:	b380      	cbz	r0, 407cfe <__sfvwrite_r+0x182>
  407c9c:	6820      	ldr	r0, [r4, #0]
  407c9e:	6923      	ldr	r3, [r4, #16]
  407ca0:	6962      	ldr	r2, [r4, #20]
  407ca2:	45b1      	cmp	r9, r6
  407ca4:	46cb      	mov	fp, r9
  407ca6:	bf28      	it	cs
  407ca8:	46b3      	movcs	fp, r6
  407caa:	4298      	cmp	r0, r3
  407cac:	465f      	mov	r7, fp
  407cae:	d904      	bls.n	407cba <__sfvwrite_r+0x13e>
  407cb0:	68a3      	ldr	r3, [r4, #8]
  407cb2:	4413      	add	r3, r2
  407cb4:	459b      	cmp	fp, r3
  407cb6:	f300 80a6 	bgt.w	407e06 <__sfvwrite_r+0x28a>
  407cba:	4593      	cmp	fp, r2
  407cbc:	db4b      	blt.n	407d56 <__sfvwrite_r+0x1da>
  407cbe:	4613      	mov	r3, r2
  407cc0:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407cc2:	69e1      	ldr	r1, [r4, #28]
  407cc4:	9800      	ldr	r0, [sp, #0]
  407cc6:	462a      	mov	r2, r5
  407cc8:	47b8      	blx	r7
  407cca:	1e07      	subs	r7, r0, #0
  407ccc:	ddd4      	ble.n	407c78 <__sfvwrite_r+0xfc>
  407cce:	ebb9 0907 	subs.w	r9, r9, r7
  407cd2:	d0cc      	beq.n	407c6e <__sfvwrite_r+0xf2>
  407cd4:	2001      	movs	r0, #1
  407cd6:	f8da 3008 	ldr.w	r3, [sl, #8]
  407cda:	1bdb      	subs	r3, r3, r7
  407cdc:	443d      	add	r5, r7
  407cde:	1bf6      	subs	r6, r6, r7
  407ce0:	f8ca 3008 	str.w	r3, [sl, #8]
  407ce4:	2b00      	cmp	r3, #0
  407ce6:	f43f af78 	beq.w	407bda <__sfvwrite_r+0x5e>
  407cea:	2e00      	cmp	r6, #0
  407cec:	d1d5      	bne.n	407c9a <__sfvwrite_r+0x11e>
  407cee:	f108 0308 	add.w	r3, r8, #8
  407cf2:	e913 0060 	ldmdb	r3, {r5, r6}
  407cf6:	4698      	mov	r8, r3
  407cf8:	3308      	adds	r3, #8
  407cfa:	2e00      	cmp	r6, #0
  407cfc:	d0f9      	beq.n	407cf2 <__sfvwrite_r+0x176>
  407cfe:	4632      	mov	r2, r6
  407d00:	210a      	movs	r1, #10
  407d02:	4628      	mov	r0, r5
  407d04:	f000 f994 	bl	408030 <memchr>
  407d08:	2800      	cmp	r0, #0
  407d0a:	f000 80a1 	beq.w	407e50 <__sfvwrite_r+0x2d4>
  407d0e:	3001      	adds	r0, #1
  407d10:	eba0 0905 	sub.w	r9, r0, r5
  407d14:	e7c2      	b.n	407c9c <__sfvwrite_r+0x120>
  407d16:	6820      	ldr	r0, [r4, #0]
  407d18:	6923      	ldr	r3, [r4, #16]
  407d1a:	4298      	cmp	r0, r3
  407d1c:	d802      	bhi.n	407d24 <__sfvwrite_r+0x1a8>
  407d1e:	6963      	ldr	r3, [r4, #20]
  407d20:	429f      	cmp	r7, r3
  407d22:	d25d      	bcs.n	407de0 <__sfvwrite_r+0x264>
  407d24:	45b8      	cmp	r8, r7
  407d26:	bf28      	it	cs
  407d28:	46b8      	movcs	r8, r7
  407d2a:	4642      	mov	r2, r8
  407d2c:	4649      	mov	r1, r9
  407d2e:	f000 f9cf 	bl	4080d0 <memmove>
  407d32:	68a3      	ldr	r3, [r4, #8]
  407d34:	6822      	ldr	r2, [r4, #0]
  407d36:	eba3 0308 	sub.w	r3, r3, r8
  407d3a:	4442      	add	r2, r8
  407d3c:	60a3      	str	r3, [r4, #8]
  407d3e:	6022      	str	r2, [r4, #0]
  407d40:	b10b      	cbz	r3, 407d46 <__sfvwrite_r+0x1ca>
  407d42:	46c2      	mov	sl, r8
  407d44:	e779      	b.n	407c3a <__sfvwrite_r+0xbe>
  407d46:	4621      	mov	r1, r4
  407d48:	9800      	ldr	r0, [sp, #0]
  407d4a:	f7ff fcb3 	bl	4076b4 <_fflush_r>
  407d4e:	2800      	cmp	r0, #0
  407d50:	d192      	bne.n	407c78 <__sfvwrite_r+0xfc>
  407d52:	46c2      	mov	sl, r8
  407d54:	e771      	b.n	407c3a <__sfvwrite_r+0xbe>
  407d56:	465a      	mov	r2, fp
  407d58:	4629      	mov	r1, r5
  407d5a:	f000 f9b9 	bl	4080d0 <memmove>
  407d5e:	68a2      	ldr	r2, [r4, #8]
  407d60:	6823      	ldr	r3, [r4, #0]
  407d62:	eba2 020b 	sub.w	r2, r2, fp
  407d66:	445b      	add	r3, fp
  407d68:	60a2      	str	r2, [r4, #8]
  407d6a:	6023      	str	r3, [r4, #0]
  407d6c:	e7af      	b.n	407cce <__sfvwrite_r+0x152>
  407d6e:	6820      	ldr	r0, [r4, #0]
  407d70:	46b8      	mov	r8, r7
  407d72:	46ba      	mov	sl, r7
  407d74:	46bb      	mov	fp, r7
  407d76:	e755      	b.n	407c24 <__sfvwrite_r+0xa8>
  407d78:	6962      	ldr	r2, [r4, #20]
  407d7a:	6820      	ldr	r0, [r4, #0]
  407d7c:	6921      	ldr	r1, [r4, #16]
  407d7e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407d82:	eba0 0a01 	sub.w	sl, r0, r1
  407d86:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407d8a:	f10a 0001 	add.w	r0, sl, #1
  407d8e:	ea4f 0868 	mov.w	r8, r8, asr #1
  407d92:	4438      	add	r0, r7
  407d94:	4540      	cmp	r0, r8
  407d96:	4642      	mov	r2, r8
  407d98:	bf84      	itt	hi
  407d9a:	4680      	movhi	r8, r0
  407d9c:	4642      	movhi	r2, r8
  407d9e:	055b      	lsls	r3, r3, #21
  407da0:	d544      	bpl.n	407e2c <__sfvwrite_r+0x2b0>
  407da2:	4611      	mov	r1, r2
  407da4:	9800      	ldr	r0, [sp, #0]
  407da6:	f7fb fd95 	bl	4038d4 <_malloc_r>
  407daa:	4683      	mov	fp, r0
  407dac:	2800      	cmp	r0, #0
  407dae:	d055      	beq.n	407e5c <__sfvwrite_r+0x2e0>
  407db0:	4652      	mov	r2, sl
  407db2:	6921      	ldr	r1, [r4, #16]
  407db4:	f7fc f83e 	bl	403e34 <memcpy>
  407db8:	89a3      	ldrh	r3, [r4, #12]
  407dba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407dc2:	81a3      	strh	r3, [r4, #12]
  407dc4:	eb0b 000a 	add.w	r0, fp, sl
  407dc8:	eba8 030a 	sub.w	r3, r8, sl
  407dcc:	f8c4 b010 	str.w	fp, [r4, #16]
  407dd0:	f8c4 8014 	str.w	r8, [r4, #20]
  407dd4:	6020      	str	r0, [r4, #0]
  407dd6:	60a3      	str	r3, [r4, #8]
  407dd8:	46b8      	mov	r8, r7
  407dda:	46ba      	mov	sl, r7
  407ddc:	46bb      	mov	fp, r7
  407dde:	e721      	b.n	407c24 <__sfvwrite_r+0xa8>
  407de0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407de4:	42b9      	cmp	r1, r7
  407de6:	bf28      	it	cs
  407de8:	4639      	movcs	r1, r7
  407dea:	464a      	mov	r2, r9
  407dec:	fb91 f1f3 	sdiv	r1, r1, r3
  407df0:	9800      	ldr	r0, [sp, #0]
  407df2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407df4:	fb03 f301 	mul.w	r3, r3, r1
  407df8:	69e1      	ldr	r1, [r4, #28]
  407dfa:	47b0      	blx	r6
  407dfc:	f1b0 0a00 	subs.w	sl, r0, #0
  407e00:	f73f af1b 	bgt.w	407c3a <__sfvwrite_r+0xbe>
  407e04:	e738      	b.n	407c78 <__sfvwrite_r+0xfc>
  407e06:	461a      	mov	r2, r3
  407e08:	4629      	mov	r1, r5
  407e0a:	9301      	str	r3, [sp, #4]
  407e0c:	f000 f960 	bl	4080d0 <memmove>
  407e10:	6822      	ldr	r2, [r4, #0]
  407e12:	9b01      	ldr	r3, [sp, #4]
  407e14:	9800      	ldr	r0, [sp, #0]
  407e16:	441a      	add	r2, r3
  407e18:	6022      	str	r2, [r4, #0]
  407e1a:	4621      	mov	r1, r4
  407e1c:	f7ff fc4a 	bl	4076b4 <_fflush_r>
  407e20:	9b01      	ldr	r3, [sp, #4]
  407e22:	2800      	cmp	r0, #0
  407e24:	f47f af28 	bne.w	407c78 <__sfvwrite_r+0xfc>
  407e28:	461f      	mov	r7, r3
  407e2a:	e750      	b.n	407cce <__sfvwrite_r+0x152>
  407e2c:	9800      	ldr	r0, [sp, #0]
  407e2e:	f000 fcad 	bl	40878c <_realloc_r>
  407e32:	4683      	mov	fp, r0
  407e34:	2800      	cmp	r0, #0
  407e36:	d1c5      	bne.n	407dc4 <__sfvwrite_r+0x248>
  407e38:	9d00      	ldr	r5, [sp, #0]
  407e3a:	6921      	ldr	r1, [r4, #16]
  407e3c:	4628      	mov	r0, r5
  407e3e:	f7ff fdb7 	bl	4079b0 <_free_r>
  407e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e46:	220c      	movs	r2, #12
  407e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407e4c:	602a      	str	r2, [r5, #0]
  407e4e:	e715      	b.n	407c7c <__sfvwrite_r+0x100>
  407e50:	f106 0901 	add.w	r9, r6, #1
  407e54:	e722      	b.n	407c9c <__sfvwrite_r+0x120>
  407e56:	f04f 30ff 	mov.w	r0, #4294967295
  407e5a:	e6bf      	b.n	407bdc <__sfvwrite_r+0x60>
  407e5c:	9a00      	ldr	r2, [sp, #0]
  407e5e:	230c      	movs	r3, #12
  407e60:	6013      	str	r3, [r2, #0]
  407e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407e66:	e709      	b.n	407c7c <__sfvwrite_r+0x100>
  407e68:	7ffffc00 	.word	0x7ffffc00

00407e6c <_fwalk_reent>:
  407e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407e70:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407e74:	d01f      	beq.n	407eb6 <_fwalk_reent+0x4a>
  407e76:	4688      	mov	r8, r1
  407e78:	4606      	mov	r6, r0
  407e7a:	f04f 0900 	mov.w	r9, #0
  407e7e:	687d      	ldr	r5, [r7, #4]
  407e80:	68bc      	ldr	r4, [r7, #8]
  407e82:	3d01      	subs	r5, #1
  407e84:	d411      	bmi.n	407eaa <_fwalk_reent+0x3e>
  407e86:	89a3      	ldrh	r3, [r4, #12]
  407e88:	2b01      	cmp	r3, #1
  407e8a:	f105 35ff 	add.w	r5, r5, #4294967295
  407e8e:	d908      	bls.n	407ea2 <_fwalk_reent+0x36>
  407e90:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407e94:	3301      	adds	r3, #1
  407e96:	4621      	mov	r1, r4
  407e98:	4630      	mov	r0, r6
  407e9a:	d002      	beq.n	407ea2 <_fwalk_reent+0x36>
  407e9c:	47c0      	blx	r8
  407e9e:	ea49 0900 	orr.w	r9, r9, r0
  407ea2:	1c6b      	adds	r3, r5, #1
  407ea4:	f104 0468 	add.w	r4, r4, #104	; 0x68
  407ea8:	d1ed      	bne.n	407e86 <_fwalk_reent+0x1a>
  407eaa:	683f      	ldr	r7, [r7, #0]
  407eac:	2f00      	cmp	r7, #0
  407eae:	d1e6      	bne.n	407e7e <_fwalk_reent+0x12>
  407eb0:	4648      	mov	r0, r9
  407eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407eb6:	46b9      	mov	r9, r7
  407eb8:	4648      	mov	r0, r9
  407eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407ebe:	bf00      	nop

00407ec0 <__locale_mb_cur_max>:
  407ec0:	4b04      	ldr	r3, [pc, #16]	; (407ed4 <__locale_mb_cur_max+0x14>)
  407ec2:	4a05      	ldr	r2, [pc, #20]	; (407ed8 <__locale_mb_cur_max+0x18>)
  407ec4:	681b      	ldr	r3, [r3, #0]
  407ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  407ec8:	2b00      	cmp	r3, #0
  407eca:	bf08      	it	eq
  407ecc:	4613      	moveq	r3, r2
  407ece:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  407ed2:	4770      	bx	lr
  407ed4:	20400024 	.word	0x20400024
  407ed8:	20400864 	.word	0x20400864

00407edc <_localeconv_r>:
  407edc:	4a04      	ldr	r2, [pc, #16]	; (407ef0 <_localeconv_r+0x14>)
  407ede:	4b05      	ldr	r3, [pc, #20]	; (407ef4 <_localeconv_r+0x18>)
  407ee0:	6812      	ldr	r2, [r2, #0]
  407ee2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  407ee4:	2800      	cmp	r0, #0
  407ee6:	bf08      	it	eq
  407ee8:	4618      	moveq	r0, r3
  407eea:	30f0      	adds	r0, #240	; 0xf0
  407eec:	4770      	bx	lr
  407eee:	bf00      	nop
  407ef0:	20400024 	.word	0x20400024
  407ef4:	20400864 	.word	0x20400864

00407ef8 <__retarget_lock_init_recursive>:
  407ef8:	4770      	bx	lr
  407efa:	bf00      	nop

00407efc <__retarget_lock_close_recursive>:
  407efc:	4770      	bx	lr
  407efe:	bf00      	nop

00407f00 <__retarget_lock_acquire_recursive>:
  407f00:	4770      	bx	lr
  407f02:	bf00      	nop

00407f04 <__retarget_lock_release_recursive>:
  407f04:	4770      	bx	lr
  407f06:	bf00      	nop

00407f08 <__swhatbuf_r>:
  407f08:	b570      	push	{r4, r5, r6, lr}
  407f0a:	460c      	mov	r4, r1
  407f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  407f10:	2900      	cmp	r1, #0
  407f12:	b090      	sub	sp, #64	; 0x40
  407f14:	4615      	mov	r5, r2
  407f16:	461e      	mov	r6, r3
  407f18:	db14      	blt.n	407f44 <__swhatbuf_r+0x3c>
  407f1a:	aa01      	add	r2, sp, #4
  407f1c:	f001 f84a 	bl	408fb4 <_fstat_r>
  407f20:	2800      	cmp	r0, #0
  407f22:	db0f      	blt.n	407f44 <__swhatbuf_r+0x3c>
  407f24:	9a02      	ldr	r2, [sp, #8]
  407f26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  407f2a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  407f2e:	fab2 f282 	clz	r2, r2
  407f32:	0952      	lsrs	r2, r2, #5
  407f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407f38:	f44f 6000 	mov.w	r0, #2048	; 0x800
  407f3c:	6032      	str	r2, [r6, #0]
  407f3e:	602b      	str	r3, [r5, #0]
  407f40:	b010      	add	sp, #64	; 0x40
  407f42:	bd70      	pop	{r4, r5, r6, pc}
  407f44:	89a2      	ldrh	r2, [r4, #12]
  407f46:	2300      	movs	r3, #0
  407f48:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  407f4c:	6033      	str	r3, [r6, #0]
  407f4e:	d004      	beq.n	407f5a <__swhatbuf_r+0x52>
  407f50:	2240      	movs	r2, #64	; 0x40
  407f52:	4618      	mov	r0, r3
  407f54:	602a      	str	r2, [r5, #0]
  407f56:	b010      	add	sp, #64	; 0x40
  407f58:	bd70      	pop	{r4, r5, r6, pc}
  407f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  407f5e:	602b      	str	r3, [r5, #0]
  407f60:	b010      	add	sp, #64	; 0x40
  407f62:	bd70      	pop	{r4, r5, r6, pc}

00407f64 <__smakebuf_r>:
  407f64:	898a      	ldrh	r2, [r1, #12]
  407f66:	0792      	lsls	r2, r2, #30
  407f68:	460b      	mov	r3, r1
  407f6a:	d506      	bpl.n	407f7a <__smakebuf_r+0x16>
  407f6c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  407f70:	2101      	movs	r1, #1
  407f72:	601a      	str	r2, [r3, #0]
  407f74:	611a      	str	r2, [r3, #16]
  407f76:	6159      	str	r1, [r3, #20]
  407f78:	4770      	bx	lr
  407f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
  407f7c:	b083      	sub	sp, #12
  407f7e:	ab01      	add	r3, sp, #4
  407f80:	466a      	mov	r2, sp
  407f82:	460c      	mov	r4, r1
  407f84:	4606      	mov	r6, r0
  407f86:	f7ff ffbf 	bl	407f08 <__swhatbuf_r>
  407f8a:	9900      	ldr	r1, [sp, #0]
  407f8c:	4605      	mov	r5, r0
  407f8e:	4630      	mov	r0, r6
  407f90:	f7fb fca0 	bl	4038d4 <_malloc_r>
  407f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407f98:	b1d8      	cbz	r0, 407fd2 <__smakebuf_r+0x6e>
  407f9a:	9a01      	ldr	r2, [sp, #4]
  407f9c:	4f15      	ldr	r7, [pc, #84]	; (407ff4 <__smakebuf_r+0x90>)
  407f9e:	9900      	ldr	r1, [sp, #0]
  407fa0:	63f7      	str	r7, [r6, #60]	; 0x3c
  407fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407fa6:	81a3      	strh	r3, [r4, #12]
  407fa8:	6020      	str	r0, [r4, #0]
  407faa:	6120      	str	r0, [r4, #16]
  407fac:	6161      	str	r1, [r4, #20]
  407fae:	b91a      	cbnz	r2, 407fb8 <__smakebuf_r+0x54>
  407fb0:	432b      	orrs	r3, r5
  407fb2:	81a3      	strh	r3, [r4, #12]
  407fb4:	b003      	add	sp, #12
  407fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  407fb8:	4630      	mov	r0, r6
  407fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  407fbe:	f001 f80d 	bl	408fdc <_isatty_r>
  407fc2:	b1a0      	cbz	r0, 407fee <__smakebuf_r+0x8a>
  407fc4:	89a3      	ldrh	r3, [r4, #12]
  407fc6:	f023 0303 	bic.w	r3, r3, #3
  407fca:	f043 0301 	orr.w	r3, r3, #1
  407fce:	b21b      	sxth	r3, r3
  407fd0:	e7ee      	b.n	407fb0 <__smakebuf_r+0x4c>
  407fd2:	059a      	lsls	r2, r3, #22
  407fd4:	d4ee      	bmi.n	407fb4 <__smakebuf_r+0x50>
  407fd6:	f023 0303 	bic.w	r3, r3, #3
  407fda:	f104 0243 	add.w	r2, r4, #67	; 0x43
  407fde:	f043 0302 	orr.w	r3, r3, #2
  407fe2:	2101      	movs	r1, #1
  407fe4:	81a3      	strh	r3, [r4, #12]
  407fe6:	6022      	str	r2, [r4, #0]
  407fe8:	6122      	str	r2, [r4, #16]
  407fea:	6161      	str	r1, [r4, #20]
  407fec:	e7e2      	b.n	407fb4 <__smakebuf_r+0x50>
  407fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407ff2:	e7dd      	b.n	407fb0 <__smakebuf_r+0x4c>
  407ff4:	00407709 	.word	0x00407709

00407ff8 <__ascii_mbtowc>:
  407ff8:	b082      	sub	sp, #8
  407ffa:	b149      	cbz	r1, 408010 <__ascii_mbtowc+0x18>
  407ffc:	b15a      	cbz	r2, 408016 <__ascii_mbtowc+0x1e>
  407ffe:	b16b      	cbz	r3, 40801c <__ascii_mbtowc+0x24>
  408000:	7813      	ldrb	r3, [r2, #0]
  408002:	600b      	str	r3, [r1, #0]
  408004:	7812      	ldrb	r2, [r2, #0]
  408006:	1c10      	adds	r0, r2, #0
  408008:	bf18      	it	ne
  40800a:	2001      	movne	r0, #1
  40800c:	b002      	add	sp, #8
  40800e:	4770      	bx	lr
  408010:	a901      	add	r1, sp, #4
  408012:	2a00      	cmp	r2, #0
  408014:	d1f3      	bne.n	407ffe <__ascii_mbtowc+0x6>
  408016:	4610      	mov	r0, r2
  408018:	b002      	add	sp, #8
  40801a:	4770      	bx	lr
  40801c:	f06f 0001 	mvn.w	r0, #1
  408020:	e7f4      	b.n	40800c <__ascii_mbtowc+0x14>
  408022:	bf00      	nop
	...

00408030 <memchr>:
  408030:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408034:	2a10      	cmp	r2, #16
  408036:	db2b      	blt.n	408090 <memchr+0x60>
  408038:	f010 0f07 	tst.w	r0, #7
  40803c:	d008      	beq.n	408050 <memchr+0x20>
  40803e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408042:	3a01      	subs	r2, #1
  408044:	428b      	cmp	r3, r1
  408046:	d02d      	beq.n	4080a4 <memchr+0x74>
  408048:	f010 0f07 	tst.w	r0, #7
  40804c:	b342      	cbz	r2, 4080a0 <memchr+0x70>
  40804e:	d1f6      	bne.n	40803e <memchr+0xe>
  408050:	b4f0      	push	{r4, r5, r6, r7}
  408052:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408056:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40805a:	f022 0407 	bic.w	r4, r2, #7
  40805e:	f07f 0700 	mvns.w	r7, #0
  408062:	2300      	movs	r3, #0
  408064:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408068:	3c08      	subs	r4, #8
  40806a:	ea85 0501 	eor.w	r5, r5, r1
  40806e:	ea86 0601 	eor.w	r6, r6, r1
  408072:	fa85 f547 	uadd8	r5, r5, r7
  408076:	faa3 f587 	sel	r5, r3, r7
  40807a:	fa86 f647 	uadd8	r6, r6, r7
  40807e:	faa5 f687 	sel	r6, r5, r7
  408082:	b98e      	cbnz	r6, 4080a8 <memchr+0x78>
  408084:	d1ee      	bne.n	408064 <memchr+0x34>
  408086:	bcf0      	pop	{r4, r5, r6, r7}
  408088:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40808c:	f002 0207 	and.w	r2, r2, #7
  408090:	b132      	cbz	r2, 4080a0 <memchr+0x70>
  408092:	f810 3b01 	ldrb.w	r3, [r0], #1
  408096:	3a01      	subs	r2, #1
  408098:	ea83 0301 	eor.w	r3, r3, r1
  40809c:	b113      	cbz	r3, 4080a4 <memchr+0x74>
  40809e:	d1f8      	bne.n	408092 <memchr+0x62>
  4080a0:	2000      	movs	r0, #0
  4080a2:	4770      	bx	lr
  4080a4:	3801      	subs	r0, #1
  4080a6:	4770      	bx	lr
  4080a8:	2d00      	cmp	r5, #0
  4080aa:	bf06      	itte	eq
  4080ac:	4635      	moveq	r5, r6
  4080ae:	3803      	subeq	r0, #3
  4080b0:	3807      	subne	r0, #7
  4080b2:	f015 0f01 	tst.w	r5, #1
  4080b6:	d107      	bne.n	4080c8 <memchr+0x98>
  4080b8:	3001      	adds	r0, #1
  4080ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4080be:	bf02      	ittt	eq
  4080c0:	3001      	addeq	r0, #1
  4080c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4080c6:	3001      	addeq	r0, #1
  4080c8:	bcf0      	pop	{r4, r5, r6, r7}
  4080ca:	3801      	subs	r0, #1
  4080cc:	4770      	bx	lr
  4080ce:	bf00      	nop

004080d0 <memmove>:
  4080d0:	4288      	cmp	r0, r1
  4080d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4080d4:	d90d      	bls.n	4080f2 <memmove+0x22>
  4080d6:	188b      	adds	r3, r1, r2
  4080d8:	4298      	cmp	r0, r3
  4080da:	d20a      	bcs.n	4080f2 <memmove+0x22>
  4080dc:	1884      	adds	r4, r0, r2
  4080de:	2a00      	cmp	r2, #0
  4080e0:	d051      	beq.n	408186 <memmove+0xb6>
  4080e2:	4622      	mov	r2, r4
  4080e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4080e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4080ec:	4299      	cmp	r1, r3
  4080ee:	d1f9      	bne.n	4080e4 <memmove+0x14>
  4080f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4080f2:	2a0f      	cmp	r2, #15
  4080f4:	d948      	bls.n	408188 <memmove+0xb8>
  4080f6:	ea41 0300 	orr.w	r3, r1, r0
  4080fa:	079b      	lsls	r3, r3, #30
  4080fc:	d146      	bne.n	40818c <memmove+0xbc>
  4080fe:	f100 0410 	add.w	r4, r0, #16
  408102:	f101 0310 	add.w	r3, r1, #16
  408106:	4615      	mov	r5, r2
  408108:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40810c:	f844 6c10 	str.w	r6, [r4, #-16]
  408110:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408114:	f844 6c0c 	str.w	r6, [r4, #-12]
  408118:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40811c:	f844 6c08 	str.w	r6, [r4, #-8]
  408120:	3d10      	subs	r5, #16
  408122:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408126:	f844 6c04 	str.w	r6, [r4, #-4]
  40812a:	2d0f      	cmp	r5, #15
  40812c:	f103 0310 	add.w	r3, r3, #16
  408130:	f104 0410 	add.w	r4, r4, #16
  408134:	d8e8      	bhi.n	408108 <memmove+0x38>
  408136:	f1a2 0310 	sub.w	r3, r2, #16
  40813a:	f023 030f 	bic.w	r3, r3, #15
  40813e:	f002 0e0f 	and.w	lr, r2, #15
  408142:	3310      	adds	r3, #16
  408144:	f1be 0f03 	cmp.w	lr, #3
  408148:	4419      	add	r1, r3
  40814a:	4403      	add	r3, r0
  40814c:	d921      	bls.n	408192 <memmove+0xc2>
  40814e:	1f1e      	subs	r6, r3, #4
  408150:	460d      	mov	r5, r1
  408152:	4674      	mov	r4, lr
  408154:	3c04      	subs	r4, #4
  408156:	f855 7b04 	ldr.w	r7, [r5], #4
  40815a:	f846 7f04 	str.w	r7, [r6, #4]!
  40815e:	2c03      	cmp	r4, #3
  408160:	d8f8      	bhi.n	408154 <memmove+0x84>
  408162:	f1ae 0404 	sub.w	r4, lr, #4
  408166:	f024 0403 	bic.w	r4, r4, #3
  40816a:	3404      	adds	r4, #4
  40816c:	4421      	add	r1, r4
  40816e:	4423      	add	r3, r4
  408170:	f002 0203 	and.w	r2, r2, #3
  408174:	b162      	cbz	r2, 408190 <memmove+0xc0>
  408176:	3b01      	subs	r3, #1
  408178:	440a      	add	r2, r1
  40817a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40817e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408182:	428a      	cmp	r2, r1
  408184:	d1f9      	bne.n	40817a <memmove+0xaa>
  408186:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408188:	4603      	mov	r3, r0
  40818a:	e7f3      	b.n	408174 <memmove+0xa4>
  40818c:	4603      	mov	r3, r0
  40818e:	e7f2      	b.n	408176 <memmove+0xa6>
  408190:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408192:	4672      	mov	r2, lr
  408194:	e7ee      	b.n	408174 <memmove+0xa4>
  408196:	bf00      	nop

00408198 <_Balloc>:
  408198:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40819a:	b570      	push	{r4, r5, r6, lr}
  40819c:	4605      	mov	r5, r0
  40819e:	460c      	mov	r4, r1
  4081a0:	b14b      	cbz	r3, 4081b6 <_Balloc+0x1e>
  4081a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4081a6:	b180      	cbz	r0, 4081ca <_Balloc+0x32>
  4081a8:	6802      	ldr	r2, [r0, #0]
  4081aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  4081ae:	2300      	movs	r3, #0
  4081b0:	6103      	str	r3, [r0, #16]
  4081b2:	60c3      	str	r3, [r0, #12]
  4081b4:	bd70      	pop	{r4, r5, r6, pc}
  4081b6:	2221      	movs	r2, #33	; 0x21
  4081b8:	2104      	movs	r1, #4
  4081ba:	f000 fe57 	bl	408e6c <_calloc_r>
  4081be:	64e8      	str	r0, [r5, #76]	; 0x4c
  4081c0:	4603      	mov	r3, r0
  4081c2:	2800      	cmp	r0, #0
  4081c4:	d1ed      	bne.n	4081a2 <_Balloc+0xa>
  4081c6:	2000      	movs	r0, #0
  4081c8:	bd70      	pop	{r4, r5, r6, pc}
  4081ca:	2101      	movs	r1, #1
  4081cc:	fa01 f604 	lsl.w	r6, r1, r4
  4081d0:	1d72      	adds	r2, r6, #5
  4081d2:	4628      	mov	r0, r5
  4081d4:	0092      	lsls	r2, r2, #2
  4081d6:	f000 fe49 	bl	408e6c <_calloc_r>
  4081da:	2800      	cmp	r0, #0
  4081dc:	d0f3      	beq.n	4081c6 <_Balloc+0x2e>
  4081de:	6044      	str	r4, [r0, #4]
  4081e0:	6086      	str	r6, [r0, #8]
  4081e2:	e7e4      	b.n	4081ae <_Balloc+0x16>

004081e4 <_Bfree>:
  4081e4:	b131      	cbz	r1, 4081f4 <_Bfree+0x10>
  4081e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4081e8:	684a      	ldr	r2, [r1, #4]
  4081ea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4081ee:	6008      	str	r0, [r1, #0]
  4081f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4081f4:	4770      	bx	lr
  4081f6:	bf00      	nop

004081f8 <__multadd>:
  4081f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4081fa:	690c      	ldr	r4, [r1, #16]
  4081fc:	b083      	sub	sp, #12
  4081fe:	460d      	mov	r5, r1
  408200:	4606      	mov	r6, r0
  408202:	f101 0e14 	add.w	lr, r1, #20
  408206:	2700      	movs	r7, #0
  408208:	f8de 0000 	ldr.w	r0, [lr]
  40820c:	b281      	uxth	r1, r0
  40820e:	fb02 3301 	mla	r3, r2, r1, r3
  408212:	0c01      	lsrs	r1, r0, #16
  408214:	0c18      	lsrs	r0, r3, #16
  408216:	fb02 0101 	mla	r1, r2, r1, r0
  40821a:	b29b      	uxth	r3, r3
  40821c:	3701      	adds	r7, #1
  40821e:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  408222:	42bc      	cmp	r4, r7
  408224:	f84e 3b04 	str.w	r3, [lr], #4
  408228:	ea4f 4311 	mov.w	r3, r1, lsr #16
  40822c:	dcec      	bgt.n	408208 <__multadd+0x10>
  40822e:	b13b      	cbz	r3, 408240 <__multadd+0x48>
  408230:	68aa      	ldr	r2, [r5, #8]
  408232:	4294      	cmp	r4, r2
  408234:	da07      	bge.n	408246 <__multadd+0x4e>
  408236:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40823a:	3401      	adds	r4, #1
  40823c:	6153      	str	r3, [r2, #20]
  40823e:	612c      	str	r4, [r5, #16]
  408240:	4628      	mov	r0, r5
  408242:	b003      	add	sp, #12
  408244:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408246:	6869      	ldr	r1, [r5, #4]
  408248:	9301      	str	r3, [sp, #4]
  40824a:	3101      	adds	r1, #1
  40824c:	4630      	mov	r0, r6
  40824e:	f7ff ffa3 	bl	408198 <_Balloc>
  408252:	692a      	ldr	r2, [r5, #16]
  408254:	3202      	adds	r2, #2
  408256:	f105 010c 	add.w	r1, r5, #12
  40825a:	4607      	mov	r7, r0
  40825c:	0092      	lsls	r2, r2, #2
  40825e:	300c      	adds	r0, #12
  408260:	f7fb fde8 	bl	403e34 <memcpy>
  408264:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  408266:	6869      	ldr	r1, [r5, #4]
  408268:	9b01      	ldr	r3, [sp, #4]
  40826a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40826e:	6028      	str	r0, [r5, #0]
  408270:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  408274:	463d      	mov	r5, r7
  408276:	e7de      	b.n	408236 <__multadd+0x3e>

00408278 <__hi0bits>:
  408278:	0c02      	lsrs	r2, r0, #16
  40827a:	0412      	lsls	r2, r2, #16
  40827c:	4603      	mov	r3, r0
  40827e:	b9b2      	cbnz	r2, 4082ae <__hi0bits+0x36>
  408280:	0403      	lsls	r3, r0, #16
  408282:	2010      	movs	r0, #16
  408284:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408288:	bf04      	itt	eq
  40828a:	021b      	lsleq	r3, r3, #8
  40828c:	3008      	addeq	r0, #8
  40828e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408292:	bf04      	itt	eq
  408294:	011b      	lsleq	r3, r3, #4
  408296:	3004      	addeq	r0, #4
  408298:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40829c:	bf04      	itt	eq
  40829e:	009b      	lsleq	r3, r3, #2
  4082a0:	3002      	addeq	r0, #2
  4082a2:	2b00      	cmp	r3, #0
  4082a4:	db02      	blt.n	4082ac <__hi0bits+0x34>
  4082a6:	005b      	lsls	r3, r3, #1
  4082a8:	d403      	bmi.n	4082b2 <__hi0bits+0x3a>
  4082aa:	2020      	movs	r0, #32
  4082ac:	4770      	bx	lr
  4082ae:	2000      	movs	r0, #0
  4082b0:	e7e8      	b.n	408284 <__hi0bits+0xc>
  4082b2:	3001      	adds	r0, #1
  4082b4:	4770      	bx	lr
  4082b6:	bf00      	nop

004082b8 <__lo0bits>:
  4082b8:	6803      	ldr	r3, [r0, #0]
  4082ba:	f013 0207 	ands.w	r2, r3, #7
  4082be:	4601      	mov	r1, r0
  4082c0:	d007      	beq.n	4082d2 <__lo0bits+0x1a>
  4082c2:	07da      	lsls	r2, r3, #31
  4082c4:	d421      	bmi.n	40830a <__lo0bits+0x52>
  4082c6:	0798      	lsls	r0, r3, #30
  4082c8:	d421      	bmi.n	40830e <__lo0bits+0x56>
  4082ca:	089b      	lsrs	r3, r3, #2
  4082cc:	600b      	str	r3, [r1, #0]
  4082ce:	2002      	movs	r0, #2
  4082d0:	4770      	bx	lr
  4082d2:	b298      	uxth	r0, r3
  4082d4:	b198      	cbz	r0, 4082fe <__lo0bits+0x46>
  4082d6:	4610      	mov	r0, r2
  4082d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4082dc:	bf04      	itt	eq
  4082de:	0a1b      	lsreq	r3, r3, #8
  4082e0:	3008      	addeq	r0, #8
  4082e2:	071a      	lsls	r2, r3, #28
  4082e4:	bf04      	itt	eq
  4082e6:	091b      	lsreq	r3, r3, #4
  4082e8:	3004      	addeq	r0, #4
  4082ea:	079a      	lsls	r2, r3, #30
  4082ec:	bf04      	itt	eq
  4082ee:	089b      	lsreq	r3, r3, #2
  4082f0:	3002      	addeq	r0, #2
  4082f2:	07da      	lsls	r2, r3, #31
  4082f4:	d407      	bmi.n	408306 <__lo0bits+0x4e>
  4082f6:	085b      	lsrs	r3, r3, #1
  4082f8:	d104      	bne.n	408304 <__lo0bits+0x4c>
  4082fa:	2020      	movs	r0, #32
  4082fc:	4770      	bx	lr
  4082fe:	0c1b      	lsrs	r3, r3, #16
  408300:	2010      	movs	r0, #16
  408302:	e7e9      	b.n	4082d8 <__lo0bits+0x20>
  408304:	3001      	adds	r0, #1
  408306:	600b      	str	r3, [r1, #0]
  408308:	4770      	bx	lr
  40830a:	2000      	movs	r0, #0
  40830c:	4770      	bx	lr
  40830e:	085b      	lsrs	r3, r3, #1
  408310:	600b      	str	r3, [r1, #0]
  408312:	2001      	movs	r0, #1
  408314:	4770      	bx	lr
  408316:	bf00      	nop

00408318 <__i2b>:
  408318:	b510      	push	{r4, lr}
  40831a:	460c      	mov	r4, r1
  40831c:	2101      	movs	r1, #1
  40831e:	f7ff ff3b 	bl	408198 <_Balloc>
  408322:	2201      	movs	r2, #1
  408324:	6144      	str	r4, [r0, #20]
  408326:	6102      	str	r2, [r0, #16]
  408328:	bd10      	pop	{r4, pc}
  40832a:	bf00      	nop

0040832c <__multiply>:
  40832c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408330:	690c      	ldr	r4, [r1, #16]
  408332:	6915      	ldr	r5, [r2, #16]
  408334:	42ac      	cmp	r4, r5
  408336:	b083      	sub	sp, #12
  408338:	468b      	mov	fp, r1
  40833a:	4616      	mov	r6, r2
  40833c:	da04      	bge.n	408348 <__multiply+0x1c>
  40833e:	4622      	mov	r2, r4
  408340:	46b3      	mov	fp, r6
  408342:	462c      	mov	r4, r5
  408344:	460e      	mov	r6, r1
  408346:	4615      	mov	r5, r2
  408348:	f8db 3008 	ldr.w	r3, [fp, #8]
  40834c:	f8db 1004 	ldr.w	r1, [fp, #4]
  408350:	eb04 0805 	add.w	r8, r4, r5
  408354:	4598      	cmp	r8, r3
  408356:	bfc8      	it	gt
  408358:	3101      	addgt	r1, #1
  40835a:	f7ff ff1d 	bl	408198 <_Balloc>
  40835e:	f100 0914 	add.w	r9, r0, #20
  408362:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  408366:	45d1      	cmp	r9, sl
  408368:	9000      	str	r0, [sp, #0]
  40836a:	d205      	bcs.n	408378 <__multiply+0x4c>
  40836c:	464b      	mov	r3, r9
  40836e:	2100      	movs	r1, #0
  408370:	f843 1b04 	str.w	r1, [r3], #4
  408374:	459a      	cmp	sl, r3
  408376:	d8fb      	bhi.n	408370 <__multiply+0x44>
  408378:	f106 0c14 	add.w	ip, r6, #20
  40837c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408380:	f10b 0b14 	add.w	fp, fp, #20
  408384:	459c      	cmp	ip, r3
  408386:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40838a:	d24c      	bcs.n	408426 <__multiply+0xfa>
  40838c:	f8cd a004 	str.w	sl, [sp, #4]
  408390:	469a      	mov	sl, r3
  408392:	f8dc 5000 	ldr.w	r5, [ip]
  408396:	b2af      	uxth	r7, r5
  408398:	b1ef      	cbz	r7, 4083d6 <__multiply+0xaa>
  40839a:	2100      	movs	r1, #0
  40839c:	464d      	mov	r5, r9
  40839e:	465e      	mov	r6, fp
  4083a0:	460c      	mov	r4, r1
  4083a2:	f856 2b04 	ldr.w	r2, [r6], #4
  4083a6:	6828      	ldr	r0, [r5, #0]
  4083a8:	b293      	uxth	r3, r2
  4083aa:	b281      	uxth	r1, r0
  4083ac:	fb07 1303 	mla	r3, r7, r3, r1
  4083b0:	0c12      	lsrs	r2, r2, #16
  4083b2:	0c01      	lsrs	r1, r0, #16
  4083b4:	4423      	add	r3, r4
  4083b6:	fb07 1102 	mla	r1, r7, r2, r1
  4083ba:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  4083be:	b29b      	uxth	r3, r3
  4083c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  4083c4:	45b6      	cmp	lr, r6
  4083c6:	f845 3b04 	str.w	r3, [r5], #4
  4083ca:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4083ce:	d8e8      	bhi.n	4083a2 <__multiply+0x76>
  4083d0:	602c      	str	r4, [r5, #0]
  4083d2:	f8dc 5000 	ldr.w	r5, [ip]
  4083d6:	0c2d      	lsrs	r5, r5, #16
  4083d8:	d01d      	beq.n	408416 <__multiply+0xea>
  4083da:	f8d9 3000 	ldr.w	r3, [r9]
  4083de:	4648      	mov	r0, r9
  4083e0:	461c      	mov	r4, r3
  4083e2:	4659      	mov	r1, fp
  4083e4:	2200      	movs	r2, #0
  4083e6:	880e      	ldrh	r6, [r1, #0]
  4083e8:	0c24      	lsrs	r4, r4, #16
  4083ea:	fb05 4406 	mla	r4, r5, r6, r4
  4083ee:	4422      	add	r2, r4
  4083f0:	b29b      	uxth	r3, r3
  4083f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4083f6:	f840 3b04 	str.w	r3, [r0], #4
  4083fa:	f851 3b04 	ldr.w	r3, [r1], #4
  4083fe:	6804      	ldr	r4, [r0, #0]
  408400:	0c1b      	lsrs	r3, r3, #16
  408402:	b2a6      	uxth	r6, r4
  408404:	fb05 6303 	mla	r3, r5, r3, r6
  408408:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  40840c:	458e      	cmp	lr, r1
  40840e:	ea4f 4213 	mov.w	r2, r3, lsr #16
  408412:	d8e8      	bhi.n	4083e6 <__multiply+0xba>
  408414:	6003      	str	r3, [r0, #0]
  408416:	f10c 0c04 	add.w	ip, ip, #4
  40841a:	45e2      	cmp	sl, ip
  40841c:	f109 0904 	add.w	r9, r9, #4
  408420:	d8b7      	bhi.n	408392 <__multiply+0x66>
  408422:	f8dd a004 	ldr.w	sl, [sp, #4]
  408426:	f1b8 0f00 	cmp.w	r8, #0
  40842a:	dd0b      	ble.n	408444 <__multiply+0x118>
  40842c:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  408430:	f1aa 0a04 	sub.w	sl, sl, #4
  408434:	b11b      	cbz	r3, 40843e <__multiply+0x112>
  408436:	e005      	b.n	408444 <__multiply+0x118>
  408438:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  40843c:	b913      	cbnz	r3, 408444 <__multiply+0x118>
  40843e:	f1b8 0801 	subs.w	r8, r8, #1
  408442:	d1f9      	bne.n	408438 <__multiply+0x10c>
  408444:	9800      	ldr	r0, [sp, #0]
  408446:	f8c0 8010 	str.w	r8, [r0, #16]
  40844a:	b003      	add	sp, #12
  40844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408450 <__pow5mult>:
  408450:	f012 0303 	ands.w	r3, r2, #3
  408454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408458:	4614      	mov	r4, r2
  40845a:	4607      	mov	r7, r0
  40845c:	d12e      	bne.n	4084bc <__pow5mult+0x6c>
  40845e:	460d      	mov	r5, r1
  408460:	10a4      	asrs	r4, r4, #2
  408462:	d01c      	beq.n	40849e <__pow5mult+0x4e>
  408464:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  408466:	b396      	cbz	r6, 4084ce <__pow5mult+0x7e>
  408468:	07e3      	lsls	r3, r4, #31
  40846a:	f04f 0800 	mov.w	r8, #0
  40846e:	d406      	bmi.n	40847e <__pow5mult+0x2e>
  408470:	1064      	asrs	r4, r4, #1
  408472:	d014      	beq.n	40849e <__pow5mult+0x4e>
  408474:	6830      	ldr	r0, [r6, #0]
  408476:	b1a8      	cbz	r0, 4084a4 <__pow5mult+0x54>
  408478:	4606      	mov	r6, r0
  40847a:	07e3      	lsls	r3, r4, #31
  40847c:	d5f8      	bpl.n	408470 <__pow5mult+0x20>
  40847e:	4632      	mov	r2, r6
  408480:	4629      	mov	r1, r5
  408482:	4638      	mov	r0, r7
  408484:	f7ff ff52 	bl	40832c <__multiply>
  408488:	b1b5      	cbz	r5, 4084b8 <__pow5mult+0x68>
  40848a:	686a      	ldr	r2, [r5, #4]
  40848c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40848e:	1064      	asrs	r4, r4, #1
  408490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408494:	6029      	str	r1, [r5, #0]
  408496:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40849a:	4605      	mov	r5, r0
  40849c:	d1ea      	bne.n	408474 <__pow5mult+0x24>
  40849e:	4628      	mov	r0, r5
  4084a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4084a4:	4632      	mov	r2, r6
  4084a6:	4631      	mov	r1, r6
  4084a8:	4638      	mov	r0, r7
  4084aa:	f7ff ff3f 	bl	40832c <__multiply>
  4084ae:	6030      	str	r0, [r6, #0]
  4084b0:	f8c0 8000 	str.w	r8, [r0]
  4084b4:	4606      	mov	r6, r0
  4084b6:	e7e0      	b.n	40847a <__pow5mult+0x2a>
  4084b8:	4605      	mov	r5, r0
  4084ba:	e7d9      	b.n	408470 <__pow5mult+0x20>
  4084bc:	1e5a      	subs	r2, r3, #1
  4084be:	4d0b      	ldr	r5, [pc, #44]	; (4084ec <__pow5mult+0x9c>)
  4084c0:	2300      	movs	r3, #0
  4084c2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4084c6:	f7ff fe97 	bl	4081f8 <__multadd>
  4084ca:	4605      	mov	r5, r0
  4084cc:	e7c8      	b.n	408460 <__pow5mult+0x10>
  4084ce:	2101      	movs	r1, #1
  4084d0:	4638      	mov	r0, r7
  4084d2:	f7ff fe61 	bl	408198 <_Balloc>
  4084d6:	f240 2171 	movw	r1, #625	; 0x271
  4084da:	2201      	movs	r2, #1
  4084dc:	2300      	movs	r3, #0
  4084de:	6141      	str	r1, [r0, #20]
  4084e0:	6102      	str	r2, [r0, #16]
  4084e2:	4606      	mov	r6, r0
  4084e4:	64b8      	str	r0, [r7, #72]	; 0x48
  4084e6:	6003      	str	r3, [r0, #0]
  4084e8:	e7be      	b.n	408468 <__pow5mult+0x18>
  4084ea:	bf00      	nop
  4084ec:	0040a218 	.word	0x0040a218

004084f0 <__lshift>:
  4084f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4084f4:	4691      	mov	r9, r2
  4084f6:	690a      	ldr	r2, [r1, #16]
  4084f8:	688b      	ldr	r3, [r1, #8]
  4084fa:	ea4f 1469 	mov.w	r4, r9, asr #5
  4084fe:	eb04 0802 	add.w	r8, r4, r2
  408502:	f108 0501 	add.w	r5, r8, #1
  408506:	429d      	cmp	r5, r3
  408508:	460e      	mov	r6, r1
  40850a:	4607      	mov	r7, r0
  40850c:	6849      	ldr	r1, [r1, #4]
  40850e:	dd04      	ble.n	40851a <__lshift+0x2a>
  408510:	005b      	lsls	r3, r3, #1
  408512:	429d      	cmp	r5, r3
  408514:	f101 0101 	add.w	r1, r1, #1
  408518:	dcfa      	bgt.n	408510 <__lshift+0x20>
  40851a:	4638      	mov	r0, r7
  40851c:	f7ff fe3c 	bl	408198 <_Balloc>
  408520:	2c00      	cmp	r4, #0
  408522:	f100 0314 	add.w	r3, r0, #20
  408526:	dd06      	ble.n	408536 <__lshift+0x46>
  408528:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  40852c:	2100      	movs	r1, #0
  40852e:	f843 1b04 	str.w	r1, [r3], #4
  408532:	429a      	cmp	r2, r3
  408534:	d1fb      	bne.n	40852e <__lshift+0x3e>
  408536:	6934      	ldr	r4, [r6, #16]
  408538:	f106 0114 	add.w	r1, r6, #20
  40853c:	f019 091f 	ands.w	r9, r9, #31
  408540:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  408544:	d01d      	beq.n	408582 <__lshift+0x92>
  408546:	f1c9 0c20 	rsb	ip, r9, #32
  40854a:	2200      	movs	r2, #0
  40854c:	680c      	ldr	r4, [r1, #0]
  40854e:	fa04 f409 	lsl.w	r4, r4, r9
  408552:	4314      	orrs	r4, r2
  408554:	f843 4b04 	str.w	r4, [r3], #4
  408558:	f851 2b04 	ldr.w	r2, [r1], #4
  40855c:	458e      	cmp	lr, r1
  40855e:	fa22 f20c 	lsr.w	r2, r2, ip
  408562:	d8f3      	bhi.n	40854c <__lshift+0x5c>
  408564:	601a      	str	r2, [r3, #0]
  408566:	b10a      	cbz	r2, 40856c <__lshift+0x7c>
  408568:	f108 0502 	add.w	r5, r8, #2
  40856c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40856e:	6872      	ldr	r2, [r6, #4]
  408570:	3d01      	subs	r5, #1
  408572:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408576:	6105      	str	r5, [r0, #16]
  408578:	6031      	str	r1, [r6, #0]
  40857a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40857e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408582:	3b04      	subs	r3, #4
  408584:	f851 2b04 	ldr.w	r2, [r1], #4
  408588:	f843 2f04 	str.w	r2, [r3, #4]!
  40858c:	458e      	cmp	lr, r1
  40858e:	d8f9      	bhi.n	408584 <__lshift+0x94>
  408590:	e7ec      	b.n	40856c <__lshift+0x7c>
  408592:	bf00      	nop

00408594 <__mcmp>:
  408594:	b430      	push	{r4, r5}
  408596:	690b      	ldr	r3, [r1, #16]
  408598:	4605      	mov	r5, r0
  40859a:	6900      	ldr	r0, [r0, #16]
  40859c:	1ac0      	subs	r0, r0, r3
  40859e:	d10f      	bne.n	4085c0 <__mcmp+0x2c>
  4085a0:	009b      	lsls	r3, r3, #2
  4085a2:	3514      	adds	r5, #20
  4085a4:	3114      	adds	r1, #20
  4085a6:	4419      	add	r1, r3
  4085a8:	442b      	add	r3, r5
  4085aa:	e001      	b.n	4085b0 <__mcmp+0x1c>
  4085ac:	429d      	cmp	r5, r3
  4085ae:	d207      	bcs.n	4085c0 <__mcmp+0x2c>
  4085b0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4085b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4085b8:	4294      	cmp	r4, r2
  4085ba:	d0f7      	beq.n	4085ac <__mcmp+0x18>
  4085bc:	d302      	bcc.n	4085c4 <__mcmp+0x30>
  4085be:	2001      	movs	r0, #1
  4085c0:	bc30      	pop	{r4, r5}
  4085c2:	4770      	bx	lr
  4085c4:	f04f 30ff 	mov.w	r0, #4294967295
  4085c8:	e7fa      	b.n	4085c0 <__mcmp+0x2c>
  4085ca:	bf00      	nop

004085cc <__mdiff>:
  4085cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4085d0:	690f      	ldr	r7, [r1, #16]
  4085d2:	460e      	mov	r6, r1
  4085d4:	6911      	ldr	r1, [r2, #16]
  4085d6:	1a7f      	subs	r7, r7, r1
  4085d8:	2f00      	cmp	r7, #0
  4085da:	4690      	mov	r8, r2
  4085dc:	d117      	bne.n	40860e <__mdiff+0x42>
  4085de:	0089      	lsls	r1, r1, #2
  4085e0:	f106 0514 	add.w	r5, r6, #20
  4085e4:	f102 0e14 	add.w	lr, r2, #20
  4085e8:	186b      	adds	r3, r5, r1
  4085ea:	4471      	add	r1, lr
  4085ec:	e001      	b.n	4085f2 <__mdiff+0x26>
  4085ee:	429d      	cmp	r5, r3
  4085f0:	d25c      	bcs.n	4086ac <__mdiff+0xe0>
  4085f2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4085f6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4085fa:	42a2      	cmp	r2, r4
  4085fc:	d0f7      	beq.n	4085ee <__mdiff+0x22>
  4085fe:	d25e      	bcs.n	4086be <__mdiff+0xf2>
  408600:	4633      	mov	r3, r6
  408602:	462c      	mov	r4, r5
  408604:	4646      	mov	r6, r8
  408606:	4675      	mov	r5, lr
  408608:	4698      	mov	r8, r3
  40860a:	2701      	movs	r7, #1
  40860c:	e005      	b.n	40861a <__mdiff+0x4e>
  40860e:	db58      	blt.n	4086c2 <__mdiff+0xf6>
  408610:	f106 0514 	add.w	r5, r6, #20
  408614:	f108 0414 	add.w	r4, r8, #20
  408618:	2700      	movs	r7, #0
  40861a:	6871      	ldr	r1, [r6, #4]
  40861c:	f7ff fdbc 	bl	408198 <_Balloc>
  408620:	f8d8 3010 	ldr.w	r3, [r8, #16]
  408624:	6936      	ldr	r6, [r6, #16]
  408626:	60c7      	str	r7, [r0, #12]
  408628:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  40862c:	46a6      	mov	lr, r4
  40862e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  408632:	f100 0414 	add.w	r4, r0, #20
  408636:	2300      	movs	r3, #0
  408638:	f85e 1b04 	ldr.w	r1, [lr], #4
  40863c:	f855 8b04 	ldr.w	r8, [r5], #4
  408640:	b28a      	uxth	r2, r1
  408642:	fa13 f388 	uxtah	r3, r3, r8
  408646:	0c09      	lsrs	r1, r1, #16
  408648:	1a9a      	subs	r2, r3, r2
  40864a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  40864e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408652:	b292      	uxth	r2, r2
  408654:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408658:	45f4      	cmp	ip, lr
  40865a:	f844 2b04 	str.w	r2, [r4], #4
  40865e:	ea4f 4323 	mov.w	r3, r3, asr #16
  408662:	d8e9      	bhi.n	408638 <__mdiff+0x6c>
  408664:	42af      	cmp	r7, r5
  408666:	d917      	bls.n	408698 <__mdiff+0xcc>
  408668:	46a4      	mov	ip, r4
  40866a:	46ae      	mov	lr, r5
  40866c:	f85e 2b04 	ldr.w	r2, [lr], #4
  408670:	fa13 f382 	uxtah	r3, r3, r2
  408674:	1419      	asrs	r1, r3, #16
  408676:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40867a:	b29b      	uxth	r3, r3
  40867c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408680:	4577      	cmp	r7, lr
  408682:	f84c 2b04 	str.w	r2, [ip], #4
  408686:	ea4f 4321 	mov.w	r3, r1, asr #16
  40868a:	d8ef      	bhi.n	40866c <__mdiff+0xa0>
  40868c:	43ed      	mvns	r5, r5
  40868e:	442f      	add	r7, r5
  408690:	f027 0703 	bic.w	r7, r7, #3
  408694:	3704      	adds	r7, #4
  408696:	443c      	add	r4, r7
  408698:	3c04      	subs	r4, #4
  40869a:	b922      	cbnz	r2, 4086a6 <__mdiff+0xda>
  40869c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4086a0:	3e01      	subs	r6, #1
  4086a2:	2b00      	cmp	r3, #0
  4086a4:	d0fa      	beq.n	40869c <__mdiff+0xd0>
  4086a6:	6106      	str	r6, [r0, #16]
  4086a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4086ac:	2100      	movs	r1, #0
  4086ae:	f7ff fd73 	bl	408198 <_Balloc>
  4086b2:	2201      	movs	r2, #1
  4086b4:	2300      	movs	r3, #0
  4086b6:	6102      	str	r2, [r0, #16]
  4086b8:	6143      	str	r3, [r0, #20]
  4086ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4086be:	4674      	mov	r4, lr
  4086c0:	e7ab      	b.n	40861a <__mdiff+0x4e>
  4086c2:	4633      	mov	r3, r6
  4086c4:	f106 0414 	add.w	r4, r6, #20
  4086c8:	f102 0514 	add.w	r5, r2, #20
  4086cc:	4616      	mov	r6, r2
  4086ce:	2701      	movs	r7, #1
  4086d0:	4698      	mov	r8, r3
  4086d2:	e7a2      	b.n	40861a <__mdiff+0x4e>

004086d4 <__d2b>:
  4086d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4086d8:	b082      	sub	sp, #8
  4086da:	2101      	movs	r1, #1
  4086dc:	461c      	mov	r4, r3
  4086de:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4086e2:	4615      	mov	r5, r2
  4086e4:	9e08      	ldr	r6, [sp, #32]
  4086e6:	f7ff fd57 	bl	408198 <_Balloc>
  4086ea:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4086ee:	4680      	mov	r8, r0
  4086f0:	b10f      	cbz	r7, 4086f6 <__d2b+0x22>
  4086f2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4086f6:	9401      	str	r4, [sp, #4]
  4086f8:	b31d      	cbz	r5, 408742 <__d2b+0x6e>
  4086fa:	a802      	add	r0, sp, #8
  4086fc:	f840 5d08 	str.w	r5, [r0, #-8]!
  408700:	f7ff fdda 	bl	4082b8 <__lo0bits>
  408704:	2800      	cmp	r0, #0
  408706:	d134      	bne.n	408772 <__d2b+0x9e>
  408708:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40870c:	f8c8 2014 	str.w	r2, [r8, #20]
  408710:	2b00      	cmp	r3, #0
  408712:	bf0c      	ite	eq
  408714:	2101      	moveq	r1, #1
  408716:	2102      	movne	r1, #2
  408718:	f8c8 3018 	str.w	r3, [r8, #24]
  40871c:	f8c8 1010 	str.w	r1, [r8, #16]
  408720:	b9df      	cbnz	r7, 40875a <__d2b+0x86>
  408722:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  408726:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40872a:	6030      	str	r0, [r6, #0]
  40872c:	6918      	ldr	r0, [r3, #16]
  40872e:	f7ff fda3 	bl	408278 <__hi0bits>
  408732:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408734:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  408738:	6018      	str	r0, [r3, #0]
  40873a:	4640      	mov	r0, r8
  40873c:	b002      	add	sp, #8
  40873e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408742:	a801      	add	r0, sp, #4
  408744:	f7ff fdb8 	bl	4082b8 <__lo0bits>
  408748:	9b01      	ldr	r3, [sp, #4]
  40874a:	f8c8 3014 	str.w	r3, [r8, #20]
  40874e:	2101      	movs	r1, #1
  408750:	3020      	adds	r0, #32
  408752:	f8c8 1010 	str.w	r1, [r8, #16]
  408756:	2f00      	cmp	r7, #0
  408758:	d0e3      	beq.n	408722 <__d2b+0x4e>
  40875a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40875c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  408760:	4407      	add	r7, r0
  408762:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  408766:	6037      	str	r7, [r6, #0]
  408768:	6018      	str	r0, [r3, #0]
  40876a:	4640      	mov	r0, r8
  40876c:	b002      	add	sp, #8
  40876e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408772:	e89d 000a 	ldmia.w	sp, {r1, r3}
  408776:	f1c0 0220 	rsb	r2, r0, #32
  40877a:	fa03 f202 	lsl.w	r2, r3, r2
  40877e:	430a      	orrs	r2, r1
  408780:	40c3      	lsrs	r3, r0
  408782:	9301      	str	r3, [sp, #4]
  408784:	f8c8 2014 	str.w	r2, [r8, #20]
  408788:	e7c2      	b.n	408710 <__d2b+0x3c>
  40878a:	bf00      	nop

0040878c <_realloc_r>:
  40878c:	2900      	cmp	r1, #0
  40878e:	f000 8095 	beq.w	4088bc <_realloc_r+0x130>
  408792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408796:	460d      	mov	r5, r1
  408798:	4616      	mov	r6, r2
  40879a:	b083      	sub	sp, #12
  40879c:	4680      	mov	r8, r0
  40879e:	f106 070b 	add.w	r7, r6, #11
  4087a2:	f7fb fc2f 	bl	404004 <__malloc_lock>
  4087a6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4087aa:	2f16      	cmp	r7, #22
  4087ac:	f02e 0403 	bic.w	r4, lr, #3
  4087b0:	f1a5 0908 	sub.w	r9, r5, #8
  4087b4:	d83c      	bhi.n	408830 <_realloc_r+0xa4>
  4087b6:	2210      	movs	r2, #16
  4087b8:	4617      	mov	r7, r2
  4087ba:	42be      	cmp	r6, r7
  4087bc:	d83d      	bhi.n	40883a <_realloc_r+0xae>
  4087be:	4294      	cmp	r4, r2
  4087c0:	da43      	bge.n	40884a <_realloc_r+0xbe>
  4087c2:	4bc4      	ldr	r3, [pc, #784]	; (408ad4 <_realloc_r+0x348>)
  4087c4:	6899      	ldr	r1, [r3, #8]
  4087c6:	eb09 0004 	add.w	r0, r9, r4
  4087ca:	4288      	cmp	r0, r1
  4087cc:	f000 80b4 	beq.w	408938 <_realloc_r+0x1ac>
  4087d0:	6843      	ldr	r3, [r0, #4]
  4087d2:	f023 0101 	bic.w	r1, r3, #1
  4087d6:	4401      	add	r1, r0
  4087d8:	6849      	ldr	r1, [r1, #4]
  4087da:	07c9      	lsls	r1, r1, #31
  4087dc:	d54c      	bpl.n	408878 <_realloc_r+0xec>
  4087de:	f01e 0f01 	tst.w	lr, #1
  4087e2:	f000 809b 	beq.w	40891c <_realloc_r+0x190>
  4087e6:	4631      	mov	r1, r6
  4087e8:	4640      	mov	r0, r8
  4087ea:	f7fb f873 	bl	4038d4 <_malloc_r>
  4087ee:	4606      	mov	r6, r0
  4087f0:	2800      	cmp	r0, #0
  4087f2:	d03a      	beq.n	40886a <_realloc_r+0xde>
  4087f4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4087f8:	f023 0301 	bic.w	r3, r3, #1
  4087fc:	444b      	add	r3, r9
  4087fe:	f1a0 0208 	sub.w	r2, r0, #8
  408802:	429a      	cmp	r2, r3
  408804:	f000 8121 	beq.w	408a4a <_realloc_r+0x2be>
  408808:	1f22      	subs	r2, r4, #4
  40880a:	2a24      	cmp	r2, #36	; 0x24
  40880c:	f200 8107 	bhi.w	408a1e <_realloc_r+0x292>
  408810:	2a13      	cmp	r2, #19
  408812:	f200 80db 	bhi.w	4089cc <_realloc_r+0x240>
  408816:	4603      	mov	r3, r0
  408818:	462a      	mov	r2, r5
  40881a:	6811      	ldr	r1, [r2, #0]
  40881c:	6019      	str	r1, [r3, #0]
  40881e:	6851      	ldr	r1, [r2, #4]
  408820:	6059      	str	r1, [r3, #4]
  408822:	6892      	ldr	r2, [r2, #8]
  408824:	609a      	str	r2, [r3, #8]
  408826:	4629      	mov	r1, r5
  408828:	4640      	mov	r0, r8
  40882a:	f7ff f8c1 	bl	4079b0 <_free_r>
  40882e:	e01c      	b.n	40886a <_realloc_r+0xde>
  408830:	f027 0707 	bic.w	r7, r7, #7
  408834:	2f00      	cmp	r7, #0
  408836:	463a      	mov	r2, r7
  408838:	dabf      	bge.n	4087ba <_realloc_r+0x2e>
  40883a:	2600      	movs	r6, #0
  40883c:	230c      	movs	r3, #12
  40883e:	4630      	mov	r0, r6
  408840:	f8c8 3000 	str.w	r3, [r8]
  408844:	b003      	add	sp, #12
  408846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40884a:	462e      	mov	r6, r5
  40884c:	1be3      	subs	r3, r4, r7
  40884e:	2b0f      	cmp	r3, #15
  408850:	d81e      	bhi.n	408890 <_realloc_r+0x104>
  408852:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408856:	f003 0301 	and.w	r3, r3, #1
  40885a:	4323      	orrs	r3, r4
  40885c:	444c      	add	r4, r9
  40885e:	f8c9 3004 	str.w	r3, [r9, #4]
  408862:	6863      	ldr	r3, [r4, #4]
  408864:	f043 0301 	orr.w	r3, r3, #1
  408868:	6063      	str	r3, [r4, #4]
  40886a:	4640      	mov	r0, r8
  40886c:	f7fb fbd0 	bl	404010 <__malloc_unlock>
  408870:	4630      	mov	r0, r6
  408872:	b003      	add	sp, #12
  408874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408878:	f023 0303 	bic.w	r3, r3, #3
  40887c:	18e1      	adds	r1, r4, r3
  40887e:	4291      	cmp	r1, r2
  408880:	db1f      	blt.n	4088c2 <_realloc_r+0x136>
  408882:	68c3      	ldr	r3, [r0, #12]
  408884:	6882      	ldr	r2, [r0, #8]
  408886:	462e      	mov	r6, r5
  408888:	60d3      	str	r3, [r2, #12]
  40888a:	460c      	mov	r4, r1
  40888c:	609a      	str	r2, [r3, #8]
  40888e:	e7dd      	b.n	40884c <_realloc_r+0xc0>
  408890:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408894:	eb09 0107 	add.w	r1, r9, r7
  408898:	f002 0201 	and.w	r2, r2, #1
  40889c:	444c      	add	r4, r9
  40889e:	f043 0301 	orr.w	r3, r3, #1
  4088a2:	4317      	orrs	r7, r2
  4088a4:	f8c9 7004 	str.w	r7, [r9, #4]
  4088a8:	604b      	str	r3, [r1, #4]
  4088aa:	6863      	ldr	r3, [r4, #4]
  4088ac:	f043 0301 	orr.w	r3, r3, #1
  4088b0:	3108      	adds	r1, #8
  4088b2:	6063      	str	r3, [r4, #4]
  4088b4:	4640      	mov	r0, r8
  4088b6:	f7ff f87b 	bl	4079b0 <_free_r>
  4088ba:	e7d6      	b.n	40886a <_realloc_r+0xde>
  4088bc:	4611      	mov	r1, r2
  4088be:	f7fb b809 	b.w	4038d4 <_malloc_r>
  4088c2:	f01e 0f01 	tst.w	lr, #1
  4088c6:	d18e      	bne.n	4087e6 <_realloc_r+0x5a>
  4088c8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4088cc:	eba9 0a01 	sub.w	sl, r9, r1
  4088d0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4088d4:	f021 0103 	bic.w	r1, r1, #3
  4088d8:	440b      	add	r3, r1
  4088da:	4423      	add	r3, r4
  4088dc:	4293      	cmp	r3, r2
  4088de:	db25      	blt.n	40892c <_realloc_r+0x1a0>
  4088e0:	68c2      	ldr	r2, [r0, #12]
  4088e2:	6881      	ldr	r1, [r0, #8]
  4088e4:	4656      	mov	r6, sl
  4088e6:	60ca      	str	r2, [r1, #12]
  4088e8:	6091      	str	r1, [r2, #8]
  4088ea:	f8da 100c 	ldr.w	r1, [sl, #12]
  4088ee:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4088f2:	1f22      	subs	r2, r4, #4
  4088f4:	2a24      	cmp	r2, #36	; 0x24
  4088f6:	60c1      	str	r1, [r0, #12]
  4088f8:	6088      	str	r0, [r1, #8]
  4088fa:	f200 8094 	bhi.w	408a26 <_realloc_r+0x29a>
  4088fe:	2a13      	cmp	r2, #19
  408900:	d96f      	bls.n	4089e2 <_realloc_r+0x256>
  408902:	6829      	ldr	r1, [r5, #0]
  408904:	f8ca 1008 	str.w	r1, [sl, #8]
  408908:	6869      	ldr	r1, [r5, #4]
  40890a:	f8ca 100c 	str.w	r1, [sl, #12]
  40890e:	2a1b      	cmp	r2, #27
  408910:	f200 80a2 	bhi.w	408a58 <_realloc_r+0x2cc>
  408914:	3508      	adds	r5, #8
  408916:	f10a 0210 	add.w	r2, sl, #16
  40891a:	e063      	b.n	4089e4 <_realloc_r+0x258>
  40891c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408920:	eba9 0a03 	sub.w	sl, r9, r3
  408924:	f8da 1004 	ldr.w	r1, [sl, #4]
  408928:	f021 0103 	bic.w	r1, r1, #3
  40892c:	1863      	adds	r3, r4, r1
  40892e:	4293      	cmp	r3, r2
  408930:	f6ff af59 	blt.w	4087e6 <_realloc_r+0x5a>
  408934:	4656      	mov	r6, sl
  408936:	e7d8      	b.n	4088ea <_realloc_r+0x15e>
  408938:	6841      	ldr	r1, [r0, #4]
  40893a:	f021 0b03 	bic.w	fp, r1, #3
  40893e:	44a3      	add	fp, r4
  408940:	f107 0010 	add.w	r0, r7, #16
  408944:	4583      	cmp	fp, r0
  408946:	da56      	bge.n	4089f6 <_realloc_r+0x26a>
  408948:	f01e 0f01 	tst.w	lr, #1
  40894c:	f47f af4b 	bne.w	4087e6 <_realloc_r+0x5a>
  408950:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408954:	eba9 0a01 	sub.w	sl, r9, r1
  408958:	f8da 1004 	ldr.w	r1, [sl, #4]
  40895c:	f021 0103 	bic.w	r1, r1, #3
  408960:	448b      	add	fp, r1
  408962:	4558      	cmp	r0, fp
  408964:	dce2      	bgt.n	40892c <_realloc_r+0x1a0>
  408966:	4656      	mov	r6, sl
  408968:	f8da 100c 	ldr.w	r1, [sl, #12]
  40896c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408970:	1f22      	subs	r2, r4, #4
  408972:	2a24      	cmp	r2, #36	; 0x24
  408974:	60c1      	str	r1, [r0, #12]
  408976:	6088      	str	r0, [r1, #8]
  408978:	f200 808f 	bhi.w	408a9a <_realloc_r+0x30e>
  40897c:	2a13      	cmp	r2, #19
  40897e:	f240 808a 	bls.w	408a96 <_realloc_r+0x30a>
  408982:	6829      	ldr	r1, [r5, #0]
  408984:	f8ca 1008 	str.w	r1, [sl, #8]
  408988:	6869      	ldr	r1, [r5, #4]
  40898a:	f8ca 100c 	str.w	r1, [sl, #12]
  40898e:	2a1b      	cmp	r2, #27
  408990:	f200 808a 	bhi.w	408aa8 <_realloc_r+0x31c>
  408994:	3508      	adds	r5, #8
  408996:	f10a 0210 	add.w	r2, sl, #16
  40899a:	6829      	ldr	r1, [r5, #0]
  40899c:	6011      	str	r1, [r2, #0]
  40899e:	6869      	ldr	r1, [r5, #4]
  4089a0:	6051      	str	r1, [r2, #4]
  4089a2:	68a9      	ldr	r1, [r5, #8]
  4089a4:	6091      	str	r1, [r2, #8]
  4089a6:	eb0a 0107 	add.w	r1, sl, r7
  4089aa:	ebab 0207 	sub.w	r2, fp, r7
  4089ae:	f042 0201 	orr.w	r2, r2, #1
  4089b2:	6099      	str	r1, [r3, #8]
  4089b4:	604a      	str	r2, [r1, #4]
  4089b6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4089ba:	f003 0301 	and.w	r3, r3, #1
  4089be:	431f      	orrs	r7, r3
  4089c0:	4640      	mov	r0, r8
  4089c2:	f8ca 7004 	str.w	r7, [sl, #4]
  4089c6:	f7fb fb23 	bl	404010 <__malloc_unlock>
  4089ca:	e751      	b.n	408870 <_realloc_r+0xe4>
  4089cc:	682b      	ldr	r3, [r5, #0]
  4089ce:	6003      	str	r3, [r0, #0]
  4089d0:	686b      	ldr	r3, [r5, #4]
  4089d2:	6043      	str	r3, [r0, #4]
  4089d4:	2a1b      	cmp	r2, #27
  4089d6:	d82d      	bhi.n	408a34 <_realloc_r+0x2a8>
  4089d8:	f100 0308 	add.w	r3, r0, #8
  4089dc:	f105 0208 	add.w	r2, r5, #8
  4089e0:	e71b      	b.n	40881a <_realloc_r+0x8e>
  4089e2:	4632      	mov	r2, r6
  4089e4:	6829      	ldr	r1, [r5, #0]
  4089e6:	6011      	str	r1, [r2, #0]
  4089e8:	6869      	ldr	r1, [r5, #4]
  4089ea:	6051      	str	r1, [r2, #4]
  4089ec:	68a9      	ldr	r1, [r5, #8]
  4089ee:	6091      	str	r1, [r2, #8]
  4089f0:	461c      	mov	r4, r3
  4089f2:	46d1      	mov	r9, sl
  4089f4:	e72a      	b.n	40884c <_realloc_r+0xc0>
  4089f6:	eb09 0107 	add.w	r1, r9, r7
  4089fa:	ebab 0b07 	sub.w	fp, fp, r7
  4089fe:	f04b 0201 	orr.w	r2, fp, #1
  408a02:	6099      	str	r1, [r3, #8]
  408a04:	604a      	str	r2, [r1, #4]
  408a06:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408a0a:	f003 0301 	and.w	r3, r3, #1
  408a0e:	431f      	orrs	r7, r3
  408a10:	4640      	mov	r0, r8
  408a12:	f845 7c04 	str.w	r7, [r5, #-4]
  408a16:	f7fb fafb 	bl	404010 <__malloc_unlock>
  408a1a:	462e      	mov	r6, r5
  408a1c:	e728      	b.n	408870 <_realloc_r+0xe4>
  408a1e:	4629      	mov	r1, r5
  408a20:	f7ff fb56 	bl	4080d0 <memmove>
  408a24:	e6ff      	b.n	408826 <_realloc_r+0x9a>
  408a26:	4629      	mov	r1, r5
  408a28:	4630      	mov	r0, r6
  408a2a:	461c      	mov	r4, r3
  408a2c:	46d1      	mov	r9, sl
  408a2e:	f7ff fb4f 	bl	4080d0 <memmove>
  408a32:	e70b      	b.n	40884c <_realloc_r+0xc0>
  408a34:	68ab      	ldr	r3, [r5, #8]
  408a36:	6083      	str	r3, [r0, #8]
  408a38:	68eb      	ldr	r3, [r5, #12]
  408a3a:	60c3      	str	r3, [r0, #12]
  408a3c:	2a24      	cmp	r2, #36	; 0x24
  408a3e:	d017      	beq.n	408a70 <_realloc_r+0x2e4>
  408a40:	f100 0310 	add.w	r3, r0, #16
  408a44:	f105 0210 	add.w	r2, r5, #16
  408a48:	e6e7      	b.n	40881a <_realloc_r+0x8e>
  408a4a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408a4e:	f023 0303 	bic.w	r3, r3, #3
  408a52:	441c      	add	r4, r3
  408a54:	462e      	mov	r6, r5
  408a56:	e6f9      	b.n	40884c <_realloc_r+0xc0>
  408a58:	68a9      	ldr	r1, [r5, #8]
  408a5a:	f8ca 1010 	str.w	r1, [sl, #16]
  408a5e:	68e9      	ldr	r1, [r5, #12]
  408a60:	f8ca 1014 	str.w	r1, [sl, #20]
  408a64:	2a24      	cmp	r2, #36	; 0x24
  408a66:	d00c      	beq.n	408a82 <_realloc_r+0x2f6>
  408a68:	3510      	adds	r5, #16
  408a6a:	f10a 0218 	add.w	r2, sl, #24
  408a6e:	e7b9      	b.n	4089e4 <_realloc_r+0x258>
  408a70:	692b      	ldr	r3, [r5, #16]
  408a72:	6103      	str	r3, [r0, #16]
  408a74:	696b      	ldr	r3, [r5, #20]
  408a76:	6143      	str	r3, [r0, #20]
  408a78:	f105 0218 	add.w	r2, r5, #24
  408a7c:	f100 0318 	add.w	r3, r0, #24
  408a80:	e6cb      	b.n	40881a <_realloc_r+0x8e>
  408a82:	692a      	ldr	r2, [r5, #16]
  408a84:	f8ca 2018 	str.w	r2, [sl, #24]
  408a88:	696a      	ldr	r2, [r5, #20]
  408a8a:	f8ca 201c 	str.w	r2, [sl, #28]
  408a8e:	3518      	adds	r5, #24
  408a90:	f10a 0220 	add.w	r2, sl, #32
  408a94:	e7a6      	b.n	4089e4 <_realloc_r+0x258>
  408a96:	4632      	mov	r2, r6
  408a98:	e77f      	b.n	40899a <_realloc_r+0x20e>
  408a9a:	4629      	mov	r1, r5
  408a9c:	4630      	mov	r0, r6
  408a9e:	9301      	str	r3, [sp, #4]
  408aa0:	f7ff fb16 	bl	4080d0 <memmove>
  408aa4:	9b01      	ldr	r3, [sp, #4]
  408aa6:	e77e      	b.n	4089a6 <_realloc_r+0x21a>
  408aa8:	68a9      	ldr	r1, [r5, #8]
  408aaa:	f8ca 1010 	str.w	r1, [sl, #16]
  408aae:	68e9      	ldr	r1, [r5, #12]
  408ab0:	f8ca 1014 	str.w	r1, [sl, #20]
  408ab4:	2a24      	cmp	r2, #36	; 0x24
  408ab6:	d003      	beq.n	408ac0 <_realloc_r+0x334>
  408ab8:	3510      	adds	r5, #16
  408aba:	f10a 0218 	add.w	r2, sl, #24
  408abe:	e76c      	b.n	40899a <_realloc_r+0x20e>
  408ac0:	692a      	ldr	r2, [r5, #16]
  408ac2:	f8ca 2018 	str.w	r2, [sl, #24]
  408ac6:	696a      	ldr	r2, [r5, #20]
  408ac8:	f8ca 201c 	str.w	r2, [sl, #28]
  408acc:	3518      	adds	r5, #24
  408ace:	f10a 0220 	add.w	r2, sl, #32
  408ad2:	e762      	b.n	40899a <_realloc_r+0x20e>
  408ad4:	20400450 	.word	0x20400450

00408ad8 <__sread>:
  408ad8:	b510      	push	{r4, lr}
  408ada:	460c      	mov	r4, r1
  408adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408ae0:	f000 faa4 	bl	40902c <_read_r>
  408ae4:	2800      	cmp	r0, #0
  408ae6:	db03      	blt.n	408af0 <__sread+0x18>
  408ae8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408aea:	4403      	add	r3, r0
  408aec:	6523      	str	r3, [r4, #80]	; 0x50
  408aee:	bd10      	pop	{r4, pc}
  408af0:	89a3      	ldrh	r3, [r4, #12]
  408af2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408af6:	81a3      	strh	r3, [r4, #12]
  408af8:	bd10      	pop	{r4, pc}
  408afa:	bf00      	nop

00408afc <__swrite>:
  408afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408b00:	4616      	mov	r6, r2
  408b02:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408b06:	461f      	mov	r7, r3
  408b08:	05d3      	lsls	r3, r2, #23
  408b0a:	460c      	mov	r4, r1
  408b0c:	4605      	mov	r5, r0
  408b0e:	d507      	bpl.n	408b20 <__swrite+0x24>
  408b10:	2200      	movs	r2, #0
  408b12:	2302      	movs	r3, #2
  408b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408b18:	f000 fa72 	bl	409000 <_lseek_r>
  408b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408b24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408b28:	81a2      	strh	r2, [r4, #12]
  408b2a:	463b      	mov	r3, r7
  408b2c:	4632      	mov	r2, r6
  408b2e:	4628      	mov	r0, r5
  408b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408b34:	f000 b922 	b.w	408d7c <_write_r>

00408b38 <__sseek>:
  408b38:	b510      	push	{r4, lr}
  408b3a:	460c      	mov	r4, r1
  408b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408b40:	f000 fa5e 	bl	409000 <_lseek_r>
  408b44:	89a3      	ldrh	r3, [r4, #12]
  408b46:	1c42      	adds	r2, r0, #1
  408b48:	bf0e      	itee	eq
  408b4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408b4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408b52:	6520      	strne	r0, [r4, #80]	; 0x50
  408b54:	81a3      	strh	r3, [r4, #12]
  408b56:	bd10      	pop	{r4, pc}

00408b58 <__sclose>:
  408b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408b5c:	f000 b9b6 	b.w	408ecc <_close_r>

00408b60 <__ssprint_r>:
  408b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b64:	6893      	ldr	r3, [r2, #8]
  408b66:	b083      	sub	sp, #12
  408b68:	4690      	mov	r8, r2
  408b6a:	2b00      	cmp	r3, #0
  408b6c:	d070      	beq.n	408c50 <__ssprint_r+0xf0>
  408b6e:	4682      	mov	sl, r0
  408b70:	460c      	mov	r4, r1
  408b72:	6817      	ldr	r7, [r2, #0]
  408b74:	688d      	ldr	r5, [r1, #8]
  408b76:	6808      	ldr	r0, [r1, #0]
  408b78:	e042      	b.n	408c00 <__ssprint_r+0xa0>
  408b7a:	89a3      	ldrh	r3, [r4, #12]
  408b7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408b80:	d02e      	beq.n	408be0 <__ssprint_r+0x80>
  408b82:	6965      	ldr	r5, [r4, #20]
  408b84:	6921      	ldr	r1, [r4, #16]
  408b86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  408b8a:	eba0 0b01 	sub.w	fp, r0, r1
  408b8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  408b92:	f10b 0001 	add.w	r0, fp, #1
  408b96:	106d      	asrs	r5, r5, #1
  408b98:	4430      	add	r0, r6
  408b9a:	42a8      	cmp	r0, r5
  408b9c:	462a      	mov	r2, r5
  408b9e:	bf84      	itt	hi
  408ba0:	4605      	movhi	r5, r0
  408ba2:	462a      	movhi	r2, r5
  408ba4:	055b      	lsls	r3, r3, #21
  408ba6:	d538      	bpl.n	408c1a <__ssprint_r+0xba>
  408ba8:	4611      	mov	r1, r2
  408baa:	4650      	mov	r0, sl
  408bac:	f7fa fe92 	bl	4038d4 <_malloc_r>
  408bb0:	2800      	cmp	r0, #0
  408bb2:	d03c      	beq.n	408c2e <__ssprint_r+0xce>
  408bb4:	465a      	mov	r2, fp
  408bb6:	6921      	ldr	r1, [r4, #16]
  408bb8:	9001      	str	r0, [sp, #4]
  408bba:	f7fb f93b 	bl	403e34 <memcpy>
  408bbe:	89a2      	ldrh	r2, [r4, #12]
  408bc0:	9b01      	ldr	r3, [sp, #4]
  408bc2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408bc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408bca:	81a2      	strh	r2, [r4, #12]
  408bcc:	eba5 020b 	sub.w	r2, r5, fp
  408bd0:	eb03 000b 	add.w	r0, r3, fp
  408bd4:	6165      	str	r5, [r4, #20]
  408bd6:	6123      	str	r3, [r4, #16]
  408bd8:	6020      	str	r0, [r4, #0]
  408bda:	60a2      	str	r2, [r4, #8]
  408bdc:	4635      	mov	r5, r6
  408bde:	46b3      	mov	fp, r6
  408be0:	465a      	mov	r2, fp
  408be2:	4649      	mov	r1, r9
  408be4:	f7ff fa74 	bl	4080d0 <memmove>
  408be8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  408bec:	68a2      	ldr	r2, [r4, #8]
  408bee:	6820      	ldr	r0, [r4, #0]
  408bf0:	1b55      	subs	r5, r2, r5
  408bf2:	4458      	add	r0, fp
  408bf4:	1b9e      	subs	r6, r3, r6
  408bf6:	60a5      	str	r5, [r4, #8]
  408bf8:	6020      	str	r0, [r4, #0]
  408bfa:	f8c8 6008 	str.w	r6, [r8, #8]
  408bfe:	b33e      	cbz	r6, 408c50 <__ssprint_r+0xf0>
  408c00:	687e      	ldr	r6, [r7, #4]
  408c02:	463b      	mov	r3, r7
  408c04:	3708      	adds	r7, #8
  408c06:	2e00      	cmp	r6, #0
  408c08:	d0fa      	beq.n	408c00 <__ssprint_r+0xa0>
  408c0a:	42ae      	cmp	r6, r5
  408c0c:	f8d3 9000 	ldr.w	r9, [r3]
  408c10:	46ab      	mov	fp, r5
  408c12:	d2b2      	bcs.n	408b7a <__ssprint_r+0x1a>
  408c14:	4635      	mov	r5, r6
  408c16:	46b3      	mov	fp, r6
  408c18:	e7e2      	b.n	408be0 <__ssprint_r+0x80>
  408c1a:	4650      	mov	r0, sl
  408c1c:	f7ff fdb6 	bl	40878c <_realloc_r>
  408c20:	4603      	mov	r3, r0
  408c22:	2800      	cmp	r0, #0
  408c24:	d1d2      	bne.n	408bcc <__ssprint_r+0x6c>
  408c26:	6921      	ldr	r1, [r4, #16]
  408c28:	4650      	mov	r0, sl
  408c2a:	f7fe fec1 	bl	4079b0 <_free_r>
  408c2e:	230c      	movs	r3, #12
  408c30:	f8ca 3000 	str.w	r3, [sl]
  408c34:	89a3      	ldrh	r3, [r4, #12]
  408c36:	2200      	movs	r2, #0
  408c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408c3c:	f04f 30ff 	mov.w	r0, #4294967295
  408c40:	81a3      	strh	r3, [r4, #12]
  408c42:	f8c8 2008 	str.w	r2, [r8, #8]
  408c46:	f8c8 2004 	str.w	r2, [r8, #4]
  408c4a:	b003      	add	sp, #12
  408c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c50:	2000      	movs	r0, #0
  408c52:	f8c8 0004 	str.w	r0, [r8, #4]
  408c56:	b003      	add	sp, #12
  408c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408c5c <__swbuf_r>:
  408c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408c5e:	460d      	mov	r5, r1
  408c60:	4614      	mov	r4, r2
  408c62:	4606      	mov	r6, r0
  408c64:	b110      	cbz	r0, 408c6c <__swbuf_r+0x10>
  408c66:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408c68:	2b00      	cmp	r3, #0
  408c6a:	d04b      	beq.n	408d04 <__swbuf_r+0xa8>
  408c6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408c70:	69a3      	ldr	r3, [r4, #24]
  408c72:	60a3      	str	r3, [r4, #8]
  408c74:	b291      	uxth	r1, r2
  408c76:	0708      	lsls	r0, r1, #28
  408c78:	d539      	bpl.n	408cee <__swbuf_r+0x92>
  408c7a:	6923      	ldr	r3, [r4, #16]
  408c7c:	2b00      	cmp	r3, #0
  408c7e:	d036      	beq.n	408cee <__swbuf_r+0x92>
  408c80:	b2ed      	uxtb	r5, r5
  408c82:	0489      	lsls	r1, r1, #18
  408c84:	462f      	mov	r7, r5
  408c86:	d515      	bpl.n	408cb4 <__swbuf_r+0x58>
  408c88:	6822      	ldr	r2, [r4, #0]
  408c8a:	6961      	ldr	r1, [r4, #20]
  408c8c:	1ad3      	subs	r3, r2, r3
  408c8e:	428b      	cmp	r3, r1
  408c90:	da1c      	bge.n	408ccc <__swbuf_r+0x70>
  408c92:	3301      	adds	r3, #1
  408c94:	68a1      	ldr	r1, [r4, #8]
  408c96:	1c50      	adds	r0, r2, #1
  408c98:	3901      	subs	r1, #1
  408c9a:	60a1      	str	r1, [r4, #8]
  408c9c:	6020      	str	r0, [r4, #0]
  408c9e:	7015      	strb	r5, [r2, #0]
  408ca0:	6962      	ldr	r2, [r4, #20]
  408ca2:	429a      	cmp	r2, r3
  408ca4:	d01a      	beq.n	408cdc <__swbuf_r+0x80>
  408ca6:	89a3      	ldrh	r3, [r4, #12]
  408ca8:	07db      	lsls	r3, r3, #31
  408caa:	d501      	bpl.n	408cb0 <__swbuf_r+0x54>
  408cac:	2d0a      	cmp	r5, #10
  408cae:	d015      	beq.n	408cdc <__swbuf_r+0x80>
  408cb0:	4638      	mov	r0, r7
  408cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408cb4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  408cba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  408cbe:	81a2      	strh	r2, [r4, #12]
  408cc0:	6822      	ldr	r2, [r4, #0]
  408cc2:	6661      	str	r1, [r4, #100]	; 0x64
  408cc4:	6961      	ldr	r1, [r4, #20]
  408cc6:	1ad3      	subs	r3, r2, r3
  408cc8:	428b      	cmp	r3, r1
  408cca:	dbe2      	blt.n	408c92 <__swbuf_r+0x36>
  408ccc:	4621      	mov	r1, r4
  408cce:	4630      	mov	r0, r6
  408cd0:	f7fe fcf0 	bl	4076b4 <_fflush_r>
  408cd4:	b940      	cbnz	r0, 408ce8 <__swbuf_r+0x8c>
  408cd6:	6822      	ldr	r2, [r4, #0]
  408cd8:	2301      	movs	r3, #1
  408cda:	e7db      	b.n	408c94 <__swbuf_r+0x38>
  408cdc:	4621      	mov	r1, r4
  408cde:	4630      	mov	r0, r6
  408ce0:	f7fe fce8 	bl	4076b4 <_fflush_r>
  408ce4:	2800      	cmp	r0, #0
  408ce6:	d0e3      	beq.n	408cb0 <__swbuf_r+0x54>
  408ce8:	f04f 37ff 	mov.w	r7, #4294967295
  408cec:	e7e0      	b.n	408cb0 <__swbuf_r+0x54>
  408cee:	4621      	mov	r1, r4
  408cf0:	4630      	mov	r0, r6
  408cf2:	f7fd fc0b 	bl	40650c <__swsetup_r>
  408cf6:	2800      	cmp	r0, #0
  408cf8:	d1f6      	bne.n	408ce8 <__swbuf_r+0x8c>
  408cfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408cfe:	6923      	ldr	r3, [r4, #16]
  408d00:	b291      	uxth	r1, r2
  408d02:	e7bd      	b.n	408c80 <__swbuf_r+0x24>
  408d04:	f7fe fd2e 	bl	407764 <__sinit>
  408d08:	e7b0      	b.n	408c6c <__swbuf_r+0x10>
  408d0a:	bf00      	nop

00408d0c <_wcrtomb_r>:
  408d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  408d0e:	4606      	mov	r6, r0
  408d10:	b085      	sub	sp, #20
  408d12:	461f      	mov	r7, r3
  408d14:	b189      	cbz	r1, 408d3a <_wcrtomb_r+0x2e>
  408d16:	4c10      	ldr	r4, [pc, #64]	; (408d58 <_wcrtomb_r+0x4c>)
  408d18:	4d10      	ldr	r5, [pc, #64]	; (408d5c <_wcrtomb_r+0x50>)
  408d1a:	6824      	ldr	r4, [r4, #0]
  408d1c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  408d1e:	2c00      	cmp	r4, #0
  408d20:	bf08      	it	eq
  408d22:	462c      	moveq	r4, r5
  408d24:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408d28:	47a0      	blx	r4
  408d2a:	1c43      	adds	r3, r0, #1
  408d2c:	d103      	bne.n	408d36 <_wcrtomb_r+0x2a>
  408d2e:	2200      	movs	r2, #0
  408d30:	238a      	movs	r3, #138	; 0x8a
  408d32:	603a      	str	r2, [r7, #0]
  408d34:	6033      	str	r3, [r6, #0]
  408d36:	b005      	add	sp, #20
  408d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408d3a:	460c      	mov	r4, r1
  408d3c:	4906      	ldr	r1, [pc, #24]	; (408d58 <_wcrtomb_r+0x4c>)
  408d3e:	4a07      	ldr	r2, [pc, #28]	; (408d5c <_wcrtomb_r+0x50>)
  408d40:	6809      	ldr	r1, [r1, #0]
  408d42:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408d44:	2900      	cmp	r1, #0
  408d46:	bf08      	it	eq
  408d48:	4611      	moveq	r1, r2
  408d4a:	4622      	mov	r2, r4
  408d4c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  408d50:	a901      	add	r1, sp, #4
  408d52:	47a0      	blx	r4
  408d54:	e7e9      	b.n	408d2a <_wcrtomb_r+0x1e>
  408d56:	bf00      	nop
  408d58:	20400024 	.word	0x20400024
  408d5c:	20400864 	.word	0x20400864

00408d60 <__ascii_wctomb>:
  408d60:	b121      	cbz	r1, 408d6c <__ascii_wctomb+0xc>
  408d62:	2aff      	cmp	r2, #255	; 0xff
  408d64:	d804      	bhi.n	408d70 <__ascii_wctomb+0x10>
  408d66:	700a      	strb	r2, [r1, #0]
  408d68:	2001      	movs	r0, #1
  408d6a:	4770      	bx	lr
  408d6c:	4608      	mov	r0, r1
  408d6e:	4770      	bx	lr
  408d70:	238a      	movs	r3, #138	; 0x8a
  408d72:	6003      	str	r3, [r0, #0]
  408d74:	f04f 30ff 	mov.w	r0, #4294967295
  408d78:	4770      	bx	lr
  408d7a:	bf00      	nop

00408d7c <_write_r>:
  408d7c:	b570      	push	{r4, r5, r6, lr}
  408d7e:	460d      	mov	r5, r1
  408d80:	4c08      	ldr	r4, [pc, #32]	; (408da4 <_write_r+0x28>)
  408d82:	4611      	mov	r1, r2
  408d84:	4606      	mov	r6, r0
  408d86:	461a      	mov	r2, r3
  408d88:	4628      	mov	r0, r5
  408d8a:	2300      	movs	r3, #0
  408d8c:	6023      	str	r3, [r4, #0]
  408d8e:	f7f7 fde9 	bl	400964 <_write>
  408d92:	1c43      	adds	r3, r0, #1
  408d94:	d000      	beq.n	408d98 <_write_r+0x1c>
  408d96:	bd70      	pop	{r4, r5, r6, pc}
  408d98:	6823      	ldr	r3, [r4, #0]
  408d9a:	2b00      	cmp	r3, #0
  408d9c:	d0fb      	beq.n	408d96 <_write_r+0x1a>
  408d9e:	6033      	str	r3, [r6, #0]
  408da0:	bd70      	pop	{r4, r5, r6, pc}
  408da2:	bf00      	nop
  408da4:	20400e64 	.word	0x20400e64

00408da8 <__register_exitproc>:
  408da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408dac:	4d2c      	ldr	r5, [pc, #176]	; (408e60 <__register_exitproc+0xb8>)
  408dae:	4606      	mov	r6, r0
  408db0:	6828      	ldr	r0, [r5, #0]
  408db2:	4698      	mov	r8, r3
  408db4:	460f      	mov	r7, r1
  408db6:	4691      	mov	r9, r2
  408db8:	f7ff f8a2 	bl	407f00 <__retarget_lock_acquire_recursive>
  408dbc:	4b29      	ldr	r3, [pc, #164]	; (408e64 <__register_exitproc+0xbc>)
  408dbe:	681c      	ldr	r4, [r3, #0]
  408dc0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408dc4:	2b00      	cmp	r3, #0
  408dc6:	d03e      	beq.n	408e46 <__register_exitproc+0x9e>
  408dc8:	685a      	ldr	r2, [r3, #4]
  408dca:	2a1f      	cmp	r2, #31
  408dcc:	dc1c      	bgt.n	408e08 <__register_exitproc+0x60>
  408dce:	f102 0e01 	add.w	lr, r2, #1
  408dd2:	b176      	cbz	r6, 408df2 <__register_exitproc+0x4a>
  408dd4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408dd8:	2401      	movs	r4, #1
  408dda:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  408dde:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408de2:	4094      	lsls	r4, r2
  408de4:	4320      	orrs	r0, r4
  408de6:	2e02      	cmp	r6, #2
  408de8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  408dec:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408df0:	d023      	beq.n	408e3a <__register_exitproc+0x92>
  408df2:	3202      	adds	r2, #2
  408df4:	f8c3 e004 	str.w	lr, [r3, #4]
  408df8:	6828      	ldr	r0, [r5, #0]
  408dfa:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  408dfe:	f7ff f881 	bl	407f04 <__retarget_lock_release_recursive>
  408e02:	2000      	movs	r0, #0
  408e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408e08:	4b17      	ldr	r3, [pc, #92]	; (408e68 <__register_exitproc+0xc0>)
  408e0a:	b30b      	cbz	r3, 408e50 <__register_exitproc+0xa8>
  408e0c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408e10:	f7fa fd50 	bl	4038b4 <malloc>
  408e14:	4603      	mov	r3, r0
  408e16:	b1d8      	cbz	r0, 408e50 <__register_exitproc+0xa8>
  408e18:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  408e1c:	6002      	str	r2, [r0, #0]
  408e1e:	2100      	movs	r1, #0
  408e20:	6041      	str	r1, [r0, #4]
  408e22:	460a      	mov	r2, r1
  408e24:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408e28:	f04f 0e01 	mov.w	lr, #1
  408e2c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408e30:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408e34:	2e00      	cmp	r6, #0
  408e36:	d0dc      	beq.n	408df2 <__register_exitproc+0x4a>
  408e38:	e7cc      	b.n	408dd4 <__register_exitproc+0x2c>
  408e3a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  408e3e:	430c      	orrs	r4, r1
  408e40:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408e44:	e7d5      	b.n	408df2 <__register_exitproc+0x4a>
  408e46:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  408e4a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  408e4e:	e7bb      	b.n	408dc8 <__register_exitproc+0x20>
  408e50:	6828      	ldr	r0, [r5, #0]
  408e52:	f7ff f857 	bl	407f04 <__retarget_lock_release_recursive>
  408e56:	f04f 30ff 	mov.w	r0, #4294967295
  408e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408e5e:	bf00      	nop
  408e60:	20400860 	.word	0x20400860
  408e64:	0040a080 	.word	0x0040a080
  408e68:	004038b5 	.word	0x004038b5

00408e6c <_calloc_r>:
  408e6c:	b510      	push	{r4, lr}
  408e6e:	fb02 f101 	mul.w	r1, r2, r1
  408e72:	f7fa fd2f 	bl	4038d4 <_malloc_r>
  408e76:	4604      	mov	r4, r0
  408e78:	b1d8      	cbz	r0, 408eb2 <_calloc_r+0x46>
  408e7a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  408e7e:	f022 0203 	bic.w	r2, r2, #3
  408e82:	3a04      	subs	r2, #4
  408e84:	2a24      	cmp	r2, #36	; 0x24
  408e86:	d818      	bhi.n	408eba <_calloc_r+0x4e>
  408e88:	2a13      	cmp	r2, #19
  408e8a:	d914      	bls.n	408eb6 <_calloc_r+0x4a>
  408e8c:	2300      	movs	r3, #0
  408e8e:	2a1b      	cmp	r2, #27
  408e90:	6003      	str	r3, [r0, #0]
  408e92:	6043      	str	r3, [r0, #4]
  408e94:	d916      	bls.n	408ec4 <_calloc_r+0x58>
  408e96:	2a24      	cmp	r2, #36	; 0x24
  408e98:	6083      	str	r3, [r0, #8]
  408e9a:	60c3      	str	r3, [r0, #12]
  408e9c:	bf11      	iteee	ne
  408e9e:	f100 0210 	addne.w	r2, r0, #16
  408ea2:	6103      	streq	r3, [r0, #16]
  408ea4:	6143      	streq	r3, [r0, #20]
  408ea6:	f100 0218 	addeq.w	r2, r0, #24
  408eaa:	2300      	movs	r3, #0
  408eac:	6013      	str	r3, [r2, #0]
  408eae:	6053      	str	r3, [r2, #4]
  408eb0:	6093      	str	r3, [r2, #8]
  408eb2:	4620      	mov	r0, r4
  408eb4:	bd10      	pop	{r4, pc}
  408eb6:	4602      	mov	r2, r0
  408eb8:	e7f7      	b.n	408eaa <_calloc_r+0x3e>
  408eba:	2100      	movs	r1, #0
  408ebc:	f7fb f854 	bl	403f68 <memset>
  408ec0:	4620      	mov	r0, r4
  408ec2:	bd10      	pop	{r4, pc}
  408ec4:	f100 0208 	add.w	r2, r0, #8
  408ec8:	e7ef      	b.n	408eaa <_calloc_r+0x3e>
  408eca:	bf00      	nop

00408ecc <_close_r>:
  408ecc:	b538      	push	{r3, r4, r5, lr}
  408ece:	4c07      	ldr	r4, [pc, #28]	; (408eec <_close_r+0x20>)
  408ed0:	2300      	movs	r3, #0
  408ed2:	4605      	mov	r5, r0
  408ed4:	4608      	mov	r0, r1
  408ed6:	6023      	str	r3, [r4, #0]
  408ed8:	f7f8 fa6a 	bl	4013b0 <_close>
  408edc:	1c43      	adds	r3, r0, #1
  408ede:	d000      	beq.n	408ee2 <_close_r+0x16>
  408ee0:	bd38      	pop	{r3, r4, r5, pc}
  408ee2:	6823      	ldr	r3, [r4, #0]
  408ee4:	2b00      	cmp	r3, #0
  408ee6:	d0fb      	beq.n	408ee0 <_close_r+0x14>
  408ee8:	602b      	str	r3, [r5, #0]
  408eea:	bd38      	pop	{r3, r4, r5, pc}
  408eec:	20400e64 	.word	0x20400e64

00408ef0 <_fclose_r>:
  408ef0:	b570      	push	{r4, r5, r6, lr}
  408ef2:	b159      	cbz	r1, 408f0c <_fclose_r+0x1c>
  408ef4:	4605      	mov	r5, r0
  408ef6:	460c      	mov	r4, r1
  408ef8:	b110      	cbz	r0, 408f00 <_fclose_r+0x10>
  408efa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  408efc:	2b00      	cmp	r3, #0
  408efe:	d03c      	beq.n	408f7a <_fclose_r+0x8a>
  408f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408f02:	07d8      	lsls	r0, r3, #31
  408f04:	d505      	bpl.n	408f12 <_fclose_r+0x22>
  408f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408f0a:	b92b      	cbnz	r3, 408f18 <_fclose_r+0x28>
  408f0c:	2600      	movs	r6, #0
  408f0e:	4630      	mov	r0, r6
  408f10:	bd70      	pop	{r4, r5, r6, pc}
  408f12:	89a3      	ldrh	r3, [r4, #12]
  408f14:	0599      	lsls	r1, r3, #22
  408f16:	d53c      	bpl.n	408f92 <_fclose_r+0xa2>
  408f18:	4621      	mov	r1, r4
  408f1a:	4628      	mov	r0, r5
  408f1c:	f7fe fb2a 	bl	407574 <__sflush_r>
  408f20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408f22:	4606      	mov	r6, r0
  408f24:	b133      	cbz	r3, 408f34 <_fclose_r+0x44>
  408f26:	69e1      	ldr	r1, [r4, #28]
  408f28:	4628      	mov	r0, r5
  408f2a:	4798      	blx	r3
  408f2c:	2800      	cmp	r0, #0
  408f2e:	bfb8      	it	lt
  408f30:	f04f 36ff 	movlt.w	r6, #4294967295
  408f34:	89a3      	ldrh	r3, [r4, #12]
  408f36:	061a      	lsls	r2, r3, #24
  408f38:	d422      	bmi.n	408f80 <_fclose_r+0x90>
  408f3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  408f3c:	b141      	cbz	r1, 408f50 <_fclose_r+0x60>
  408f3e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408f42:	4299      	cmp	r1, r3
  408f44:	d002      	beq.n	408f4c <_fclose_r+0x5c>
  408f46:	4628      	mov	r0, r5
  408f48:	f7fe fd32 	bl	4079b0 <_free_r>
  408f4c:	2300      	movs	r3, #0
  408f4e:	6323      	str	r3, [r4, #48]	; 0x30
  408f50:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408f52:	b121      	cbz	r1, 408f5e <_fclose_r+0x6e>
  408f54:	4628      	mov	r0, r5
  408f56:	f7fe fd2b 	bl	4079b0 <_free_r>
  408f5a:	2300      	movs	r3, #0
  408f5c:	6463      	str	r3, [r4, #68]	; 0x44
  408f5e:	f7fe fc2d 	bl	4077bc <__sfp_lock_acquire>
  408f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408f64:	2200      	movs	r2, #0
  408f66:	07db      	lsls	r3, r3, #31
  408f68:	81a2      	strh	r2, [r4, #12]
  408f6a:	d50e      	bpl.n	408f8a <_fclose_r+0x9a>
  408f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408f6e:	f7fe ffc5 	bl	407efc <__retarget_lock_close_recursive>
  408f72:	f7fe fc29 	bl	4077c8 <__sfp_lock_release>
  408f76:	4630      	mov	r0, r6
  408f78:	bd70      	pop	{r4, r5, r6, pc}
  408f7a:	f7fe fbf3 	bl	407764 <__sinit>
  408f7e:	e7bf      	b.n	408f00 <_fclose_r+0x10>
  408f80:	6921      	ldr	r1, [r4, #16]
  408f82:	4628      	mov	r0, r5
  408f84:	f7fe fd14 	bl	4079b0 <_free_r>
  408f88:	e7d7      	b.n	408f3a <_fclose_r+0x4a>
  408f8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408f8c:	f7fe ffba 	bl	407f04 <__retarget_lock_release_recursive>
  408f90:	e7ec      	b.n	408f6c <_fclose_r+0x7c>
  408f92:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408f94:	f7fe ffb4 	bl	407f00 <__retarget_lock_acquire_recursive>
  408f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408f9c:	2b00      	cmp	r3, #0
  408f9e:	d1bb      	bne.n	408f18 <_fclose_r+0x28>
  408fa0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408fa2:	f016 0601 	ands.w	r6, r6, #1
  408fa6:	d1b1      	bne.n	408f0c <_fclose_r+0x1c>
  408fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408faa:	f7fe ffab 	bl	407f04 <__retarget_lock_release_recursive>
  408fae:	4630      	mov	r0, r6
  408fb0:	bd70      	pop	{r4, r5, r6, pc}
  408fb2:	bf00      	nop

00408fb4 <_fstat_r>:
  408fb4:	b538      	push	{r3, r4, r5, lr}
  408fb6:	460b      	mov	r3, r1
  408fb8:	4c07      	ldr	r4, [pc, #28]	; (408fd8 <_fstat_r+0x24>)
  408fba:	4605      	mov	r5, r0
  408fbc:	4611      	mov	r1, r2
  408fbe:	4618      	mov	r0, r3
  408fc0:	2300      	movs	r3, #0
  408fc2:	6023      	str	r3, [r4, #0]
  408fc4:	f7f8 f9f7 	bl	4013b6 <_fstat>
  408fc8:	1c43      	adds	r3, r0, #1
  408fca:	d000      	beq.n	408fce <_fstat_r+0x1a>
  408fcc:	bd38      	pop	{r3, r4, r5, pc}
  408fce:	6823      	ldr	r3, [r4, #0]
  408fd0:	2b00      	cmp	r3, #0
  408fd2:	d0fb      	beq.n	408fcc <_fstat_r+0x18>
  408fd4:	602b      	str	r3, [r5, #0]
  408fd6:	bd38      	pop	{r3, r4, r5, pc}
  408fd8:	20400e64 	.word	0x20400e64

00408fdc <_isatty_r>:
  408fdc:	b538      	push	{r3, r4, r5, lr}
  408fde:	4c07      	ldr	r4, [pc, #28]	; (408ffc <_isatty_r+0x20>)
  408fe0:	2300      	movs	r3, #0
  408fe2:	4605      	mov	r5, r0
  408fe4:	4608      	mov	r0, r1
  408fe6:	6023      	str	r3, [r4, #0]
  408fe8:	f7f8 f9ea 	bl	4013c0 <_isatty>
  408fec:	1c43      	adds	r3, r0, #1
  408fee:	d000      	beq.n	408ff2 <_isatty_r+0x16>
  408ff0:	bd38      	pop	{r3, r4, r5, pc}
  408ff2:	6823      	ldr	r3, [r4, #0]
  408ff4:	2b00      	cmp	r3, #0
  408ff6:	d0fb      	beq.n	408ff0 <_isatty_r+0x14>
  408ff8:	602b      	str	r3, [r5, #0]
  408ffa:	bd38      	pop	{r3, r4, r5, pc}
  408ffc:	20400e64 	.word	0x20400e64

00409000 <_lseek_r>:
  409000:	b570      	push	{r4, r5, r6, lr}
  409002:	460d      	mov	r5, r1
  409004:	4c08      	ldr	r4, [pc, #32]	; (409028 <_lseek_r+0x28>)
  409006:	4611      	mov	r1, r2
  409008:	4606      	mov	r6, r0
  40900a:	461a      	mov	r2, r3
  40900c:	4628      	mov	r0, r5
  40900e:	2300      	movs	r3, #0
  409010:	6023      	str	r3, [r4, #0]
  409012:	f7f8 f9d7 	bl	4013c4 <_lseek>
  409016:	1c43      	adds	r3, r0, #1
  409018:	d000      	beq.n	40901c <_lseek_r+0x1c>
  40901a:	bd70      	pop	{r4, r5, r6, pc}
  40901c:	6823      	ldr	r3, [r4, #0]
  40901e:	2b00      	cmp	r3, #0
  409020:	d0fb      	beq.n	40901a <_lseek_r+0x1a>
  409022:	6033      	str	r3, [r6, #0]
  409024:	bd70      	pop	{r4, r5, r6, pc}
  409026:	bf00      	nop
  409028:	20400e64 	.word	0x20400e64

0040902c <_read_r>:
  40902c:	b570      	push	{r4, r5, r6, lr}
  40902e:	460d      	mov	r5, r1
  409030:	4c08      	ldr	r4, [pc, #32]	; (409054 <_read_r+0x28>)
  409032:	4611      	mov	r1, r2
  409034:	4606      	mov	r6, r0
  409036:	461a      	mov	r2, r3
  409038:	4628      	mov	r0, r5
  40903a:	2300      	movs	r3, #0
  40903c:	6023      	str	r3, [r4, #0]
  40903e:	f7f7 fc73 	bl	400928 <_read>
  409042:	1c43      	adds	r3, r0, #1
  409044:	d000      	beq.n	409048 <_read_r+0x1c>
  409046:	bd70      	pop	{r4, r5, r6, pc}
  409048:	6823      	ldr	r3, [r4, #0]
  40904a:	2b00      	cmp	r3, #0
  40904c:	d0fb      	beq.n	409046 <_read_r+0x1a>
  40904e:	6033      	str	r3, [r6, #0]
  409050:	bd70      	pop	{r4, r5, r6, pc}
  409052:	bf00      	nop
  409054:	20400e64 	.word	0x20400e64

00409058 <__aeabi_drsub>:
  409058:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40905c:	e002      	b.n	409064 <__adddf3>
  40905e:	bf00      	nop

00409060 <__aeabi_dsub>:
  409060:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409064 <__adddf3>:
  409064:	b530      	push	{r4, r5, lr}
  409066:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40906a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40906e:	ea94 0f05 	teq	r4, r5
  409072:	bf08      	it	eq
  409074:	ea90 0f02 	teqeq	r0, r2
  409078:	bf1f      	itttt	ne
  40907a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40907e:	ea55 0c02 	orrsne.w	ip, r5, r2
  409082:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409086:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40908a:	f000 80e2 	beq.w	409252 <__adddf3+0x1ee>
  40908e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409092:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409096:	bfb8      	it	lt
  409098:	426d      	neglt	r5, r5
  40909a:	dd0c      	ble.n	4090b6 <__adddf3+0x52>
  40909c:	442c      	add	r4, r5
  40909e:	ea80 0202 	eor.w	r2, r0, r2
  4090a2:	ea81 0303 	eor.w	r3, r1, r3
  4090a6:	ea82 0000 	eor.w	r0, r2, r0
  4090aa:	ea83 0101 	eor.w	r1, r3, r1
  4090ae:	ea80 0202 	eor.w	r2, r0, r2
  4090b2:	ea81 0303 	eor.w	r3, r1, r3
  4090b6:	2d36      	cmp	r5, #54	; 0x36
  4090b8:	bf88      	it	hi
  4090ba:	bd30      	pophi	{r4, r5, pc}
  4090bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4090c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4090c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4090c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4090cc:	d002      	beq.n	4090d4 <__adddf3+0x70>
  4090ce:	4240      	negs	r0, r0
  4090d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4090d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4090d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4090dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4090e0:	d002      	beq.n	4090e8 <__adddf3+0x84>
  4090e2:	4252      	negs	r2, r2
  4090e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4090e8:	ea94 0f05 	teq	r4, r5
  4090ec:	f000 80a7 	beq.w	40923e <__adddf3+0x1da>
  4090f0:	f1a4 0401 	sub.w	r4, r4, #1
  4090f4:	f1d5 0e20 	rsbs	lr, r5, #32
  4090f8:	db0d      	blt.n	409116 <__adddf3+0xb2>
  4090fa:	fa02 fc0e 	lsl.w	ip, r2, lr
  4090fe:	fa22 f205 	lsr.w	r2, r2, r5
  409102:	1880      	adds	r0, r0, r2
  409104:	f141 0100 	adc.w	r1, r1, #0
  409108:	fa03 f20e 	lsl.w	r2, r3, lr
  40910c:	1880      	adds	r0, r0, r2
  40910e:	fa43 f305 	asr.w	r3, r3, r5
  409112:	4159      	adcs	r1, r3
  409114:	e00e      	b.n	409134 <__adddf3+0xd0>
  409116:	f1a5 0520 	sub.w	r5, r5, #32
  40911a:	f10e 0e20 	add.w	lr, lr, #32
  40911e:	2a01      	cmp	r2, #1
  409120:	fa03 fc0e 	lsl.w	ip, r3, lr
  409124:	bf28      	it	cs
  409126:	f04c 0c02 	orrcs.w	ip, ip, #2
  40912a:	fa43 f305 	asr.w	r3, r3, r5
  40912e:	18c0      	adds	r0, r0, r3
  409130:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  409134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409138:	d507      	bpl.n	40914a <__adddf3+0xe6>
  40913a:	f04f 0e00 	mov.w	lr, #0
  40913e:	f1dc 0c00 	rsbs	ip, ip, #0
  409142:	eb7e 0000 	sbcs.w	r0, lr, r0
  409146:	eb6e 0101 	sbc.w	r1, lr, r1
  40914a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40914e:	d31b      	bcc.n	409188 <__adddf3+0x124>
  409150:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409154:	d30c      	bcc.n	409170 <__adddf3+0x10c>
  409156:	0849      	lsrs	r1, r1, #1
  409158:	ea5f 0030 	movs.w	r0, r0, rrx
  40915c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  409160:	f104 0401 	add.w	r4, r4, #1
  409164:	ea4f 5244 	mov.w	r2, r4, lsl #21
  409168:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40916c:	f080 809a 	bcs.w	4092a4 <__adddf3+0x240>
  409170:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  409174:	bf08      	it	eq
  409176:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40917a:	f150 0000 	adcs.w	r0, r0, #0
  40917e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409182:	ea41 0105 	orr.w	r1, r1, r5
  409186:	bd30      	pop	{r4, r5, pc}
  409188:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40918c:	4140      	adcs	r0, r0
  40918e:	eb41 0101 	adc.w	r1, r1, r1
  409192:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409196:	f1a4 0401 	sub.w	r4, r4, #1
  40919a:	d1e9      	bne.n	409170 <__adddf3+0x10c>
  40919c:	f091 0f00 	teq	r1, #0
  4091a0:	bf04      	itt	eq
  4091a2:	4601      	moveq	r1, r0
  4091a4:	2000      	moveq	r0, #0
  4091a6:	fab1 f381 	clz	r3, r1
  4091aa:	bf08      	it	eq
  4091ac:	3320      	addeq	r3, #32
  4091ae:	f1a3 030b 	sub.w	r3, r3, #11
  4091b2:	f1b3 0220 	subs.w	r2, r3, #32
  4091b6:	da0c      	bge.n	4091d2 <__adddf3+0x16e>
  4091b8:	320c      	adds	r2, #12
  4091ba:	dd08      	ble.n	4091ce <__adddf3+0x16a>
  4091bc:	f102 0c14 	add.w	ip, r2, #20
  4091c0:	f1c2 020c 	rsb	r2, r2, #12
  4091c4:	fa01 f00c 	lsl.w	r0, r1, ip
  4091c8:	fa21 f102 	lsr.w	r1, r1, r2
  4091cc:	e00c      	b.n	4091e8 <__adddf3+0x184>
  4091ce:	f102 0214 	add.w	r2, r2, #20
  4091d2:	bfd8      	it	le
  4091d4:	f1c2 0c20 	rsble	ip, r2, #32
  4091d8:	fa01 f102 	lsl.w	r1, r1, r2
  4091dc:	fa20 fc0c 	lsr.w	ip, r0, ip
  4091e0:	bfdc      	itt	le
  4091e2:	ea41 010c 	orrle.w	r1, r1, ip
  4091e6:	4090      	lslle	r0, r2
  4091e8:	1ae4      	subs	r4, r4, r3
  4091ea:	bfa2      	ittt	ge
  4091ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4091f0:	4329      	orrge	r1, r5
  4091f2:	bd30      	popge	{r4, r5, pc}
  4091f4:	ea6f 0404 	mvn.w	r4, r4
  4091f8:	3c1f      	subs	r4, #31
  4091fa:	da1c      	bge.n	409236 <__adddf3+0x1d2>
  4091fc:	340c      	adds	r4, #12
  4091fe:	dc0e      	bgt.n	40921e <__adddf3+0x1ba>
  409200:	f104 0414 	add.w	r4, r4, #20
  409204:	f1c4 0220 	rsb	r2, r4, #32
  409208:	fa20 f004 	lsr.w	r0, r0, r4
  40920c:	fa01 f302 	lsl.w	r3, r1, r2
  409210:	ea40 0003 	orr.w	r0, r0, r3
  409214:	fa21 f304 	lsr.w	r3, r1, r4
  409218:	ea45 0103 	orr.w	r1, r5, r3
  40921c:	bd30      	pop	{r4, r5, pc}
  40921e:	f1c4 040c 	rsb	r4, r4, #12
  409222:	f1c4 0220 	rsb	r2, r4, #32
  409226:	fa20 f002 	lsr.w	r0, r0, r2
  40922a:	fa01 f304 	lsl.w	r3, r1, r4
  40922e:	ea40 0003 	orr.w	r0, r0, r3
  409232:	4629      	mov	r1, r5
  409234:	bd30      	pop	{r4, r5, pc}
  409236:	fa21 f004 	lsr.w	r0, r1, r4
  40923a:	4629      	mov	r1, r5
  40923c:	bd30      	pop	{r4, r5, pc}
  40923e:	f094 0f00 	teq	r4, #0
  409242:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  409246:	bf06      	itte	eq
  409248:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40924c:	3401      	addeq	r4, #1
  40924e:	3d01      	subne	r5, #1
  409250:	e74e      	b.n	4090f0 <__adddf3+0x8c>
  409252:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409256:	bf18      	it	ne
  409258:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40925c:	d029      	beq.n	4092b2 <__adddf3+0x24e>
  40925e:	ea94 0f05 	teq	r4, r5
  409262:	bf08      	it	eq
  409264:	ea90 0f02 	teqeq	r0, r2
  409268:	d005      	beq.n	409276 <__adddf3+0x212>
  40926a:	ea54 0c00 	orrs.w	ip, r4, r0
  40926e:	bf04      	itt	eq
  409270:	4619      	moveq	r1, r3
  409272:	4610      	moveq	r0, r2
  409274:	bd30      	pop	{r4, r5, pc}
  409276:	ea91 0f03 	teq	r1, r3
  40927a:	bf1e      	ittt	ne
  40927c:	2100      	movne	r1, #0
  40927e:	2000      	movne	r0, #0
  409280:	bd30      	popne	{r4, r5, pc}
  409282:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409286:	d105      	bne.n	409294 <__adddf3+0x230>
  409288:	0040      	lsls	r0, r0, #1
  40928a:	4149      	adcs	r1, r1
  40928c:	bf28      	it	cs
  40928e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409292:	bd30      	pop	{r4, r5, pc}
  409294:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409298:	bf3c      	itt	cc
  40929a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40929e:	bd30      	popcc	{r4, r5, pc}
  4092a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4092a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4092a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4092ac:	f04f 0000 	mov.w	r0, #0
  4092b0:	bd30      	pop	{r4, r5, pc}
  4092b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4092b6:	bf1a      	itte	ne
  4092b8:	4619      	movne	r1, r3
  4092ba:	4610      	movne	r0, r2
  4092bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4092c0:	bf1c      	itt	ne
  4092c2:	460b      	movne	r3, r1
  4092c4:	4602      	movne	r2, r0
  4092c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4092ca:	bf06      	itte	eq
  4092cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4092d0:	ea91 0f03 	teqeq	r1, r3
  4092d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4092d8:	bd30      	pop	{r4, r5, pc}
  4092da:	bf00      	nop

004092dc <__aeabi_ui2d>:
  4092dc:	f090 0f00 	teq	r0, #0
  4092e0:	bf04      	itt	eq
  4092e2:	2100      	moveq	r1, #0
  4092e4:	4770      	bxeq	lr
  4092e6:	b530      	push	{r4, r5, lr}
  4092e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4092ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4092f0:	f04f 0500 	mov.w	r5, #0
  4092f4:	f04f 0100 	mov.w	r1, #0
  4092f8:	e750      	b.n	40919c <__adddf3+0x138>
  4092fa:	bf00      	nop

004092fc <__aeabi_i2d>:
  4092fc:	f090 0f00 	teq	r0, #0
  409300:	bf04      	itt	eq
  409302:	2100      	moveq	r1, #0
  409304:	4770      	bxeq	lr
  409306:	b530      	push	{r4, r5, lr}
  409308:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40930c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  409310:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  409314:	bf48      	it	mi
  409316:	4240      	negmi	r0, r0
  409318:	f04f 0100 	mov.w	r1, #0
  40931c:	e73e      	b.n	40919c <__adddf3+0x138>
  40931e:	bf00      	nop

00409320 <__aeabi_f2d>:
  409320:	0042      	lsls	r2, r0, #1
  409322:	ea4f 01e2 	mov.w	r1, r2, asr #3
  409326:	ea4f 0131 	mov.w	r1, r1, rrx
  40932a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40932e:	bf1f      	itttt	ne
  409330:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  409334:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409338:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40933c:	4770      	bxne	lr
  40933e:	f092 0f00 	teq	r2, #0
  409342:	bf14      	ite	ne
  409344:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409348:	4770      	bxeq	lr
  40934a:	b530      	push	{r4, r5, lr}
  40934c:	f44f 7460 	mov.w	r4, #896	; 0x380
  409350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409358:	e720      	b.n	40919c <__adddf3+0x138>
  40935a:	bf00      	nop

0040935c <__aeabi_ul2d>:
  40935c:	ea50 0201 	orrs.w	r2, r0, r1
  409360:	bf08      	it	eq
  409362:	4770      	bxeq	lr
  409364:	b530      	push	{r4, r5, lr}
  409366:	f04f 0500 	mov.w	r5, #0
  40936a:	e00a      	b.n	409382 <__aeabi_l2d+0x16>

0040936c <__aeabi_l2d>:
  40936c:	ea50 0201 	orrs.w	r2, r0, r1
  409370:	bf08      	it	eq
  409372:	4770      	bxeq	lr
  409374:	b530      	push	{r4, r5, lr}
  409376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40937a:	d502      	bpl.n	409382 <__aeabi_l2d+0x16>
  40937c:	4240      	negs	r0, r0
  40937e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409382:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409386:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40938a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40938e:	f43f aedc 	beq.w	40914a <__adddf3+0xe6>
  409392:	f04f 0203 	mov.w	r2, #3
  409396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40939a:	bf18      	it	ne
  40939c:	3203      	addne	r2, #3
  40939e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4093a2:	bf18      	it	ne
  4093a4:	3203      	addne	r2, #3
  4093a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4093aa:	f1c2 0320 	rsb	r3, r2, #32
  4093ae:	fa00 fc03 	lsl.w	ip, r0, r3
  4093b2:	fa20 f002 	lsr.w	r0, r0, r2
  4093b6:	fa01 fe03 	lsl.w	lr, r1, r3
  4093ba:	ea40 000e 	orr.w	r0, r0, lr
  4093be:	fa21 f102 	lsr.w	r1, r1, r2
  4093c2:	4414      	add	r4, r2
  4093c4:	e6c1      	b.n	40914a <__adddf3+0xe6>
  4093c6:	bf00      	nop

004093c8 <__aeabi_dmul>:
  4093c8:	b570      	push	{r4, r5, r6, lr}
  4093ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4093ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4093d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4093d6:	bf1d      	ittte	ne
  4093d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4093dc:	ea94 0f0c 	teqne	r4, ip
  4093e0:	ea95 0f0c 	teqne	r5, ip
  4093e4:	f000 f8de 	bleq	4095a4 <__aeabi_dmul+0x1dc>
  4093e8:	442c      	add	r4, r5
  4093ea:	ea81 0603 	eor.w	r6, r1, r3
  4093ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4093f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4093f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4093fa:	bf18      	it	ne
  4093fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  409400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  409408:	d038      	beq.n	40947c <__aeabi_dmul+0xb4>
  40940a:	fba0 ce02 	umull	ip, lr, r0, r2
  40940e:	f04f 0500 	mov.w	r5, #0
  409412:	fbe1 e502 	umlal	lr, r5, r1, r2
  409416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40941a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40941e:	f04f 0600 	mov.w	r6, #0
  409422:	fbe1 5603 	umlal	r5, r6, r1, r3
  409426:	f09c 0f00 	teq	ip, #0
  40942a:	bf18      	it	ne
  40942c:	f04e 0e01 	orrne.w	lr, lr, #1
  409430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  409434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  409438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40943c:	d204      	bcs.n	409448 <__aeabi_dmul+0x80>
  40943e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  409442:	416d      	adcs	r5, r5
  409444:	eb46 0606 	adc.w	r6, r6, r6
  409448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40944c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  409450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  409454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  409458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40945c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409460:	bf88      	it	hi
  409462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409466:	d81e      	bhi.n	4094a6 <__aeabi_dmul+0xde>
  409468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40946c:	bf08      	it	eq
  40946e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  409472:	f150 0000 	adcs.w	r0, r0, #0
  409476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40947a:	bd70      	pop	{r4, r5, r6, pc}
  40947c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  409480:	ea46 0101 	orr.w	r1, r6, r1
  409484:	ea40 0002 	orr.w	r0, r0, r2
  409488:	ea81 0103 	eor.w	r1, r1, r3
  40948c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  409490:	bfc2      	ittt	gt
  409492:	ebd4 050c 	rsbsgt	r5, r4, ip
  409496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40949a:	bd70      	popgt	{r4, r5, r6, pc}
  40949c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4094a0:	f04f 0e00 	mov.w	lr, #0
  4094a4:	3c01      	subs	r4, #1
  4094a6:	f300 80ab 	bgt.w	409600 <__aeabi_dmul+0x238>
  4094aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4094ae:	bfde      	ittt	le
  4094b0:	2000      	movle	r0, #0
  4094b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4094b6:	bd70      	pople	{r4, r5, r6, pc}
  4094b8:	f1c4 0400 	rsb	r4, r4, #0
  4094bc:	3c20      	subs	r4, #32
  4094be:	da35      	bge.n	40952c <__aeabi_dmul+0x164>
  4094c0:	340c      	adds	r4, #12
  4094c2:	dc1b      	bgt.n	4094fc <__aeabi_dmul+0x134>
  4094c4:	f104 0414 	add.w	r4, r4, #20
  4094c8:	f1c4 0520 	rsb	r5, r4, #32
  4094cc:	fa00 f305 	lsl.w	r3, r0, r5
  4094d0:	fa20 f004 	lsr.w	r0, r0, r4
  4094d4:	fa01 f205 	lsl.w	r2, r1, r5
  4094d8:	ea40 0002 	orr.w	r0, r0, r2
  4094dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4094e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4094e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4094e8:	fa21 f604 	lsr.w	r6, r1, r4
  4094ec:	eb42 0106 	adc.w	r1, r2, r6
  4094f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4094f4:	bf08      	it	eq
  4094f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4094fa:	bd70      	pop	{r4, r5, r6, pc}
  4094fc:	f1c4 040c 	rsb	r4, r4, #12
  409500:	f1c4 0520 	rsb	r5, r4, #32
  409504:	fa00 f304 	lsl.w	r3, r0, r4
  409508:	fa20 f005 	lsr.w	r0, r0, r5
  40950c:	fa01 f204 	lsl.w	r2, r1, r4
  409510:	ea40 0002 	orr.w	r0, r0, r2
  409514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40951c:	f141 0100 	adc.w	r1, r1, #0
  409520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  409524:	bf08      	it	eq
  409526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40952a:	bd70      	pop	{r4, r5, r6, pc}
  40952c:	f1c4 0520 	rsb	r5, r4, #32
  409530:	fa00 f205 	lsl.w	r2, r0, r5
  409534:	ea4e 0e02 	orr.w	lr, lr, r2
  409538:	fa20 f304 	lsr.w	r3, r0, r4
  40953c:	fa01 f205 	lsl.w	r2, r1, r5
  409540:	ea43 0302 	orr.w	r3, r3, r2
  409544:	fa21 f004 	lsr.w	r0, r1, r4
  409548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40954c:	fa21 f204 	lsr.w	r2, r1, r4
  409550:	ea20 0002 	bic.w	r0, r0, r2
  409554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  409558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40955c:	bf08      	it	eq
  40955e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409562:	bd70      	pop	{r4, r5, r6, pc}
  409564:	f094 0f00 	teq	r4, #0
  409568:	d10f      	bne.n	40958a <__aeabi_dmul+0x1c2>
  40956a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40956e:	0040      	lsls	r0, r0, #1
  409570:	eb41 0101 	adc.w	r1, r1, r1
  409574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409578:	bf08      	it	eq
  40957a:	3c01      	subeq	r4, #1
  40957c:	d0f7      	beq.n	40956e <__aeabi_dmul+0x1a6>
  40957e:	ea41 0106 	orr.w	r1, r1, r6
  409582:	f095 0f00 	teq	r5, #0
  409586:	bf18      	it	ne
  409588:	4770      	bxne	lr
  40958a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40958e:	0052      	lsls	r2, r2, #1
  409590:	eb43 0303 	adc.w	r3, r3, r3
  409594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409598:	bf08      	it	eq
  40959a:	3d01      	subeq	r5, #1
  40959c:	d0f7      	beq.n	40958e <__aeabi_dmul+0x1c6>
  40959e:	ea43 0306 	orr.w	r3, r3, r6
  4095a2:	4770      	bx	lr
  4095a4:	ea94 0f0c 	teq	r4, ip
  4095a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4095ac:	bf18      	it	ne
  4095ae:	ea95 0f0c 	teqne	r5, ip
  4095b2:	d00c      	beq.n	4095ce <__aeabi_dmul+0x206>
  4095b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4095b8:	bf18      	it	ne
  4095ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4095be:	d1d1      	bne.n	409564 <__aeabi_dmul+0x19c>
  4095c0:	ea81 0103 	eor.w	r1, r1, r3
  4095c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4095c8:	f04f 0000 	mov.w	r0, #0
  4095cc:	bd70      	pop	{r4, r5, r6, pc}
  4095ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4095d2:	bf06      	itte	eq
  4095d4:	4610      	moveq	r0, r2
  4095d6:	4619      	moveq	r1, r3
  4095d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4095dc:	d019      	beq.n	409612 <__aeabi_dmul+0x24a>
  4095de:	ea94 0f0c 	teq	r4, ip
  4095e2:	d102      	bne.n	4095ea <__aeabi_dmul+0x222>
  4095e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4095e8:	d113      	bne.n	409612 <__aeabi_dmul+0x24a>
  4095ea:	ea95 0f0c 	teq	r5, ip
  4095ee:	d105      	bne.n	4095fc <__aeabi_dmul+0x234>
  4095f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4095f4:	bf1c      	itt	ne
  4095f6:	4610      	movne	r0, r2
  4095f8:	4619      	movne	r1, r3
  4095fa:	d10a      	bne.n	409612 <__aeabi_dmul+0x24a>
  4095fc:	ea81 0103 	eor.w	r1, r1, r3
  409600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40960c:	f04f 0000 	mov.w	r0, #0
  409610:	bd70      	pop	{r4, r5, r6, pc}
  409612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  409616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40961a:	bd70      	pop	{r4, r5, r6, pc}

0040961c <__aeabi_ddiv>:
  40961c:	b570      	push	{r4, r5, r6, lr}
  40961e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  409622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40962a:	bf1d      	ittte	ne
  40962c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  409630:	ea94 0f0c 	teqne	r4, ip
  409634:	ea95 0f0c 	teqne	r5, ip
  409638:	f000 f8a7 	bleq	40978a <__aeabi_ddiv+0x16e>
  40963c:	eba4 0405 	sub.w	r4, r4, r5
  409640:	ea81 0e03 	eor.w	lr, r1, r3
  409644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409648:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40964c:	f000 8088 	beq.w	409760 <__aeabi_ddiv+0x144>
  409650:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  409658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  40965c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  409660:	ea4f 2202 	mov.w	r2, r2, lsl #8
  409664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  409668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  40966c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  409670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  409674:	429d      	cmp	r5, r3
  409676:	bf08      	it	eq
  409678:	4296      	cmpeq	r6, r2
  40967a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40967e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  409682:	d202      	bcs.n	40968a <__aeabi_ddiv+0x6e>
  409684:	085b      	lsrs	r3, r3, #1
  409686:	ea4f 0232 	mov.w	r2, r2, rrx
  40968a:	1ab6      	subs	r6, r6, r2
  40968c:	eb65 0503 	sbc.w	r5, r5, r3
  409690:	085b      	lsrs	r3, r3, #1
  409692:	ea4f 0232 	mov.w	r2, r2, rrx
  409696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40969a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40969e:	ebb6 0e02 	subs.w	lr, r6, r2
  4096a2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4096a6:	bf22      	ittt	cs
  4096a8:	1ab6      	subcs	r6, r6, r2
  4096aa:	4675      	movcs	r5, lr
  4096ac:	ea40 000c 	orrcs.w	r0, r0, ip
  4096b0:	085b      	lsrs	r3, r3, #1
  4096b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4096b6:	ebb6 0e02 	subs.w	lr, r6, r2
  4096ba:	eb75 0e03 	sbcs.w	lr, r5, r3
  4096be:	bf22      	ittt	cs
  4096c0:	1ab6      	subcs	r6, r6, r2
  4096c2:	4675      	movcs	r5, lr
  4096c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4096c8:	085b      	lsrs	r3, r3, #1
  4096ca:	ea4f 0232 	mov.w	r2, r2, rrx
  4096ce:	ebb6 0e02 	subs.w	lr, r6, r2
  4096d2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4096d6:	bf22      	ittt	cs
  4096d8:	1ab6      	subcs	r6, r6, r2
  4096da:	4675      	movcs	r5, lr
  4096dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4096e0:	085b      	lsrs	r3, r3, #1
  4096e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4096e6:	ebb6 0e02 	subs.w	lr, r6, r2
  4096ea:	eb75 0e03 	sbcs.w	lr, r5, r3
  4096ee:	bf22      	ittt	cs
  4096f0:	1ab6      	subcs	r6, r6, r2
  4096f2:	4675      	movcs	r5, lr
  4096f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4096f8:	ea55 0e06 	orrs.w	lr, r5, r6
  4096fc:	d018      	beq.n	409730 <__aeabi_ddiv+0x114>
  4096fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
  409702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  409706:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40970a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40970e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  409712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  409716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40971a:	d1c0      	bne.n	40969e <__aeabi_ddiv+0x82>
  40971c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409720:	d10b      	bne.n	40973a <__aeabi_ddiv+0x11e>
  409722:	ea41 0100 	orr.w	r1, r1, r0
  409726:	f04f 0000 	mov.w	r0, #0
  40972a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40972e:	e7b6      	b.n	40969e <__aeabi_ddiv+0x82>
  409730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409734:	bf04      	itt	eq
  409736:	4301      	orreq	r1, r0
  409738:	2000      	moveq	r0, #0
  40973a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40973e:	bf88      	it	hi
  409740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409744:	f63f aeaf 	bhi.w	4094a6 <__aeabi_dmul+0xde>
  409748:	ebb5 0c03 	subs.w	ip, r5, r3
  40974c:	bf04      	itt	eq
  40974e:	ebb6 0c02 	subseq.w	ip, r6, r2
  409752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409756:	f150 0000 	adcs.w	r0, r0, #0
  40975a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40975e:	bd70      	pop	{r4, r5, r6, pc}
  409760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  409764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  409768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  40976c:	bfc2      	ittt	gt
  40976e:	ebd4 050c 	rsbsgt	r5, r4, ip
  409772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409776:	bd70      	popgt	{r4, r5, r6, pc}
  409778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40977c:	f04f 0e00 	mov.w	lr, #0
  409780:	3c01      	subs	r4, #1
  409782:	e690      	b.n	4094a6 <__aeabi_dmul+0xde>
  409784:	ea45 0e06 	orr.w	lr, r5, r6
  409788:	e68d      	b.n	4094a6 <__aeabi_dmul+0xde>
  40978a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40978e:	ea94 0f0c 	teq	r4, ip
  409792:	bf08      	it	eq
  409794:	ea95 0f0c 	teqeq	r5, ip
  409798:	f43f af3b 	beq.w	409612 <__aeabi_dmul+0x24a>
  40979c:	ea94 0f0c 	teq	r4, ip
  4097a0:	d10a      	bne.n	4097b8 <__aeabi_ddiv+0x19c>
  4097a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4097a6:	f47f af34 	bne.w	409612 <__aeabi_dmul+0x24a>
  4097aa:	ea95 0f0c 	teq	r5, ip
  4097ae:	f47f af25 	bne.w	4095fc <__aeabi_dmul+0x234>
  4097b2:	4610      	mov	r0, r2
  4097b4:	4619      	mov	r1, r3
  4097b6:	e72c      	b.n	409612 <__aeabi_dmul+0x24a>
  4097b8:	ea95 0f0c 	teq	r5, ip
  4097bc:	d106      	bne.n	4097cc <__aeabi_ddiv+0x1b0>
  4097be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4097c2:	f43f aefd 	beq.w	4095c0 <__aeabi_dmul+0x1f8>
  4097c6:	4610      	mov	r0, r2
  4097c8:	4619      	mov	r1, r3
  4097ca:	e722      	b.n	409612 <__aeabi_dmul+0x24a>
  4097cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4097d0:	bf18      	it	ne
  4097d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4097d6:	f47f aec5 	bne.w	409564 <__aeabi_dmul+0x19c>
  4097da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4097de:	f47f af0d 	bne.w	4095fc <__aeabi_dmul+0x234>
  4097e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4097e6:	f47f aeeb 	bne.w	4095c0 <__aeabi_dmul+0x1f8>
  4097ea:	e712      	b.n	409612 <__aeabi_dmul+0x24a>

004097ec <__gedf2>:
  4097ec:	f04f 3cff 	mov.w	ip, #4294967295
  4097f0:	e006      	b.n	409800 <__cmpdf2+0x4>
  4097f2:	bf00      	nop

004097f4 <__ledf2>:
  4097f4:	f04f 0c01 	mov.w	ip, #1
  4097f8:	e002      	b.n	409800 <__cmpdf2+0x4>
  4097fa:	bf00      	nop

004097fc <__cmpdf2>:
  4097fc:	f04f 0c01 	mov.w	ip, #1
  409800:	f84d cd04 	str.w	ip, [sp, #-4]!
  409804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  40980c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409810:	bf18      	it	ne
  409812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409816:	d01b      	beq.n	409850 <__cmpdf2+0x54>
  409818:	b001      	add	sp, #4
  40981a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40981e:	bf0c      	ite	eq
  409820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409824:	ea91 0f03 	teqne	r1, r3
  409828:	bf02      	ittt	eq
  40982a:	ea90 0f02 	teqeq	r0, r2
  40982e:	2000      	moveq	r0, #0
  409830:	4770      	bxeq	lr
  409832:	f110 0f00 	cmn.w	r0, #0
  409836:	ea91 0f03 	teq	r1, r3
  40983a:	bf58      	it	pl
  40983c:	4299      	cmppl	r1, r3
  40983e:	bf08      	it	eq
  409840:	4290      	cmpeq	r0, r2
  409842:	bf2c      	ite	cs
  409844:	17d8      	asrcs	r0, r3, #31
  409846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  40984a:	f040 0001 	orr.w	r0, r0, #1
  40984e:	4770      	bx	lr
  409850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409858:	d102      	bne.n	409860 <__cmpdf2+0x64>
  40985a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40985e:	d107      	bne.n	409870 <__cmpdf2+0x74>
  409860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409868:	d1d6      	bne.n	409818 <__cmpdf2+0x1c>
  40986a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40986e:	d0d3      	beq.n	409818 <__cmpdf2+0x1c>
  409870:	f85d 0b04 	ldr.w	r0, [sp], #4
  409874:	4770      	bx	lr
  409876:	bf00      	nop

00409878 <__aeabi_cdrcmple>:
  409878:	4684      	mov	ip, r0
  40987a:	4610      	mov	r0, r2
  40987c:	4662      	mov	r2, ip
  40987e:	468c      	mov	ip, r1
  409880:	4619      	mov	r1, r3
  409882:	4663      	mov	r3, ip
  409884:	e000      	b.n	409888 <__aeabi_cdcmpeq>
  409886:	bf00      	nop

00409888 <__aeabi_cdcmpeq>:
  409888:	b501      	push	{r0, lr}
  40988a:	f7ff ffb7 	bl	4097fc <__cmpdf2>
  40988e:	2800      	cmp	r0, #0
  409890:	bf48      	it	mi
  409892:	f110 0f00 	cmnmi.w	r0, #0
  409896:	bd01      	pop	{r0, pc}

00409898 <__aeabi_dcmpeq>:
  409898:	f84d ed08 	str.w	lr, [sp, #-8]!
  40989c:	f7ff fff4 	bl	409888 <__aeabi_cdcmpeq>
  4098a0:	bf0c      	ite	eq
  4098a2:	2001      	moveq	r0, #1
  4098a4:	2000      	movne	r0, #0
  4098a6:	f85d fb08 	ldr.w	pc, [sp], #8
  4098aa:	bf00      	nop

004098ac <__aeabi_dcmplt>:
  4098ac:	f84d ed08 	str.w	lr, [sp, #-8]!
  4098b0:	f7ff ffea 	bl	409888 <__aeabi_cdcmpeq>
  4098b4:	bf34      	ite	cc
  4098b6:	2001      	movcc	r0, #1
  4098b8:	2000      	movcs	r0, #0
  4098ba:	f85d fb08 	ldr.w	pc, [sp], #8
  4098be:	bf00      	nop

004098c0 <__aeabi_dcmple>:
  4098c0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4098c4:	f7ff ffe0 	bl	409888 <__aeabi_cdcmpeq>
  4098c8:	bf94      	ite	ls
  4098ca:	2001      	movls	r0, #1
  4098cc:	2000      	movhi	r0, #0
  4098ce:	f85d fb08 	ldr.w	pc, [sp], #8
  4098d2:	bf00      	nop

004098d4 <__aeabi_dcmpge>:
  4098d4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4098d8:	f7ff ffce 	bl	409878 <__aeabi_cdrcmple>
  4098dc:	bf94      	ite	ls
  4098de:	2001      	movls	r0, #1
  4098e0:	2000      	movhi	r0, #0
  4098e2:	f85d fb08 	ldr.w	pc, [sp], #8
  4098e6:	bf00      	nop

004098e8 <__aeabi_dcmpgt>:
  4098e8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4098ec:	f7ff ffc4 	bl	409878 <__aeabi_cdrcmple>
  4098f0:	bf34      	ite	cc
  4098f2:	2001      	movcc	r0, #1
  4098f4:	2000      	movcs	r0, #0
  4098f6:	f85d fb08 	ldr.w	pc, [sp], #8
  4098fa:	bf00      	nop

004098fc <__aeabi_dcmpun>:
  4098fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409904:	d102      	bne.n	40990c <__aeabi_dcmpun+0x10>
  409906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40990a:	d10a      	bne.n	409922 <__aeabi_dcmpun+0x26>
  40990c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409914:	d102      	bne.n	40991c <__aeabi_dcmpun+0x20>
  409916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40991a:	d102      	bne.n	409922 <__aeabi_dcmpun+0x26>
  40991c:	f04f 0000 	mov.w	r0, #0
  409920:	4770      	bx	lr
  409922:	f04f 0001 	mov.w	r0, #1
  409926:	4770      	bx	lr

00409928 <__aeabi_d2iz>:
  409928:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40992c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  409930:	d215      	bcs.n	40995e <__aeabi_d2iz+0x36>
  409932:	d511      	bpl.n	409958 <__aeabi_d2iz+0x30>
  409934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40993c:	d912      	bls.n	409964 <__aeabi_d2iz+0x3c>
  40993e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  409942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40994a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40994e:	fa23 f002 	lsr.w	r0, r3, r2
  409952:	bf18      	it	ne
  409954:	4240      	negne	r0, r0
  409956:	4770      	bx	lr
  409958:	f04f 0000 	mov.w	r0, #0
  40995c:	4770      	bx	lr
  40995e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  409962:	d105      	bne.n	409970 <__aeabi_d2iz+0x48>
  409964:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409968:	bf08      	it	eq
  40996a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40996e:	4770      	bx	lr
  409970:	f04f 0000 	mov.w	r0, #0
  409974:	4770      	bx	lr
  409976:	bf00      	nop

00409978 <__aeabi_uldivmod>:
  409978:	b953      	cbnz	r3, 409990 <__aeabi_uldivmod+0x18>
  40997a:	b94a      	cbnz	r2, 409990 <__aeabi_uldivmod+0x18>
  40997c:	2900      	cmp	r1, #0
  40997e:	bf08      	it	eq
  409980:	2800      	cmpeq	r0, #0
  409982:	bf1c      	itt	ne
  409984:	f04f 31ff 	movne.w	r1, #4294967295
  409988:	f04f 30ff 	movne.w	r0, #4294967295
  40998c:	f000 b97a 	b.w	409c84 <__aeabi_idiv0>
  409990:	f1ad 0c08 	sub.w	ip, sp, #8
  409994:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409998:	f000 f806 	bl	4099a8 <__udivmoddi4>
  40999c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4099a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4099a4:	b004      	add	sp, #16
  4099a6:	4770      	bx	lr

004099a8 <__udivmoddi4>:
  4099a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4099ac:	468c      	mov	ip, r1
  4099ae:	460d      	mov	r5, r1
  4099b0:	4604      	mov	r4, r0
  4099b2:	9e08      	ldr	r6, [sp, #32]
  4099b4:	2b00      	cmp	r3, #0
  4099b6:	d151      	bne.n	409a5c <__udivmoddi4+0xb4>
  4099b8:	428a      	cmp	r2, r1
  4099ba:	4617      	mov	r7, r2
  4099bc:	d96d      	bls.n	409a9a <__udivmoddi4+0xf2>
  4099be:	fab2 fe82 	clz	lr, r2
  4099c2:	f1be 0f00 	cmp.w	lr, #0
  4099c6:	d00b      	beq.n	4099e0 <__udivmoddi4+0x38>
  4099c8:	f1ce 0c20 	rsb	ip, lr, #32
  4099cc:	fa01 f50e 	lsl.w	r5, r1, lr
  4099d0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4099d4:	fa02 f70e 	lsl.w	r7, r2, lr
  4099d8:	ea4c 0c05 	orr.w	ip, ip, r5
  4099dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4099e0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4099e4:	0c25      	lsrs	r5, r4, #16
  4099e6:	fbbc f8fa 	udiv	r8, ip, sl
  4099ea:	fa1f f987 	uxth.w	r9, r7
  4099ee:	fb0a cc18 	mls	ip, sl, r8, ip
  4099f2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4099f6:	fb08 f309 	mul.w	r3, r8, r9
  4099fa:	42ab      	cmp	r3, r5
  4099fc:	d90a      	bls.n	409a14 <__udivmoddi4+0x6c>
  4099fe:	19ed      	adds	r5, r5, r7
  409a00:	f108 32ff 	add.w	r2, r8, #4294967295
  409a04:	f080 8123 	bcs.w	409c4e <__udivmoddi4+0x2a6>
  409a08:	42ab      	cmp	r3, r5
  409a0a:	f240 8120 	bls.w	409c4e <__udivmoddi4+0x2a6>
  409a0e:	f1a8 0802 	sub.w	r8, r8, #2
  409a12:	443d      	add	r5, r7
  409a14:	1aed      	subs	r5, r5, r3
  409a16:	b2a4      	uxth	r4, r4
  409a18:	fbb5 f0fa 	udiv	r0, r5, sl
  409a1c:	fb0a 5510 	mls	r5, sl, r0, r5
  409a20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409a24:	fb00 f909 	mul.w	r9, r0, r9
  409a28:	45a1      	cmp	r9, r4
  409a2a:	d909      	bls.n	409a40 <__udivmoddi4+0x98>
  409a2c:	19e4      	adds	r4, r4, r7
  409a2e:	f100 33ff 	add.w	r3, r0, #4294967295
  409a32:	f080 810a 	bcs.w	409c4a <__udivmoddi4+0x2a2>
  409a36:	45a1      	cmp	r9, r4
  409a38:	f240 8107 	bls.w	409c4a <__udivmoddi4+0x2a2>
  409a3c:	3802      	subs	r0, #2
  409a3e:	443c      	add	r4, r7
  409a40:	eba4 0409 	sub.w	r4, r4, r9
  409a44:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409a48:	2100      	movs	r1, #0
  409a4a:	2e00      	cmp	r6, #0
  409a4c:	d061      	beq.n	409b12 <__udivmoddi4+0x16a>
  409a4e:	fa24 f40e 	lsr.w	r4, r4, lr
  409a52:	2300      	movs	r3, #0
  409a54:	6034      	str	r4, [r6, #0]
  409a56:	6073      	str	r3, [r6, #4]
  409a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409a5c:	428b      	cmp	r3, r1
  409a5e:	d907      	bls.n	409a70 <__udivmoddi4+0xc8>
  409a60:	2e00      	cmp	r6, #0
  409a62:	d054      	beq.n	409b0e <__udivmoddi4+0x166>
  409a64:	2100      	movs	r1, #0
  409a66:	e886 0021 	stmia.w	r6, {r0, r5}
  409a6a:	4608      	mov	r0, r1
  409a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409a70:	fab3 f183 	clz	r1, r3
  409a74:	2900      	cmp	r1, #0
  409a76:	f040 808e 	bne.w	409b96 <__udivmoddi4+0x1ee>
  409a7a:	42ab      	cmp	r3, r5
  409a7c:	d302      	bcc.n	409a84 <__udivmoddi4+0xdc>
  409a7e:	4282      	cmp	r2, r0
  409a80:	f200 80fa 	bhi.w	409c78 <__udivmoddi4+0x2d0>
  409a84:	1a84      	subs	r4, r0, r2
  409a86:	eb65 0503 	sbc.w	r5, r5, r3
  409a8a:	2001      	movs	r0, #1
  409a8c:	46ac      	mov	ip, r5
  409a8e:	2e00      	cmp	r6, #0
  409a90:	d03f      	beq.n	409b12 <__udivmoddi4+0x16a>
  409a92:	e886 1010 	stmia.w	r6, {r4, ip}
  409a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409a9a:	b912      	cbnz	r2, 409aa2 <__udivmoddi4+0xfa>
  409a9c:	2701      	movs	r7, #1
  409a9e:	fbb7 f7f2 	udiv	r7, r7, r2
  409aa2:	fab7 fe87 	clz	lr, r7
  409aa6:	f1be 0f00 	cmp.w	lr, #0
  409aaa:	d134      	bne.n	409b16 <__udivmoddi4+0x16e>
  409aac:	1beb      	subs	r3, r5, r7
  409aae:	0c3a      	lsrs	r2, r7, #16
  409ab0:	fa1f fc87 	uxth.w	ip, r7
  409ab4:	2101      	movs	r1, #1
  409ab6:	fbb3 f8f2 	udiv	r8, r3, r2
  409aba:	0c25      	lsrs	r5, r4, #16
  409abc:	fb02 3318 	mls	r3, r2, r8, r3
  409ac0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409ac4:	fb0c f308 	mul.w	r3, ip, r8
  409ac8:	42ab      	cmp	r3, r5
  409aca:	d907      	bls.n	409adc <__udivmoddi4+0x134>
  409acc:	19ed      	adds	r5, r5, r7
  409ace:	f108 30ff 	add.w	r0, r8, #4294967295
  409ad2:	d202      	bcs.n	409ada <__udivmoddi4+0x132>
  409ad4:	42ab      	cmp	r3, r5
  409ad6:	f200 80d1 	bhi.w	409c7c <__udivmoddi4+0x2d4>
  409ada:	4680      	mov	r8, r0
  409adc:	1aed      	subs	r5, r5, r3
  409ade:	b2a3      	uxth	r3, r4
  409ae0:	fbb5 f0f2 	udiv	r0, r5, r2
  409ae4:	fb02 5510 	mls	r5, r2, r0, r5
  409ae8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409aec:	fb0c fc00 	mul.w	ip, ip, r0
  409af0:	45a4      	cmp	ip, r4
  409af2:	d907      	bls.n	409b04 <__udivmoddi4+0x15c>
  409af4:	19e4      	adds	r4, r4, r7
  409af6:	f100 33ff 	add.w	r3, r0, #4294967295
  409afa:	d202      	bcs.n	409b02 <__udivmoddi4+0x15a>
  409afc:	45a4      	cmp	ip, r4
  409afe:	f200 80b8 	bhi.w	409c72 <__udivmoddi4+0x2ca>
  409b02:	4618      	mov	r0, r3
  409b04:	eba4 040c 	sub.w	r4, r4, ip
  409b08:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409b0c:	e79d      	b.n	409a4a <__udivmoddi4+0xa2>
  409b0e:	4631      	mov	r1, r6
  409b10:	4630      	mov	r0, r6
  409b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409b16:	f1ce 0420 	rsb	r4, lr, #32
  409b1a:	fa05 f30e 	lsl.w	r3, r5, lr
  409b1e:	fa07 f70e 	lsl.w	r7, r7, lr
  409b22:	fa20 f804 	lsr.w	r8, r0, r4
  409b26:	0c3a      	lsrs	r2, r7, #16
  409b28:	fa25 f404 	lsr.w	r4, r5, r4
  409b2c:	ea48 0803 	orr.w	r8, r8, r3
  409b30:	fbb4 f1f2 	udiv	r1, r4, r2
  409b34:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409b38:	fb02 4411 	mls	r4, r2, r1, r4
  409b3c:	fa1f fc87 	uxth.w	ip, r7
  409b40:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409b44:	fb01 f30c 	mul.w	r3, r1, ip
  409b48:	42ab      	cmp	r3, r5
  409b4a:	fa00 f40e 	lsl.w	r4, r0, lr
  409b4e:	d909      	bls.n	409b64 <__udivmoddi4+0x1bc>
  409b50:	19ed      	adds	r5, r5, r7
  409b52:	f101 30ff 	add.w	r0, r1, #4294967295
  409b56:	f080 808a 	bcs.w	409c6e <__udivmoddi4+0x2c6>
  409b5a:	42ab      	cmp	r3, r5
  409b5c:	f240 8087 	bls.w	409c6e <__udivmoddi4+0x2c6>
  409b60:	3902      	subs	r1, #2
  409b62:	443d      	add	r5, r7
  409b64:	1aeb      	subs	r3, r5, r3
  409b66:	fa1f f588 	uxth.w	r5, r8
  409b6a:	fbb3 f0f2 	udiv	r0, r3, r2
  409b6e:	fb02 3310 	mls	r3, r2, r0, r3
  409b72:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409b76:	fb00 f30c 	mul.w	r3, r0, ip
  409b7a:	42ab      	cmp	r3, r5
  409b7c:	d907      	bls.n	409b8e <__udivmoddi4+0x1e6>
  409b7e:	19ed      	adds	r5, r5, r7
  409b80:	f100 38ff 	add.w	r8, r0, #4294967295
  409b84:	d26f      	bcs.n	409c66 <__udivmoddi4+0x2be>
  409b86:	42ab      	cmp	r3, r5
  409b88:	d96d      	bls.n	409c66 <__udivmoddi4+0x2be>
  409b8a:	3802      	subs	r0, #2
  409b8c:	443d      	add	r5, r7
  409b8e:	1aeb      	subs	r3, r5, r3
  409b90:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409b94:	e78f      	b.n	409ab6 <__udivmoddi4+0x10e>
  409b96:	f1c1 0720 	rsb	r7, r1, #32
  409b9a:	fa22 f807 	lsr.w	r8, r2, r7
  409b9e:	408b      	lsls	r3, r1
  409ba0:	fa05 f401 	lsl.w	r4, r5, r1
  409ba4:	ea48 0303 	orr.w	r3, r8, r3
  409ba8:	fa20 fe07 	lsr.w	lr, r0, r7
  409bac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409bb0:	40fd      	lsrs	r5, r7
  409bb2:	ea4e 0e04 	orr.w	lr, lr, r4
  409bb6:	fbb5 f9fc 	udiv	r9, r5, ip
  409bba:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409bbe:	fb0c 5519 	mls	r5, ip, r9, r5
  409bc2:	fa1f f883 	uxth.w	r8, r3
  409bc6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  409bca:	fb09 f408 	mul.w	r4, r9, r8
  409bce:	42ac      	cmp	r4, r5
  409bd0:	fa02 f201 	lsl.w	r2, r2, r1
  409bd4:	fa00 fa01 	lsl.w	sl, r0, r1
  409bd8:	d908      	bls.n	409bec <__udivmoddi4+0x244>
  409bda:	18ed      	adds	r5, r5, r3
  409bdc:	f109 30ff 	add.w	r0, r9, #4294967295
  409be0:	d243      	bcs.n	409c6a <__udivmoddi4+0x2c2>
  409be2:	42ac      	cmp	r4, r5
  409be4:	d941      	bls.n	409c6a <__udivmoddi4+0x2c2>
  409be6:	f1a9 0902 	sub.w	r9, r9, #2
  409bea:	441d      	add	r5, r3
  409bec:	1b2d      	subs	r5, r5, r4
  409bee:	fa1f fe8e 	uxth.w	lr, lr
  409bf2:	fbb5 f0fc 	udiv	r0, r5, ip
  409bf6:	fb0c 5510 	mls	r5, ip, r0, r5
  409bfa:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409bfe:	fb00 f808 	mul.w	r8, r0, r8
  409c02:	45a0      	cmp	r8, r4
  409c04:	d907      	bls.n	409c16 <__udivmoddi4+0x26e>
  409c06:	18e4      	adds	r4, r4, r3
  409c08:	f100 35ff 	add.w	r5, r0, #4294967295
  409c0c:	d229      	bcs.n	409c62 <__udivmoddi4+0x2ba>
  409c0e:	45a0      	cmp	r8, r4
  409c10:	d927      	bls.n	409c62 <__udivmoddi4+0x2ba>
  409c12:	3802      	subs	r0, #2
  409c14:	441c      	add	r4, r3
  409c16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  409c1a:	eba4 0408 	sub.w	r4, r4, r8
  409c1e:	fba0 8902 	umull	r8, r9, r0, r2
  409c22:	454c      	cmp	r4, r9
  409c24:	46c6      	mov	lr, r8
  409c26:	464d      	mov	r5, r9
  409c28:	d315      	bcc.n	409c56 <__udivmoddi4+0x2ae>
  409c2a:	d012      	beq.n	409c52 <__udivmoddi4+0x2aa>
  409c2c:	b156      	cbz	r6, 409c44 <__udivmoddi4+0x29c>
  409c2e:	ebba 030e 	subs.w	r3, sl, lr
  409c32:	eb64 0405 	sbc.w	r4, r4, r5
  409c36:	fa04 f707 	lsl.w	r7, r4, r7
  409c3a:	40cb      	lsrs	r3, r1
  409c3c:	431f      	orrs	r7, r3
  409c3e:	40cc      	lsrs	r4, r1
  409c40:	6037      	str	r7, [r6, #0]
  409c42:	6074      	str	r4, [r6, #4]
  409c44:	2100      	movs	r1, #0
  409c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409c4a:	4618      	mov	r0, r3
  409c4c:	e6f8      	b.n	409a40 <__udivmoddi4+0x98>
  409c4e:	4690      	mov	r8, r2
  409c50:	e6e0      	b.n	409a14 <__udivmoddi4+0x6c>
  409c52:	45c2      	cmp	sl, r8
  409c54:	d2ea      	bcs.n	409c2c <__udivmoddi4+0x284>
  409c56:	ebb8 0e02 	subs.w	lr, r8, r2
  409c5a:	eb69 0503 	sbc.w	r5, r9, r3
  409c5e:	3801      	subs	r0, #1
  409c60:	e7e4      	b.n	409c2c <__udivmoddi4+0x284>
  409c62:	4628      	mov	r0, r5
  409c64:	e7d7      	b.n	409c16 <__udivmoddi4+0x26e>
  409c66:	4640      	mov	r0, r8
  409c68:	e791      	b.n	409b8e <__udivmoddi4+0x1e6>
  409c6a:	4681      	mov	r9, r0
  409c6c:	e7be      	b.n	409bec <__udivmoddi4+0x244>
  409c6e:	4601      	mov	r1, r0
  409c70:	e778      	b.n	409b64 <__udivmoddi4+0x1bc>
  409c72:	3802      	subs	r0, #2
  409c74:	443c      	add	r4, r7
  409c76:	e745      	b.n	409b04 <__udivmoddi4+0x15c>
  409c78:	4608      	mov	r0, r1
  409c7a:	e708      	b.n	409a8e <__udivmoddi4+0xe6>
  409c7c:	f1a8 0802 	sub.w	r8, r8, #2
  409c80:	443d      	add	r5, r7
  409c82:	e72b      	b.n	409adc <__udivmoddi4+0x134>

00409c84 <__aeabi_idiv0>:
  409c84:	4770      	bx	lr
  409c86:	bf00      	nop

00409c88 <sysfont_glyphs>:
  409c88:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
  409c98:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
  409ca8:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
  409cb8:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
  409cc8:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
  409cd8:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
  409ce8:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
  409cf8:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
  409d08:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
  409d18:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
  409d28:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
  409d38:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
  409d48:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
  409d58:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
  409d68:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
  409d78:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
  409d88:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
  409d98:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
  409da8:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
  409db8:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
  409dc8:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
  409dd8:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
  409de8:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
  409df8:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
  409e08:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
  409e18:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
  409e28:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
  409e38:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
  409e48:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
  409e58:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
  409e68:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
  409e78:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
  409e88:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
  409e98:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
  409ea8:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
  409eb8:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
  409ec8:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
  409ed8:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
  409ee8:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
  409ef8:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
  409f08:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
  409f18:	4020 0000 4449 454c 0000 0000 6d54 5172      @..IDLE....TmrQ
  409f28:	0000 0000 6d54 2072 7653 0063 6c63 5f6b     ....Tmr Svc.clk_
  409f38:	6163 6c6c 6162 6b63 0a20 0000 6553 746e     callback ...Sent
  409f48:	6469 206f 6f68 6172 6972 206f 000a 0000     ido horario ....
  409f58:	6553 746e 6469 206f 6e61 6974 682d 726f     Sentido anti-hor
  409f68:	7261 6f69 0a20 0000 6c6f 6465 0000 0000     ario ...oled....
  409f78:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
  409f88:	6f20 656c 2064 6174 6b73 0a0d 0000 0000      oled task......
  409f98:	656c 0064 6146 6c69 6465 7420 206f 7263     led.Failed to cr
  409fa8:	6165 6574 6c20 6465 7420 7361 0d6b 000a     eate led task...
  409fb8:	6f42 6174 206f 6f73 746c 206f 000a 0000     Botao solto ....
  409fc8:	6554 706d 206f 6564 7020 6572 7373 6f69     Tempo de pressio
  409fd8:	616e 656d 746e 3a6f 2520 2064 6573 7567     namento: %d segu
  409fe8:	646e 736f 0a20 0000 4553 5547 4f52 2055     ndos ...SEGUROU 
  409ff8:	2035 4553 5547 444e 534f 0a20 0000 0000     5 SEGUNDOS .....
  40a008:	6554 706d 206f 6564 7020 6572 7373 6f69     Tempo de pressio
  40a018:	616e 656d 746e 3a6f 2520 2064 696d 696c     namento: %d mili
  40a028:	6573 7567 646e 736f 0a20 0000 6f42 6174     segundos ...Bota
  40a038:	206f 7270 7365 6973 6e6f 6461 206f 000a     o pressionado ..
  40a048:	7241 6874 7275 4320 7369 746f 6f74 0000     Arthur Cisotto..
  40a058:	2030 2078 5825 2520 2058 5825 2520 0058     0 x %X %X %X %X.
  40a068:	7473 6361 206b 766f 7265 6c66 776f 2520     stack overflow %
  40a078:	2078 7325 0a0d 0000                         x %s....

0040a080 <_global_impure_ptr>:
  40a080:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  40a090:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  40a0a0:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40a0b0:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40a0c0:	296c 0000 0030 0000                         l)..0...

0040a0c8 <blanks.7223>:
  40a0c8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040a0d8 <zeroes.7224>:
  40a0d8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000

0040a0e8 <blanks.7217>:
  40a0e8:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040a0f8 <zeroes.7218>:
  40a0f8:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40a108:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.
  40a118:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040a128 <__mprec_bigtens>:
  40a128:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  40a138:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  40a148:	bf3c 7f73 4fdd 7515                         <.s..O.u

0040a150 <__mprec_tens>:
  40a150:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  40a160:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  40a170:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  40a180:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  40a190:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  40a1a0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  40a1b0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  40a1c0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  40a1d0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  40a1e0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  40a1f0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  40a200:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  40a210:	9db4 79d9 7843 44ea                         ...yCx.D

0040a218 <p05.6055>:
  40a218:	0005 0000 0019 0000 007d 0000               ........}...

0040a224 <_ctype_>:
  40a224:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40a234:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40a244:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40a254:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40a264:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40a274:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40a284:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40a294:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40a2a4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040a328 <_init>:
  40a328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a32a:	bf00      	nop
  40a32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a32e:	bc08      	pop	{r3}
  40a330:	469e      	mov	lr, r3
  40a332:	4770      	bx	lr

0040a334 <__init_array_start>:
  40a334:	004065d5 	.word	0x004065d5

0040a338 <__frame_dummy_init_array_entry>:
  40a338:	00400165                                e.@.

0040a33c <_fini>:
  40a33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a33e:	bf00      	nop
  40a340:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a342:	bc08      	pop	{r3}
  40a344:	469e      	mov	lr, r3
  40a346:	4770      	bx	lr

0040a348 <__fini_array_start>:
  40a348:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 9c88 0040 0706 7d20               ......@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <uxCriticalNesting>:
20400020:	aaaa aaaa                                   ....

20400024 <_impure_ptr>:
20400024:	0028 2040                                   (.@ 

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__malloc_av_>:
	...
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 

20400858 <__malloc_sbrk_base>:
20400858:	ffff ffff                                   ....

2040085c <__malloc_trim_threshold>:
2040085c:	0000 0002                                   ....

20400860 <__atexit_recursive_mutex>:
20400860:	0e40 2040                                   @.@ 

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	8d61 0040 7ff9 0040 0000 0000 a224 0040     a.@...@.....$.@.
20400954:	a124 0040 9f94 0040 9f94 0040 9f94 0040     $.@...@...@...@.
20400964:	9f94 0040 9f94 0040 9f94 0040 9f94 0040     ..@...@...@...@.
20400974:	9f94 0040 9f94 0040 ffff ffff ffff ffff     ..@...@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
